//
// This is the grammar specification from the Final Draft of the generic spec.
//
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007 IBM Corporation.
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the Eclipse Public License v1.0
// which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v10.html
//
//Contributors:
//    Philippe Charles (pcharles@us.ibm.com) - initial API and implementation

////////////////////////////////////////////////////////////////////////////////


    //#line 150 "dtParserTemplateF.gi

import {BadParseException, RuleAction, PrsStream, ParseTable, BacktrackingParser, IToken, ErrorToken, ILexStream, NullExportedSymbolsException, 
UnimplementedTerminalsException, Lpg, UndefinedEofSymbolException, NotBacktrackParseTableException, BadParseSymFileException, 
IPrsStream, Monitor, DiagnoseParser, IAst, IAstVisitor, IAbstractArrayList, NotDeterministicParseTableException,
DeterministicParser, NullTerminalSymbolsException } from "../../src";
import { JavaParserprs } from ".\/JavaParserprs";
import { JavaParsersym } from ".\/JavaParsersym";

    //#line 18 "GJavaParser.g


    //#line 161 "dtParserTemplateF.gi

export class JavaParser extends Object implements RuleAction
{
    private  prsStream  : PrsStream = new PrsStream();
    
    private  unimplementedSymbolsWarning : boolean= false;

    private static  prsTable  : ParseTable= new JavaParserprs();
    public  getParseTable() : ParseTable{ return JavaParser.prsTable; }

    private  dtParser : DeterministicParser ;
    public  getParser() : DeterministicParser{ return this.dtParser; }

    private  setResult(object1 : any ) :void{ this.dtParser.setSym1(object1); }
    public  getRhsSym(i : number) : any { return this.dtParser.getSym(i); }

    public  getRhsTokenIndex(i : number) : number { return this.dtParser.getToken(i); }
    public  getRhsIToken(i : number) : IToken { return this.prsStream.getIToken(this.getRhsTokenIndex(i)); }
    
    public  getRhsFirstTokenIndex(i : number) : number{ return this.dtParser.getFirstToken(i); }
    public  getRhsFirstIToken(i : number)  : IToken{ return this.prsStream.getIToken(this.getRhsFirstTokenIndex(i)); }

    public  getRhsLastTokenIndex(i : number) : number{ return this.dtParser.getLastToken(i); }
    public  getRhsLastIToken(i : number)  : IToken{ return this.prsStream.getIToken(this.getRhsLastTokenIndex(i)); }

    public  getLeftSpan() : number{ return this.dtParser.getFirstToken(); }
    public  getLeftIToken() : IToken { return this.prsStream.getIToken(this.getLeftSpan()); }

    public  getRightSpan() : number { return this.dtParser.getLastToken(); }
    public  getRightIToken() : IToken { return this.prsStream.getIToken(this.getRightSpan()); }

    public  getRhsErrorTokenIndex(i : number) : number
    {
        let index = this.dtParser.getToken(i);
        let err = this.prsStream.getIToken(index);
        return (err instanceof ErrorToken ? index : 0);
    }
    public  getRhsErrorIToken(i : number) : ErrorToken
    {
        let index = this.dtParser.getToken(i);
        let err = this.prsStream.getIToken(index);
        return <ErrorToken> (err instanceof ErrorToken ? err : null);
    }

    public  reset(lexStream : ILexStream) : void
    {
        this.prsStream.resetLexStream(lexStream);
        this.dtParser.reset(this.prsStream);

        try
        {
            this.prsStream.remapTerminalSymbols(this.orderedTerminalSymbols(), JavaParser.prsTable.getEoftSymbol());
        }
        catch(ex)
        {
            if( ex  instanceof NullExportedSymbolsException) {
            }
            else if(ex  instanceof NullTerminalSymbolsException) {
            }
            else if(ex  instanceof UnimplementedTerminalsException)
            {
                if (this.unimplementedSymbolsWarning) {
                    let e = <UnimplementedTerminalsException>(ex);
                    let unimplemented_symbols = e.getSymbols();
                    Lpg.Lang.System.Out.println("The Lexer will not scan the following token(s):");
                    for (let i : number = 0; i < unimplemented_symbols.size(); i++)
                    {
                        let  id  : number = unimplemented_symbols.get(i);
                        Lpg.Lang.System.Out.println("    " + JavaParsersym.orderedTerminalSymbols[id]);               
                    }
                    Lpg.Lang.System.Out.println();
                }
            }
            else if(ex  instanceof UndefinedEofSymbolException )
            {
                throw (new UndefinedEofSymbolException
                                    ("The Lexer does not implement the Eof symbol " +
                                    JavaParsersym.orderedTerminalSymbols[JavaParser.prsTable.getEoftSymbol()]));
            }
            else{
                throw ex;
            }
        }


    }
    
   constructor(lexStream? :ILexStream)
    {
        super();
      
        try
        {
            this.dtParser = new DeterministicParser(null, JavaParser.prsTable, <RuleAction> this);
        }
        catch (e)
        {
            if( e instanceof NotDeterministicParseTableException)
            throw (new NotDeterministicParseTableException
                                ("Regenerate JavaParserprs.ts with -NOBACKTRACK option"));
            else if( e instanceof BadParseSymFileException){
             throw (new BadParseSymFileException("Bad Parser Symbol File -- JavaParsersym.ts. Regenerate JavaParserprs.ts"));
            }
            else{
                throw e;
            }
        }
        if(lexStream){
          this.reset(lexStream);
        }
    }

  

    public  numTokenKinds() : number{ return JavaParsersym.numTokenKinds; }
    public  orderedTerminalSymbols()  : string[] { return JavaParsersym.orderedTerminalSymbols; }
    public  getTokenKindName(kind : number ) : string{ return JavaParsersym.orderedTerminalSymbols[kind]; }            
    public  getEOFTokenKind() : number{ return JavaParser.prsTable.getEoftSymbol(); }
    public  getIPrsStream()  : IPrsStream{ return this.prsStream; }

    /**
     * @deprecated replaced by {@link #getIPrsStream()}
     *
     */
    public  getPrsStream() : PrsStream{ return this.prsStream; }

    /**
     * @deprecated replaced by {@link #getIPrsStream()}
     *
     */
    public  getParseStream() : PrsStream{ return this.prsStream; }

    public parser(error_repair_count : number = 0 ,  monitor? : Monitor) :  Ast | null
    {
        this.dtParser.setMonitor(monitor);

        try
        {
            return <Ast> this.dtParser.parseEntry();
        }
        catch ( ex)
        {
            if( ex instanceof BadParseException ){
                let e = <BadParseException>(ex);
                this.prsStream.reset(e.error_token); // point to error token

                let diagnoseParser = new DiagnoseParser(this.prsStream, JavaParser.prsTable);
                diagnoseParser.diagnose(e.error_token);
            }
            else{
                throw ex;
            }
        }

        return null;
    }

    //
    // Additional entry points, if any
    //
    
   
    public  resetParseClassBodyDeclarationsopt() : void
    {
        this.dtParser.resetParserEntry(JavaParsersym.TK_ClassBodyDeclarationsoptMarker);
    }
    
    public  parseClassBodyDeclarationsopt(monitor? : Monitor | null, error_repair_count: number = 0) : Ast | null
    {
        if(monitor)
            this.dtParser.setMonitor(monitor);
        
        try
        {
            return <Ast> this.dtParser.parseEntry(JavaParsersym.TK_ClassBodyDeclarationsoptMarker);
        }
        catch (ex)
        {
            if( ex instanceof BadParseException ){
              let e = <BadParseException>(ex);
              this.prsStream.reset(e.error_token); // point to error token

              let diagnoseParser = new DiagnoseParser(this.prsStream, JavaParser.prsTable);
              diagnoseParser.diagnoseEntry(JavaParsersym.TK_ClassBodyDeclarationsoptMarker, e.error_token);
            }
            else{
                throw ex;
            }
        }

        return null;
    }

   
    public  resetParseLPGUserAction() : void
    {
        this.dtParser.resetParserEntry(JavaParsersym.TK_LPGUserActionMarker);
    }
    
    public  parseLPGUserAction(monitor? : Monitor | null, error_repair_count: number = 0) : Ast | null
    {
        if(monitor)
            this.dtParser.setMonitor(monitor);
        
        try
        {
            return <Ast> this.dtParser.parseEntry(JavaParsersym.TK_LPGUserActionMarker);
        }
        catch (ex)
        {
            if( ex instanceof BadParseException ){
              let e = <BadParseException>(ex);
              this.prsStream.reset(e.error_token); // point to error token

              let diagnoseParser = new DiagnoseParser(this.prsStream, JavaParser.prsTable);
              diagnoseParser.diagnoseEntry(JavaParsersym.TK_LPGUserActionMarker, e.error_token);
            }
            else{
                throw ex;
            }
        }

        return null;
    }


    //#line 185 "GJavaParser.g


    
    //#line 327 "dtParserTemplateF.gi

    public  ruleAction(ruleNumber : number ) : void
    {
        switch (ruleNumber)
        {
            //#line 328 "dtParserTemplateF.gi"

            //
            // Rule 3:  identifier ::= IDENTIFIER
            //
            case 3: {
                //#line 184 "GJavaParser.g"
                this.setResult(
                    //#line 184 GJavaParser.g
                    new identifier(this, this.getRhsIToken(1))
                //#line 184 GJavaParser.g
                );
            break;
            }
            //
            // Rule 4:  LPGUserAction ::= BlockStatementsopt
            //
            case 4:
                break;
            //
            // Rule 5:  LPGUserAction ::= %BeginAction BlockStatementsopt %EndAction
            //
            case 5: {
                //#line 190 "GJavaParser.g"
                this.setResult(
                    //#line 190 GJavaParser.g
                    new LPGUserAction0(this.getLeftIToken(), this.getRightIToken(),
                                       //#line 190 GJavaParser.g
                                       new AstToken(this.getRhsIToken(1)),
                                       //#line 190 GJavaParser.g
                                       <IBlockStatementsopt>this.getRhsSym(2),
                                       //#line 190 GJavaParser.g
                                       new AstToken(this.getRhsIToken(3)))
                //#line 190 GJavaParser.g
                );
            break;
            }
            //
            // Rule 6:  LPGUserAction ::= $BeginJava BlockStatementsopt $EndJava
            //
            case 6: {
                //#line 191 "GJavaParser.g"
                this.setResult(
                    //#line 191 GJavaParser.g
                    new LPGUserAction1(this.getLeftIToken(), this.getRightIToken(),
                                       //#line 191 GJavaParser.g
                                       new AstToken(this.getRhsIToken(1)),
                                       //#line 191 GJavaParser.g
                                       <IBlockStatementsopt>this.getRhsSym(2),
                                       //#line 191 GJavaParser.g
                                       new AstToken(this.getRhsIToken(3)))
                //#line 191 GJavaParser.g
                );
            break;
            }
            //
            // Rule 7:  LPGUserAction ::= $NoAction
            //
            case 7: {
                //#line 192 "GJavaParser.g"
                this.setResult(
                    //#line 192 GJavaParser.g
                    new LPGUserAction2(this.getRhsIToken(1))
                //#line 192 GJavaParser.g
                );
            break;
            }
            //
            // Rule 8:  LPGUserAction ::= $NullAction
            //
            case 8: {
                //#line 193 "GJavaParser.g"
                this.setResult(
                    //#line 193 GJavaParser.g
                    new LPGUserAction3(this.getRhsIToken(1))
                //#line 193 GJavaParser.g
                );
            break;
            }
            //
            // Rule 9:  LPGUserAction ::= $BadAction
            //
            case 9: {
                //#line 194 "GJavaParser.g"
                this.setResult(
                    //#line 194 GJavaParser.g
                    new LPGUserAction4(this.getRhsIToken(1))
                //#line 194 GJavaParser.g
                );
            break;
            }
            //
            // Rule 10:  Type ::= PrimitiveType
            //
            case 10:
                break;
            //
            // Rule 11:  Type ::= ReferenceType
            //
            case 11:
                break;
            //
            // Rule 12:  PrimitiveType ::= NumericType
            //
            case 12:
                break;
            //
            // Rule 13:  PrimitiveType ::= boolean
            //
            case 13: {
                //#line 203 "GJavaParser.g"
                this.setResult(
                    //#line 203 GJavaParser.g
                    new PrimitiveType(this.getRhsIToken(1))
                //#line 203 GJavaParser.g
                );
            break;
            }
            //
            // Rule 14:  NumericType ::= IntegralType
            //
            case 14:
                break;
            //
            // Rule 15:  NumericType ::= FloatingPointType
            //
            case 15:
                break;
            //
            // Rule 16:  IntegralType ::= byte
            //
            case 16: {
                //#line 208 "GJavaParser.g"
                this.setResult(
                    //#line 208 GJavaParser.g
                    new IntegralType0(this.getRhsIToken(1))
                //#line 208 GJavaParser.g
                );
            break;
            }
            //
            // Rule 17:  IntegralType ::= short
            //
            case 17: {
                //#line 209 "GJavaParser.g"
                this.setResult(
                    //#line 209 GJavaParser.g
                    new IntegralType1(this.getRhsIToken(1))
                //#line 209 GJavaParser.g
                );
            break;
            }
            //
            // Rule 18:  IntegralType ::= int
            //
            case 18: {
                //#line 210 "GJavaParser.g"
                this.setResult(
                    //#line 210 GJavaParser.g
                    new IntegralType2(this.getRhsIToken(1))
                //#line 210 GJavaParser.g
                );
            break;
            }
            //
            // Rule 19:  IntegralType ::= long
            //
            case 19: {
                //#line 211 "GJavaParser.g"
                this.setResult(
                    //#line 211 GJavaParser.g
                    new IntegralType3(this.getRhsIToken(1))
                //#line 211 GJavaParser.g
                );
            break;
            }
            //
            // Rule 20:  IntegralType ::= char
            //
            case 20: {
                //#line 212 "GJavaParser.g"
                this.setResult(
                    //#line 212 GJavaParser.g
                    new IntegralType4(this.getRhsIToken(1))
                //#line 212 GJavaParser.g
                );
            break;
            }
            //
            // Rule 21:  FloatingPointType ::= float
            //
            case 21: {
                //#line 214 "GJavaParser.g"
                this.setResult(
                    //#line 214 GJavaParser.g
                    new FloatingPointType0(this.getRhsIToken(1))
                //#line 214 GJavaParser.g
                );
            break;
            }
            //
            // Rule 22:  FloatingPointType ::= double
            //
            case 22: {
                //#line 215 "GJavaParser.g"
                this.setResult(
                    //#line 215 GJavaParser.g
                    new FloatingPointType1(this.getRhsIToken(1))
                //#line 215 GJavaParser.g
                );
            break;
            }
            //
            // Rule 23:  ReferenceType ::= ClassOrInterfaceType
            //
            case 23:
                break;
            //
            // Rule 24:  ReferenceType ::= TypeVariable
            //
            case 24:
                break;
            //
            // Rule 25:  ReferenceType ::= ArrayType
            //
            case 25:
                break;
            //
            // Rule 26:  ClassOrInterfaceType ::= ClassType
            //
            case 26:
                break;
            //
            // Rule 27:  ClassType ::= TypeName TypeArgumentsopt
            //
            case 27: {
                //#line 227 "GJavaParser.g"
                this.setResult(
                    //#line 227 GJavaParser.g
                    new ClassType(this.getLeftIToken(), this.getRightIToken(),
                                  //#line 227 GJavaParser.g
                                  <ITypeName>this.getRhsSym(1),
                                  //#line 227 GJavaParser.g
                                  <TypeArguments>this.getRhsSym(2))
                //#line 227 GJavaParser.g
                );
            break;
            }
            //
            // Rule 28:  InterfaceType ::= TypeName TypeArgumentsopt
            //
            case 28: {
                //#line 229 "GJavaParser.g"
                this.setResult(
                    //#line 229 GJavaParser.g
                    new InterfaceType(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 229 GJavaParser.g
                                      <ITypeName>this.getRhsSym(1),
                                      //#line 229 GJavaParser.g
                                      <TypeArguments>this.getRhsSym(2))
                //#line 229 GJavaParser.g
                );
            break;
            }
            //
            // Rule 29:  TypeName ::= identifier
            //
            case 29:
                break;
            //
            // Rule 30:  TypeName ::= TypeName . identifier
            //
            case 30: {
                //#line 232 "GJavaParser.g"
                this.setResult(
                    //#line 232 GJavaParser.g
                    new TypeName(this.getLeftIToken(), this.getRightIToken(),
                                 //#line 232 GJavaParser.g
                                 <ITypeName>this.getRhsSym(1),
                                 //#line 232 GJavaParser.g
                                 new AstToken(this.getRhsIToken(2)),
                                 //#line 232 GJavaParser.g
                                 <identifier>this.getRhsSym(3))
                //#line 232 GJavaParser.g
                );
            break;
            }
            //
            // Rule 31:  ClassName ::= TypeName
            //
            case 31:
                break;
            //
            // Rule 32:  TypeVariable ::= identifier
            //
            case 32:
                break;
            //
            // Rule 33:  ArrayType ::= Type [ ]
            //
            case 33: {
                //#line 238 "GJavaParser.g"
                this.setResult(
                    //#line 238 GJavaParser.g
                    new ArrayType(this.getLeftIToken(), this.getRightIToken(),
                                  //#line 238 GJavaParser.g
                                  <IType>this.getRhsSym(1),
                                  //#line 238 GJavaParser.g
                                  new AstToken(this.getRhsIToken(2)),
                                  //#line 238 GJavaParser.g
                                  new AstToken(this.getRhsIToken(3)))
                //#line 238 GJavaParser.g
                );
            break;
            }
            //
            // Rule 34:  TypeParameter ::= TypeVariable TypeBoundopt
            //
            case 34: {
                //#line 240 "GJavaParser.g"
                this.setResult(
                    //#line 240 GJavaParser.g
                    new TypeParameter(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 240 GJavaParser.g
                                      <identifier>this.getRhsSym(1),
                                      //#line 240 GJavaParser.g
                                      <TypeBound>this.getRhsSym(2))
                //#line 240 GJavaParser.g
                );
            break;
            }
            //
            // Rule 35:  TypeBound ::= extends ClassOrInterfaceType AdditionalBoundListopt
            //
            case 35: {
                //#line 242 "GJavaParser.g"
                this.setResult(
                    //#line 242 GJavaParser.g
                    new TypeBound(this.getLeftIToken(), this.getRightIToken(),
                                  //#line 242 GJavaParser.g
                                  new AstToken(this.getRhsIToken(1)),
                                  //#line 242 GJavaParser.g
                                  <ClassType>this.getRhsSym(2),
                                  //#line 242 GJavaParser.g
                                  <IAdditionalBoundListopt>this.getRhsSym(3))
                //#line 242 GJavaParser.g
                );
            break;
            }
            //
            // Rule 36:  AdditionalBoundList ::= AdditionalBound
            //
            case 36:
                break;
            //
            // Rule 37:  AdditionalBoundList ::= AdditionalBoundList AdditionalBound
            //
            case 37: {
                //#line 245 "GJavaParser.g"
                this.setResult(
                    //#line 245 GJavaParser.g
                    new AdditionalBoundList(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 245 GJavaParser.g
                                            <IAdditionalBoundList>this.getRhsSym(1),
                                            //#line 245 GJavaParser.g
                                            <AdditionalBound>this.getRhsSym(2))
                //#line 245 GJavaParser.g
                );
            break;
            }
            //
            // Rule 38:  AdditionalBound ::= & InterfaceType
            //
            case 38: {
                //#line 247 "GJavaParser.g"
                this.setResult(
                    //#line 247 GJavaParser.g
                    new AdditionalBound(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 247 GJavaParser.g
                                        new AstToken(this.getRhsIToken(1)),
                                        //#line 247 GJavaParser.g
                                        <InterfaceType>this.getRhsSym(2))
                //#line 247 GJavaParser.g
                );
            break;
            }
            //
            // Rule 39:  TypeArguments ::= < ActualTypeArgumentList >
            //
            case 39: {
                //#line 249 "GJavaParser.g"
                this.setResult(
                    //#line 249 GJavaParser.g
                    new TypeArguments(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 249 GJavaParser.g
                                      new AstToken(this.getRhsIToken(1)),
                                      //#line 249 GJavaParser.g
                                      <IActualTypeArgumentList>this.getRhsSym(2),
                                      //#line 249 GJavaParser.g
                                      new AstToken(this.getRhsIToken(3)))
                //#line 249 GJavaParser.g
                );
            break;
            }
            //
            // Rule 40:  ActualTypeArgumentList ::= ActualTypeArgument
            //
            case 40:
                break;
            //
            // Rule 41:  ActualTypeArgumentList ::= ActualTypeArgumentList , ActualTypeArgument
            //
            case 41: {
                //#line 252 "GJavaParser.g"
                this.setResult(
                    //#line 252 GJavaParser.g
                    new ActualTypeArgumentList(this.getLeftIToken(), this.getRightIToken(),
                                               //#line 252 GJavaParser.g
                                               <IActualTypeArgumentList>this.getRhsSym(1),
                                               //#line 252 GJavaParser.g
                                               new AstToken(this.getRhsIToken(2)),
                                               //#line 252 GJavaParser.g
                                               <IActualTypeArgument>this.getRhsSym(3))
                //#line 252 GJavaParser.g
                );
            break;
            }
            //
            // Rule 42:  ActualTypeArgument ::= ReferenceType
            //
            case 42:
                break;
            //
            // Rule 43:  ActualTypeArgument ::= Wildcard
            //
            case 43:
                break;
            //
            // Rule 44:  Wildcard ::= ? WildcardBoundsOpt
            //
            case 44: {
                //#line 257 "GJavaParser.g"
                this.setResult(
                    //#line 257 GJavaParser.g
                    new Wildcard(this.getLeftIToken(), this.getRightIToken(),
                                 //#line 257 GJavaParser.g
                                 new AstToken(this.getRhsIToken(1)),
                                 //#line 257 GJavaParser.g
                                 <IWildcardBoundsOpt>this.getRhsSym(2))
                //#line 257 GJavaParser.g
                );
            break;
            }
            //
            // Rule 45:  WildcardBounds ::= extends ReferenceType
            //
            case 45: {
                //#line 259 "GJavaParser.g"
                this.setResult(
                    //#line 259 GJavaParser.g
                    new WildcardBounds0(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 259 GJavaParser.g
                                        new AstToken(this.getRhsIToken(1)),
                                        //#line 259 GJavaParser.g
                                        <IReferenceType>this.getRhsSym(2))
                //#line 259 GJavaParser.g
                );
            break;
            }
            //
            // Rule 46:  WildcardBounds ::= super ReferenceType
            //
            case 46: {
                //#line 260 "GJavaParser.g"
                this.setResult(
                    //#line 260 GJavaParser.g
                    new WildcardBounds1(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 260 GJavaParser.g
                                        new AstToken(this.getRhsIToken(1)),
                                        //#line 260 GJavaParser.g
                                        <IReferenceType>this.getRhsSym(2))
                //#line 260 GJavaParser.g
                );
            break;
            }
            //
            // Rule 47:  PackageName ::= identifier
            //
            case 47:
                break;
            //
            // Rule 48:  PackageName ::= PackageName . identifier
            //
            case 48: {
                //#line 267 "GJavaParser.g"
                this.setResult(
                    //#line 267 GJavaParser.g
                    new PackageName(this.getLeftIToken(), this.getRightIToken(),
                                    //#line 267 GJavaParser.g
                                    <IPackageName>this.getRhsSym(1),
                                    //#line 267 GJavaParser.g
                                    new AstToken(this.getRhsIToken(2)),
                                    //#line 267 GJavaParser.g
                                    <identifier>this.getRhsSym(3))
                //#line 267 GJavaParser.g
                );
            break;
            }
            //
            // Rule 49:  ExpressionName ::= identifier
            //
            case 49:
                break;
            //
            // Rule 50:  ExpressionName ::= AmbiguousName . identifier
            //
            case 50: {
                //#line 276 "GJavaParser.g"
                this.setResult(
                    //#line 276 GJavaParser.g
                    new ExpressionName(this.getLeftIToken(), this.getRightIToken(),
                                       //#line 276 GJavaParser.g
                                       <IAmbiguousName>this.getRhsSym(1),
                                       //#line 276 GJavaParser.g
                                       new AstToken(this.getRhsIToken(2)),
                                       //#line 276 GJavaParser.g
                                       <identifier>this.getRhsSym(3))
                //#line 276 GJavaParser.g
                );
            break;
            }
            //
            // Rule 51:  MethodName ::= identifier
            //
            case 51:
                break;
            //
            // Rule 52:  MethodName ::= AmbiguousName . identifier
            //
            case 52: {
                //#line 279 "GJavaParser.g"
                this.setResult(
                    //#line 279 GJavaParser.g
                    new MethodName(this.getLeftIToken(), this.getRightIToken(),
                                   //#line 279 GJavaParser.g
                                   <IAmbiguousName>this.getRhsSym(1),
                                   //#line 279 GJavaParser.g
                                   new AstToken(this.getRhsIToken(2)),
                                   //#line 279 GJavaParser.g
                                   <identifier>this.getRhsSym(3))
                //#line 279 GJavaParser.g
                );
            break;
            }
            //
            // Rule 53:  PackageOrTypeName ::= identifier
            //
            case 53:
                break;
            //
            // Rule 54:  PackageOrTypeName ::= PackageOrTypeName . identifier
            //
            case 54: {
                //#line 282 "GJavaParser.g"
                this.setResult(
                    //#line 282 GJavaParser.g
                    new PackageOrTypeName(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 282 GJavaParser.g
                                          <IPackageOrTypeName>this.getRhsSym(1),
                                          //#line 282 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 282 GJavaParser.g
                                          <identifier>this.getRhsSym(3))
                //#line 282 GJavaParser.g
                );
            break;
            }
            //
            // Rule 55:  AmbiguousName ::= identifier
            //
            case 55:
                break;
            //
            // Rule 56:  AmbiguousName ::= AmbiguousName . identifier
            //
            case 56: {
                //#line 285 "GJavaParser.g"
                this.setResult(
                    //#line 285 GJavaParser.g
                    new AmbiguousName(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 285 GJavaParser.g
                                      <IAmbiguousName>this.getRhsSym(1),
                                      //#line 285 GJavaParser.g
                                      new AstToken(this.getRhsIToken(2)),
                                      //#line 285 GJavaParser.g
                                      <identifier>this.getRhsSym(3))
                //#line 285 GJavaParser.g
                );
            break;
            }
            //
            // Rule 57:  CompilationUnit ::= PackageDeclarationopt ImportDeclarationsopt TypeDeclarationsopt
            //
            case 57: {
                //#line 289 "GJavaParser.g"
                this.setResult(
                    //#line 289 GJavaParser.g
                    new CompilationUnit(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 289 GJavaParser.g
                                        <PackageDeclaration>this.getRhsSym(1),
                                        //#line 289 GJavaParser.g
                                        <IImportDeclarationsopt>this.getRhsSym(2),
                                        //#line 289 GJavaParser.g
                                        <ITypeDeclarationsopt>this.getRhsSym(3))
                //#line 289 GJavaParser.g
                );
            break;
            }
            //
            // Rule 58:  ImportDeclarations ::= ImportDeclaration
            //
            case 58:
                break;
            //
            // Rule 59:  ImportDeclarations ::= ImportDeclarations ImportDeclaration
            //
            case 59: {
                //#line 292 "GJavaParser.g"
                this.setResult(
                    //#line 292 GJavaParser.g
                    new ImportDeclarations(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 292 GJavaParser.g
                                           <IImportDeclarations>this.getRhsSym(1),
                                           //#line 292 GJavaParser.g
                                           <IImportDeclaration>this.getRhsSym(2))
                //#line 292 GJavaParser.g
                );
            break;
            }
            //
            // Rule 60:  TypeDeclarations ::= TypeDeclaration
            //
            case 60:
                break;
            //
            // Rule 61:  TypeDeclarations ::= TypeDeclarations TypeDeclaration
            //
            case 61: {
                //#line 295 "GJavaParser.g"
                this.setResult(
                    //#line 295 GJavaParser.g
                    new TypeDeclarations(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 295 GJavaParser.g
                                         <ITypeDeclarations>this.getRhsSym(1),
                                         //#line 295 GJavaParser.g
                                         <ITypeDeclaration>this.getRhsSym(2))
                //#line 295 GJavaParser.g
                );
            break;
            }
            //
            // Rule 62:  PackageDeclaration ::= Annotationsopt package PackageName ;
            //
            case 62: {
                //#line 297 "GJavaParser.g"
                this.setResult(
                    //#line 297 GJavaParser.g
                    new PackageDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 297 GJavaParser.g
                                           <IAnnotationsopt>this.getRhsSym(1),
                                           //#line 297 GJavaParser.g
                                           new AstToken(this.getRhsIToken(2)),
                                           //#line 297 GJavaParser.g
                                           <IPackageName>this.getRhsSym(3),
                                           //#line 297 GJavaParser.g
                                           new AstToken(this.getRhsIToken(4)))
                //#line 297 GJavaParser.g
                );
            break;
            }
            //
            // Rule 63:  ImportDeclaration ::= SingleTypeImportDeclaration
            //
            case 63:
                break;
            //
            // Rule 64:  ImportDeclaration ::= TypeImportOnDemandDeclaration
            //
            case 64:
                break;
            //
            // Rule 65:  ImportDeclaration ::= SingleStaticImportDeclaration
            //
            case 65:
                break;
            //
            // Rule 66:  ImportDeclaration ::= StaticImportOnDemandDeclaration
            //
            case 66:
                break;
            //
            // Rule 67:  SingleTypeImportDeclaration ::= import TypeName ;
            //
            case 67: {
                //#line 304 "GJavaParser.g"
                this.setResult(
                    //#line 304 GJavaParser.g
                    new SingleTypeImportDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                                    //#line 304 GJavaParser.g
                                                    new AstToken(this.getRhsIToken(1)),
                                                    //#line 304 GJavaParser.g
                                                    <ITypeName>this.getRhsSym(2),
                                                    //#line 304 GJavaParser.g
                                                    new AstToken(this.getRhsIToken(3)))
                //#line 304 GJavaParser.g
                );
            break;
            }
            //
            // Rule 68:  TypeImportOnDemandDeclaration ::= import PackageOrTypeName . * ;
            //
            case 68: {
                //#line 306 "GJavaParser.g"
                this.setResult(
                    //#line 306 GJavaParser.g
                    new TypeImportOnDemandDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                                      //#line 306 GJavaParser.g
                                                      new AstToken(this.getRhsIToken(1)),
                                                      //#line 306 GJavaParser.g
                                                      <IPackageOrTypeName>this.getRhsSym(2),
                                                      //#line 306 GJavaParser.g
                                                      new AstToken(this.getRhsIToken(3)),
                                                      //#line 306 GJavaParser.g
                                                      new AstToken(this.getRhsIToken(4)),
                                                      //#line 306 GJavaParser.g
                                                      new AstToken(this.getRhsIToken(5)))
                //#line 306 GJavaParser.g
                );
            break;
            }
            //
            // Rule 69:  SingleStaticImportDeclaration ::= import static TypeName . identifier ;
            //
            case 69: {
                //#line 308 "GJavaParser.g"
                this.setResult(
                    //#line 308 GJavaParser.g
                    new SingleStaticImportDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                                      //#line 308 GJavaParser.g
                                                      new AstToken(this.getRhsIToken(1)),
                                                      //#line 308 GJavaParser.g
                                                      new AstToken(this.getRhsIToken(2)),
                                                      //#line 308 GJavaParser.g
                                                      <ITypeName>this.getRhsSym(3),
                                                      //#line 308 GJavaParser.g
                                                      new AstToken(this.getRhsIToken(4)),
                                                      //#line 308 GJavaParser.g
                                                      <identifier>this.getRhsSym(5),
                                                      //#line 308 GJavaParser.g
                                                      new AstToken(this.getRhsIToken(6)))
                //#line 308 GJavaParser.g
                );
            break;
            }
            //
            // Rule 70:  StaticImportOnDemandDeclaration ::= import static TypeName . * ;
            //
            case 70: {
                //#line 310 "GJavaParser.g"
                this.setResult(
                    //#line 310 GJavaParser.g
                    new StaticImportOnDemandDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                                        //#line 310 GJavaParser.g
                                                        new AstToken(this.getRhsIToken(1)),
                                                        //#line 310 GJavaParser.g
                                                        new AstToken(this.getRhsIToken(2)),
                                                        //#line 310 GJavaParser.g
                                                        <ITypeName>this.getRhsSym(3),
                                                        //#line 310 GJavaParser.g
                                                        new AstToken(this.getRhsIToken(4)),
                                                        //#line 310 GJavaParser.g
                                                        new AstToken(this.getRhsIToken(5)),
                                                        //#line 310 GJavaParser.g
                                                        new AstToken(this.getRhsIToken(6)))
                //#line 310 GJavaParser.g
                );
            break;
            }
            //
            // Rule 71:  TypeDeclaration ::= ClassDeclaration
            //
            case 71:
                break;
            //
            // Rule 72:  TypeDeclaration ::= InterfaceDeclaration
            //
            case 72:
                break;
            //
            // Rule 73:  TypeDeclaration ::= ;
            //
            case 73: {
                //#line 314 "GJavaParser.g"
                this.setResult(
                    //#line 314 GJavaParser.g
                    new TypeDeclaration(this.getRhsIToken(1))
                //#line 314 GJavaParser.g
                );
            break;
            }
            //
            // Rule 74:  ClassDeclaration ::= NormalClassDeclaration
            //
            case 74:
                break;
            //
            // Rule 75:  ClassDeclaration ::= EnumDeclaration
            //
            case 75:
                break;
            //
            // Rule 76:  NormalClassDeclaration ::= ClassModifiersopt class identifier TypeParametersopt Superopt Interfacesopt ClassBody
            //
            case 76: {
                //#line 321 "GJavaParser.g"
                this.setResult(
                    //#line 321 GJavaParser.g
                    new NormalClassDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                               //#line 321 GJavaParser.g
                                               <IClassModifiersopt>this.getRhsSym(1),
                                               //#line 321 GJavaParser.g
                                               new AstToken(this.getRhsIToken(2)),
                                               //#line 321 GJavaParser.g
                                               <identifier>this.getRhsSym(3),
                                               //#line 321 GJavaParser.g
                                               <TypeParameters>this.getRhsSym(4),
                                               //#line 321 GJavaParser.g
                                               <Super>this.getRhsSym(5),
                                               //#line 321 GJavaParser.g
                                               <Interfaces>this.getRhsSym(6),
                                               //#line 321 GJavaParser.g
                                               <ClassBody>this.getRhsSym(7))
                //#line 321 GJavaParser.g
                );
            break;
            }
            //
            // Rule 77:  ClassModifiers ::= ClassModifier
            //
            case 77:
                break;
            //
            // Rule 78:  ClassModifiers ::= ClassModifiers ClassModifier
            //
            case 78: {
                //#line 324 "GJavaParser.g"
                this.setResult(
                    //#line 324 GJavaParser.g
                    new ClassModifiers(this.getLeftIToken(), this.getRightIToken(),
                                       //#line 324 GJavaParser.g
                                       <IClassModifiers>this.getRhsSym(1),
                                       //#line 324 GJavaParser.g
                                       <IClassModifier>this.getRhsSym(2))
                //#line 324 GJavaParser.g
                );
            break;
            }
            //
            // Rule 79:  ClassModifier ::= Annotation
            //
            case 79:
                break;
            //
            // Rule 80:  ClassModifier ::= public
            //
            case 80: {
                //#line 327 "GJavaParser.g"
                this.setResult(
                    //#line 327 GJavaParser.g
                    new ClassModifier0(this.getRhsIToken(1))
                //#line 327 GJavaParser.g
                );
            break;
            }
            //
            // Rule 81:  ClassModifier ::= protected
            //
            case 81: {
                //#line 328 "GJavaParser.g"
                this.setResult(
                    //#line 328 GJavaParser.g
                    new ClassModifier1(this.getRhsIToken(1))
                //#line 328 GJavaParser.g
                );
            break;
            }
            //
            // Rule 82:  ClassModifier ::= private
            //
            case 82: {
                //#line 329 "GJavaParser.g"
                this.setResult(
                    //#line 329 GJavaParser.g
                    new ClassModifier2(this.getRhsIToken(1))
                //#line 329 GJavaParser.g
                );
            break;
            }
            //
            // Rule 83:  ClassModifier ::= abstract
            //
            case 83: {
                //#line 330 "GJavaParser.g"
                this.setResult(
                    //#line 330 GJavaParser.g
                    new ClassModifier3(this.getRhsIToken(1))
                //#line 330 GJavaParser.g
                );
            break;
            }
            //
            // Rule 84:  ClassModifier ::= static
            //
            case 84: {
                //#line 331 "GJavaParser.g"
                this.setResult(
                    //#line 331 GJavaParser.g
                    new ClassModifier4(this.getRhsIToken(1))
                //#line 331 GJavaParser.g
                );
            break;
            }
            //
            // Rule 85:  ClassModifier ::= final
            //
            case 85: {
                //#line 332 "GJavaParser.g"
                this.setResult(
                    //#line 332 GJavaParser.g
                    new ClassModifier5(this.getRhsIToken(1))
                //#line 332 GJavaParser.g
                );
            break;
            }
            //
            // Rule 86:  ClassModifier ::= strictfp
            //
            case 86: {
                //#line 333 "GJavaParser.g"
                this.setResult(
                    //#line 333 GJavaParser.g
                    new ClassModifier6(this.getRhsIToken(1))
                //#line 333 GJavaParser.g
                );
            break;
            }
            //
            // Rule 87:  TypeParameters ::= < TypeParameterList >
            //
            case 87: {
                //#line 335 "GJavaParser.g"
                this.setResult(
                    //#line 335 GJavaParser.g
                    new TypeParameters(this.getLeftIToken(), this.getRightIToken(),
                                       //#line 335 GJavaParser.g
                                       new AstToken(this.getRhsIToken(1)),
                                       //#line 335 GJavaParser.g
                                       <ITypeParameterList>this.getRhsSym(2),
                                       //#line 335 GJavaParser.g
                                       new AstToken(this.getRhsIToken(3)))
                //#line 335 GJavaParser.g
                );
            break;
            }
            //
            // Rule 88:  TypeParameterList ::= TypeParameter
            //
            case 88:
                break;
            //
            // Rule 89:  TypeParameterList ::= TypeParameterList , TypeParameter
            //
            case 89: {
                //#line 338 "GJavaParser.g"
                this.setResult(
                    //#line 338 GJavaParser.g
                    new TypeParameterList(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 338 GJavaParser.g
                                          <ITypeParameterList>this.getRhsSym(1),
                                          //#line 338 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 338 GJavaParser.g
                                          <TypeParameter>this.getRhsSym(3))
                //#line 338 GJavaParser.g
                );
            break;
            }
            //
            // Rule 90:  Super ::= extends ClassType
            //
            case 90: {
                //#line 340 "GJavaParser.g"
                this.setResult(
                    //#line 340 GJavaParser.g
                    new Super(this.getLeftIToken(), this.getRightIToken(),
                              //#line 340 GJavaParser.g
                              new AstToken(this.getRhsIToken(1)),
                              //#line 340 GJavaParser.g
                              <ClassType>this.getRhsSym(2))
                //#line 340 GJavaParser.g
                );
            break;
            }
            //
            // Rule 91:  Interfaces ::= implements InterfaceTypeList
            //
            case 91: {
                //#line 347 "GJavaParser.g"
                this.setResult(
                    //#line 347 GJavaParser.g
                    new Interfaces(this.getLeftIToken(), this.getRightIToken(),
                                   //#line 347 GJavaParser.g
                                   new AstToken(this.getRhsIToken(1)),
                                   //#line 347 GJavaParser.g
                                   <IInterfaceTypeList>this.getRhsSym(2))
                //#line 347 GJavaParser.g
                );
            break;
            }
            //
            // Rule 92:  InterfaceTypeList ::= InterfaceType
            //
            case 92:
                break;
            //
            // Rule 93:  InterfaceTypeList ::= InterfaceTypeList , InterfaceType
            //
            case 93: {
                //#line 350 "GJavaParser.g"
                this.setResult(
                    //#line 350 GJavaParser.g
                    new InterfaceTypeList(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 350 GJavaParser.g
                                          <IInterfaceTypeList>this.getRhsSym(1),
                                          //#line 350 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 350 GJavaParser.g
                                          <InterfaceType>this.getRhsSym(3))
                //#line 350 GJavaParser.g
                );
            break;
            }
            //
            // Rule 94:  ClassBody ::= { ClassBodyDeclarationsopt }
            //
            case 94: {
                //#line 357 "GJavaParser.g"
                this.setResult(
                    //#line 357 GJavaParser.g
                    new ClassBody(this.getLeftIToken(), this.getRightIToken(),
                                  //#line 357 GJavaParser.g
                                  new AstToken(this.getRhsIToken(1)),
                                  //#line 357 GJavaParser.g
                                  <IClassBodyDeclarationsopt>this.getRhsSym(2),
                                  //#line 357 GJavaParser.g
                                  new AstToken(this.getRhsIToken(3)))
                //#line 357 GJavaParser.g
                );
            break;
            }
            //
            // Rule 95:  ClassBodyDeclarations ::= ClassBodyDeclaration
            //
            case 95:
                break;
            //
            // Rule 96:  ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration
            //
            case 96: {
                //#line 360 "GJavaParser.g"
                this.setResult(
                    //#line 360 GJavaParser.g
                    new ClassBodyDeclarations(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 360 GJavaParser.g
                                              <IClassBodyDeclarations>this.getRhsSym(1),
                                              //#line 360 GJavaParser.g
                                              <IClassBodyDeclaration>this.getRhsSym(2))
                //#line 360 GJavaParser.g
                );
            break;
            }
            //
            // Rule 97:  ClassBodyDeclaration ::= ClassMemberDeclaration
            //
            case 97:
                break;
            //
            // Rule 98:  ClassBodyDeclaration ::= InstanceInitializer
            //
            case 98:
                break;
            //
            // Rule 99:  ClassBodyDeclaration ::= StaticInitializer
            //
            case 99:
                break;
            //
            // Rule 100:  ClassBodyDeclaration ::= ConstructorDeclaration
            //
            case 100:
                break;
            //
            // Rule 101:  ClassMemberDeclaration ::= FieldDeclaration
            //
            case 101:
                break;
            //
            // Rule 102:  ClassMemberDeclaration ::= MethodDeclaration
            //
            case 102:
                break;
            //
            // Rule 103:  ClassMemberDeclaration ::= ClassDeclaration
            //
            case 103:
                break;
            //
            // Rule 104:  ClassMemberDeclaration ::= InterfaceDeclaration
            //
            case 104:
                break;
            //
            // Rule 105:  ClassMemberDeclaration ::= ;
            //
            case 105: {
                //#line 371 "GJavaParser.g"
                this.setResult(
                    //#line 371 GJavaParser.g
                    new ClassMemberDeclaration(this.getRhsIToken(1))
                //#line 371 GJavaParser.g
                );
            break;
            }
            //
            // Rule 106:  FieldDeclaration ::= FieldModifiersopt Type VariableDeclarators ;
            //
            case 106: {
                //#line 373 "GJavaParser.g"
                this.setResult(
                    //#line 373 GJavaParser.g
                    new FieldDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 373 GJavaParser.g
                                         <IFieldModifiersopt>this.getRhsSym(1),
                                         //#line 373 GJavaParser.g
                                         <IType>this.getRhsSym(2),
                                         //#line 373 GJavaParser.g
                                         <IVariableDeclarators>this.getRhsSym(3),
                                         //#line 373 GJavaParser.g
                                         new AstToken(this.getRhsIToken(4)))
                //#line 373 GJavaParser.g
                );
            break;
            }
            //
            // Rule 107:  VariableDeclarators ::= VariableDeclarator
            //
            case 107:
                break;
            //
            // Rule 108:  VariableDeclarators ::= VariableDeclarators , VariableDeclarator
            //
            case 108: {
                //#line 376 "GJavaParser.g"
                this.setResult(
                    //#line 376 GJavaParser.g
                    new VariableDeclarators(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 376 GJavaParser.g
                                            <IVariableDeclarators>this.getRhsSym(1),
                                            //#line 376 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)),
                                            //#line 376 GJavaParser.g
                                            <IVariableDeclarator>this.getRhsSym(3))
                //#line 376 GJavaParser.g
                );
            break;
            }
            //
            // Rule 109:  VariableDeclarator ::= VariableDeclaratorId
            //
            case 109:
                break;
            //
            // Rule 110:  VariableDeclarator ::= VariableDeclaratorId = VariableInitializer
            //
            case 110: {
                //#line 379 "GJavaParser.g"
                this.setResult(
                    //#line 379 GJavaParser.g
                    new VariableDeclarator(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 379 GJavaParser.g
                                           <IVariableDeclaratorId>this.getRhsSym(1),
                                           //#line 379 GJavaParser.g
                                           new AstToken(this.getRhsIToken(2)),
                                           //#line 379 GJavaParser.g
                                           <IVariableInitializer>this.getRhsSym(3))
                //#line 379 GJavaParser.g
                );
            break;
            }
            //
            // Rule 111:  VariableDeclaratorId ::= identifier
            //
            case 111:
                break;
            //
            // Rule 112:  VariableDeclaratorId ::= VariableDeclaratorId [ ]
            //
            case 112: {
                //#line 382 "GJavaParser.g"
                this.setResult(
                    //#line 382 GJavaParser.g
                    new VariableDeclaratorId(this.getLeftIToken(), this.getRightIToken(),
                                             //#line 382 GJavaParser.g
                                             <IVariableDeclaratorId>this.getRhsSym(1),
                                             //#line 382 GJavaParser.g
                                             new AstToken(this.getRhsIToken(2)),
                                             //#line 382 GJavaParser.g
                                             new AstToken(this.getRhsIToken(3)))
                //#line 382 GJavaParser.g
                );
            break;
            }
            //
            // Rule 113:  VariableInitializer ::= Expression
            //
            case 113:
                break;
            //
            // Rule 114:  VariableInitializer ::= ArrayInitializer
            //
            case 114:
                break;
            //
            // Rule 115:  FieldModifiers ::= FieldModifier
            //
            case 115:
                break;
            //
            // Rule 116:  FieldModifiers ::= FieldModifiers FieldModifier
            //
            case 116: {
                //#line 388 "GJavaParser.g"
                this.setResult(
                    //#line 388 GJavaParser.g
                    new FieldModifiers(this.getLeftIToken(), this.getRightIToken(),
                                       //#line 388 GJavaParser.g
                                       <IFieldModifiers>this.getRhsSym(1),
                                       //#line 388 GJavaParser.g
                                       <IFieldModifier>this.getRhsSym(2))
                //#line 388 GJavaParser.g
                );
            break;
            }
            //
            // Rule 117:  FieldModifier ::= Annotation
            //
            case 117:
                break;
            //
            // Rule 118:  FieldModifier ::= public
            //
            case 118: {
                //#line 391 "GJavaParser.g"
                this.setResult(
                    //#line 391 GJavaParser.g
                    new FieldModifier0(this.getRhsIToken(1))
                //#line 391 GJavaParser.g
                );
            break;
            }
            //
            // Rule 119:  FieldModifier ::= protected
            //
            case 119: {
                //#line 392 "GJavaParser.g"
                this.setResult(
                    //#line 392 GJavaParser.g
                    new FieldModifier1(this.getRhsIToken(1))
                //#line 392 GJavaParser.g
                );
            break;
            }
            //
            // Rule 120:  FieldModifier ::= private
            //
            case 120: {
                //#line 393 "GJavaParser.g"
                this.setResult(
                    //#line 393 GJavaParser.g
                    new FieldModifier2(this.getRhsIToken(1))
                //#line 393 GJavaParser.g
                );
            break;
            }
            //
            // Rule 121:  FieldModifier ::= static
            //
            case 121: {
                //#line 394 "GJavaParser.g"
                this.setResult(
                    //#line 394 GJavaParser.g
                    new FieldModifier3(this.getRhsIToken(1))
                //#line 394 GJavaParser.g
                );
            break;
            }
            //
            // Rule 122:  FieldModifier ::= final
            //
            case 122: {
                //#line 395 "GJavaParser.g"
                this.setResult(
                    //#line 395 GJavaParser.g
                    new FieldModifier4(this.getRhsIToken(1))
                //#line 395 GJavaParser.g
                );
            break;
            }
            //
            // Rule 123:  FieldModifier ::= transient
            //
            case 123: {
                //#line 396 "GJavaParser.g"
                this.setResult(
                    //#line 396 GJavaParser.g
                    new FieldModifier5(this.getRhsIToken(1))
                //#line 396 GJavaParser.g
                );
            break;
            }
            //
            // Rule 124:  FieldModifier ::= volatile
            //
            case 124: {
                //#line 397 "GJavaParser.g"
                this.setResult(
                    //#line 397 GJavaParser.g
                    new FieldModifier6(this.getRhsIToken(1))
                //#line 397 GJavaParser.g
                );
            break;
            }
            //
            // Rule 125:  MethodDeclaration ::= MethodHeader MethodBody
            //
            case 125: {
                //#line 399 "GJavaParser.g"
                this.setResult(
                    //#line 399 GJavaParser.g
                    new MethodDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 399 GJavaParser.g
                                          <MethodHeader>this.getRhsSym(1),
                                          //#line 399 GJavaParser.g
                                          <IMethodBody>this.getRhsSym(2))
                //#line 399 GJavaParser.g
                );
            break;
            }
            //
            // Rule 126:  MethodHeader ::= MethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt
            //
            case 126: {
                //#line 401 "GJavaParser.g"
                this.setResult(
                    //#line 401 GJavaParser.g
                    new MethodHeader(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 401 GJavaParser.g
                                     <IMethodModifiersopt>this.getRhsSym(1),
                                     //#line 401 GJavaParser.g
                                     <TypeParameters>this.getRhsSym(2),
                                     //#line 401 GJavaParser.g
                                     <IResultType>this.getRhsSym(3),
                                     //#line 401 GJavaParser.g
                                     <IMethodDeclarator>this.getRhsSym(4),
                                     //#line 401 GJavaParser.g
                                     <Throws>this.getRhsSym(5))
                //#line 401 GJavaParser.g
                );
            break;
            }
            //
            // Rule 127:  ResultType ::= Type
            //
            case 127:
                break;
            //
            // Rule 128:  ResultType ::= void
            //
            case 128: {
                //#line 404 "GJavaParser.g"
                this.setResult(
                    //#line 404 GJavaParser.g
                    new ResultType(this.getRhsIToken(1))
                //#line 404 GJavaParser.g
                );
            break;
            }
            //
            // Rule 129:  MethodDeclarator ::= identifier ( FormalParameterListopt )
            //
            case 129: {
                //#line 406 "GJavaParser.g"
                this.setResult(
                    //#line 406 GJavaParser.g
                    new MethodDeclarator0(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 406 GJavaParser.g
                                          <identifier>this.getRhsSym(1),
                                          //#line 406 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 406 GJavaParser.g
                                          <IFormalParameterListopt>this.getRhsSym(3),
                                          //#line 406 GJavaParser.g
                                          new AstToken(this.getRhsIToken(4)))
                //#line 406 GJavaParser.g
                );
            break;
            }
            //
            // Rule 130:  MethodDeclarator ::= MethodDeclarator [ ]
            //
            case 130: {
                //#line 408 "GJavaParser.g"
                this.setResult(
                    //#line 408 GJavaParser.g
                    new MethodDeclarator1(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 408 GJavaParser.g
                                          <IMethodDeclarator>this.getRhsSym(1),
                                          //#line 408 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 408 GJavaParser.g
                                          new AstToken(this.getRhsIToken(3)))
                //#line 408 GJavaParser.g
                );
            break;
            }
            //
            // Rule 131:  FormalParameterList ::= LastFormalParameter
            //
            case 131:
                break;
            //
            // Rule 132:  FormalParameterList ::= FormalParameters , LastFormalParameter
            //
            case 132: {
                //#line 411 "GJavaParser.g"
                this.setResult(
                    //#line 411 GJavaParser.g
                    new FormalParameterList(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 411 GJavaParser.g
                                            <IFormalParameters>this.getRhsSym(1),
                                            //#line 411 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)),
                                            //#line 411 GJavaParser.g
                                            <LastFormalParameter>this.getRhsSym(3))
                //#line 411 GJavaParser.g
                );
            break;
            }
            //
            // Rule 133:  FormalParameters ::= FormalParameter
            //
            case 133:
                break;
            //
            // Rule 134:  FormalParameters ::= FormalParameters , FormalParameter
            //
            case 134: {
                //#line 414 "GJavaParser.g"
                this.setResult(
                    //#line 414 GJavaParser.g
                    new FormalParameters(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 414 GJavaParser.g
                                         <IFormalParameters>this.getRhsSym(1),
                                         //#line 414 GJavaParser.g
                                         new AstToken(this.getRhsIToken(2)),
                                         //#line 414 GJavaParser.g
                                         <FormalParameter>this.getRhsSym(3))
                //#line 414 GJavaParser.g
                );
            break;
            }
            //
            // Rule 135:  FormalParameter ::= VariableModifiersopt Type VariableDeclaratorId
            //
            case 135: {
                //#line 416 "GJavaParser.g"
                this.setResult(
                    //#line 416 GJavaParser.g
                    new FormalParameter(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 416 GJavaParser.g
                                        <IVariableModifiersopt>this.getRhsSym(1),
                                        //#line 416 GJavaParser.g
                                        <IType>this.getRhsSym(2),
                                        //#line 416 GJavaParser.g
                                        <IVariableDeclaratorId>this.getRhsSym(3))
                //#line 416 GJavaParser.g
                );
            break;
            }
            //
            // Rule 136:  VariableModifiers ::= VariableModifier
            //
            case 136:
                break;
            //
            // Rule 137:  VariableModifiers ::= VariableModifiers VariableModifier
            //
            case 137: {
                //#line 419 "GJavaParser.g"
                this.setResult(
                    //#line 419 GJavaParser.g
                    new VariableModifiers(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 419 GJavaParser.g
                                          <IVariableModifiers>this.getRhsSym(1),
                                          //#line 419 GJavaParser.g
                                          <IVariableModifier>this.getRhsSym(2))
                //#line 419 GJavaParser.g
                );
            break;
            }
            //
            // Rule 138:  VariableModifier ::= final
            //
            case 138: {
                //#line 421 "GJavaParser.g"
                this.setResult(
                    //#line 421 GJavaParser.g
                    new VariableModifier(this.getRhsIToken(1))
                //#line 421 GJavaParser.g
                );
            break;
            }
            //
            // Rule 139:  VariableModifier ::= Annotations
            //
            case 139:
                break;
            //
            // Rule 140:  LastFormalParameter ::= VariableModifiersopt Type ...opt VariableDeclaratorId
            //
            case 140: {
                //#line 424 "GJavaParser.g"
                this.setResult(
                    //#line 424 GJavaParser.g
                    new LastFormalParameter(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 424 GJavaParser.g
                                            <IVariableModifiersopt>this.getRhsSym(1),
                                            //#line 424 GJavaParser.g
                                            <IType>this.getRhsSym(2),
                                            //#line 424 GJavaParser.g
                                            <Ellipsisopt>this.getRhsSym(3),
                                            //#line 424 GJavaParser.g
                                            <IVariableDeclaratorId>this.getRhsSym(4))
                //#line 424 GJavaParser.g
                );
            break;
            }
            //
            // Rule 141:  MethodModifiers ::= MethodModifier
            //
            case 141:
                break;
            //
            // Rule 142:  MethodModifiers ::= MethodModifiers MethodModifier
            //
            case 142: {
                //#line 433 "GJavaParser.g"
                this.setResult(
                    //#line 433 GJavaParser.g
                    new MethodModifiers(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 433 GJavaParser.g
                                        <IMethodModifiers>this.getRhsSym(1),
                                        //#line 433 GJavaParser.g
                                        <IMethodModifier>this.getRhsSym(2))
                //#line 433 GJavaParser.g
                );
            break;
            }
            //
            // Rule 143:  MethodModifier ::= Annotations
            //
            case 143:
                break;
            //
            // Rule 144:  MethodModifier ::= public
            //
            case 144: {
                //#line 436 "GJavaParser.g"
                this.setResult(
                    //#line 436 GJavaParser.g
                    new MethodModifier0(this.getRhsIToken(1))
                //#line 436 GJavaParser.g
                );
            break;
            }
            //
            // Rule 145:  MethodModifier ::= protected
            //
            case 145: {
                //#line 437 "GJavaParser.g"
                this.setResult(
                    //#line 437 GJavaParser.g
                    new MethodModifier1(this.getRhsIToken(1))
                //#line 437 GJavaParser.g
                );
            break;
            }
            //
            // Rule 146:  MethodModifier ::= private
            //
            case 146: {
                //#line 438 "GJavaParser.g"
                this.setResult(
                    //#line 438 GJavaParser.g
                    new MethodModifier2(this.getRhsIToken(1))
                //#line 438 GJavaParser.g
                );
            break;
            }
            //
            // Rule 147:  MethodModifier ::= abstract
            //
            case 147: {
                //#line 439 "GJavaParser.g"
                this.setResult(
                    //#line 439 GJavaParser.g
                    new MethodModifier3(this.getRhsIToken(1))
                //#line 439 GJavaParser.g
                );
            break;
            }
            //
            // Rule 148:  MethodModifier ::= static
            //
            case 148: {
                //#line 440 "GJavaParser.g"
                this.setResult(
                    //#line 440 GJavaParser.g
                    new MethodModifier4(this.getRhsIToken(1))
                //#line 440 GJavaParser.g
                );
            break;
            }
            //
            // Rule 149:  MethodModifier ::= final
            //
            case 149: {
                //#line 441 "GJavaParser.g"
                this.setResult(
                    //#line 441 GJavaParser.g
                    new MethodModifier5(this.getRhsIToken(1))
                //#line 441 GJavaParser.g
                );
            break;
            }
            //
            // Rule 150:  MethodModifier ::= synchronized
            //
            case 150: {
                //#line 442 "GJavaParser.g"
                this.setResult(
                    //#line 442 GJavaParser.g
                    new MethodModifier6(this.getRhsIToken(1))
                //#line 442 GJavaParser.g
                );
            break;
            }
            //
            // Rule 151:  MethodModifier ::= native
            //
            case 151: {
                //#line 443 "GJavaParser.g"
                this.setResult(
                    //#line 443 GJavaParser.g
                    new MethodModifier7(this.getRhsIToken(1))
                //#line 443 GJavaParser.g
                );
            break;
            }
            //
            // Rule 152:  MethodModifier ::= strictfp
            //
            case 152: {
                //#line 444 "GJavaParser.g"
                this.setResult(
                    //#line 444 GJavaParser.g
                    new MethodModifier8(this.getRhsIToken(1))
                //#line 444 GJavaParser.g
                );
            break;
            }
            //
            // Rule 153:  Throws ::= throws ExceptionTypeList
            //
            case 153: {
                //#line 446 "GJavaParser.g"
                this.setResult(
                    //#line 446 GJavaParser.g
                    new Throws(this.getLeftIToken(), this.getRightIToken(),
                               //#line 446 GJavaParser.g
                               new AstToken(this.getRhsIToken(1)),
                               //#line 446 GJavaParser.g
                               <IExceptionTypeList>this.getRhsSym(2))
                //#line 446 GJavaParser.g
                );
            break;
            }
            //
            // Rule 154:  ExceptionTypeList ::= ExceptionType
            //
            case 154:
                break;
            //
            // Rule 155:  ExceptionTypeList ::= ExceptionTypeList , ExceptionType
            //
            case 155: {
                //#line 449 "GJavaParser.g"
                this.setResult(
                    //#line 449 GJavaParser.g
                    new ExceptionTypeList(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 449 GJavaParser.g
                                          <IExceptionTypeList>this.getRhsSym(1),
                                          //#line 449 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 449 GJavaParser.g
                                          <IExceptionType>this.getRhsSym(3))
                //#line 449 GJavaParser.g
                );
            break;
            }
            //
            // Rule 156:  ExceptionType ::= ClassType
            //
            case 156:
                break;
            //
            // Rule 157:  ExceptionType ::= TypeVariable
            //
            case 157:
                break;
            //
            // Rule 158:  MethodBody ::= Block
            //
            case 158:
                break;
            //
            // Rule 159:  MethodBody ::= ;
            //
            case 159: {
                //#line 455 "GJavaParser.g"
                this.setResult(
                    //#line 455 GJavaParser.g
                    new MethodBody(this.getRhsIToken(1))
                //#line 455 GJavaParser.g
                );
            break;
            }
            //
            // Rule 160:  InstanceInitializer ::= Block
            //
            case 160:
                break;
            //
            // Rule 161:  StaticInitializer ::= static Block
            //
            case 161: {
                //#line 459 "GJavaParser.g"
                this.setResult(
                    //#line 459 GJavaParser.g
                    new StaticInitializer(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 459 GJavaParser.g
                                          new AstToken(this.getRhsIToken(1)),
                                          //#line 459 GJavaParser.g
                                          <Block>this.getRhsSym(2))
                //#line 459 GJavaParser.g
                );
            break;
            }
            //
            // Rule 162:  ConstructorDeclaration ::= ConstructorModifiersopt ConstructorDeclarator Throwsopt ConstructorBody
            //
            case 162: {
                //#line 461 "GJavaParser.g"
                this.setResult(
                    //#line 461 GJavaParser.g
                    new ConstructorDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                               //#line 461 GJavaParser.g
                                               <IConstructorModifiersopt>this.getRhsSym(1),
                                               //#line 461 GJavaParser.g
                                               <ConstructorDeclarator>this.getRhsSym(2),
                                               //#line 461 GJavaParser.g
                                               <Throws>this.getRhsSym(3),
                                               //#line 461 GJavaParser.g
                                               <ConstructorBody>this.getRhsSym(4))
                //#line 461 GJavaParser.g
                );
            break;
            }
            //
            // Rule 163:  ConstructorDeclarator ::= TypeParametersopt SimpleTypeName ( FormalParameterListopt )
            //
            case 163: {
                //#line 463 "GJavaParser.g"
                this.setResult(
                    //#line 463 GJavaParser.g
                    new ConstructorDeclarator(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 463 GJavaParser.g
                                              <TypeParameters>this.getRhsSym(1),
                                              //#line 463 GJavaParser.g
                                              <identifier>this.getRhsSym(2),
                                              //#line 463 GJavaParser.g
                                              new AstToken(this.getRhsIToken(3)),
                                              //#line 463 GJavaParser.g
                                              <IFormalParameterListopt>this.getRhsSym(4),
                                              //#line 463 GJavaParser.g
                                              new AstToken(this.getRhsIToken(5)))
                //#line 463 GJavaParser.g
                );
            break;
            }
            //
            // Rule 164:  SimpleTypeName ::= identifier
            //
            case 164:
                break;
            //
            // Rule 165:  ConstructorModifiers ::= ConstructorModifier
            //
            case 165:
                break;
            //
            // Rule 166:  ConstructorModifiers ::= ConstructorModifiers ConstructorModifier
            //
            case 166: {
                //#line 468 "GJavaParser.g"
                this.setResult(
                    //#line 468 GJavaParser.g
                    new ConstructorModifiers(this.getLeftIToken(), this.getRightIToken(),
                                             //#line 468 GJavaParser.g
                                             <IConstructorModifiers>this.getRhsSym(1),
                                             //#line 468 GJavaParser.g
                                             <IConstructorModifier>this.getRhsSym(2))
                //#line 468 GJavaParser.g
                );
            break;
            }
            //
            // Rule 167:  ConstructorModifier ::= Annotations
            //
            case 167:
                break;
            //
            // Rule 168:  ConstructorModifier ::= public
            //
            case 168: {
                //#line 471 "GJavaParser.g"
                this.setResult(
                    //#line 471 GJavaParser.g
                    new ConstructorModifier0(this.getRhsIToken(1))
                //#line 471 GJavaParser.g
                );
            break;
            }
            //
            // Rule 169:  ConstructorModifier ::= protected
            //
            case 169: {
                //#line 472 "GJavaParser.g"
                this.setResult(
                    //#line 472 GJavaParser.g
                    new ConstructorModifier1(this.getRhsIToken(1))
                //#line 472 GJavaParser.g
                );
            break;
            }
            //
            // Rule 170:  ConstructorModifier ::= private
            //
            case 170: {
                //#line 473 "GJavaParser.g"
                this.setResult(
                    //#line 473 GJavaParser.g
                    new ConstructorModifier2(this.getRhsIToken(1))
                //#line 473 GJavaParser.g
                );
            break;
            }
            //
            // Rule 171:  ConstructorBody ::= { ExplicitConstructorInvocationopt BlockStatementsopt }
            //
            case 171: {
                //#line 475 "GJavaParser.g"
                this.setResult(
                    //#line 475 GJavaParser.g
                    new ConstructorBody(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 475 GJavaParser.g
                                        new AstToken(this.getRhsIToken(1)),
                                        //#line 475 GJavaParser.g
                                        <IExplicitConstructorInvocationopt>this.getRhsSym(2),
                                        //#line 475 GJavaParser.g
                                        <IBlockStatementsopt>this.getRhsSym(3),
                                        //#line 475 GJavaParser.g
                                        new AstToken(this.getRhsIToken(4)))
                //#line 475 GJavaParser.g
                );
            break;
            }
            //
            // Rule 172:  ExplicitConstructorInvocation ::= TypeArgumentsopt this ( ArgumentListopt ) ;
            //
            case 172: {
                //#line 477 "GJavaParser.g"
                this.setResult(
                    //#line 477 GJavaParser.g
                    new ExplicitConstructorInvocation0(this.getLeftIToken(), this.getRightIToken(),
                                                       //#line 477 GJavaParser.g
                                                       <TypeArguments>this.getRhsSym(1),
                                                       //#line 477 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(2)),
                                                       //#line 477 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(3)),
                                                       //#line 477 GJavaParser.g
                                                       <IArgumentListopt>this.getRhsSym(4),
                                                       //#line 477 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(5)),
                                                       //#line 477 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(6)))
                //#line 477 GJavaParser.g
                );
            break;
            }
            //
            // Rule 173:  ExplicitConstructorInvocation ::= TypeArgumentsopt super ( ArgumentListopt ) ;
            //
            case 173: {
                //#line 478 "GJavaParser.g"
                this.setResult(
                    //#line 478 GJavaParser.g
                    new ExplicitConstructorInvocation1(this.getLeftIToken(), this.getRightIToken(),
                                                       //#line 478 GJavaParser.g
                                                       <TypeArguments>this.getRhsSym(1),
                                                       //#line 478 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(2)),
                                                       //#line 478 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(3)),
                                                       //#line 478 GJavaParser.g
                                                       <IArgumentListopt>this.getRhsSym(4),
                                                       //#line 478 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(5)),
                                                       //#line 478 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(6)))
                //#line 478 GJavaParser.g
                );
            break;
            }
            //
            // Rule 174:  ExplicitConstructorInvocation ::= Primary . TypeArgumentsopt super ( ArgumentListopt ) ;
            //
            case 174: {
                //#line 479 "GJavaParser.g"
                this.setResult(
                    //#line 479 GJavaParser.g
                    new ExplicitConstructorInvocation2(this.getLeftIToken(), this.getRightIToken(),
                                                       //#line 479 GJavaParser.g
                                                       <IPrimary>this.getRhsSym(1),
                                                       //#line 479 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(2)),
                                                       //#line 479 GJavaParser.g
                                                       <TypeArguments>this.getRhsSym(3),
                                                       //#line 479 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(4)),
                                                       //#line 479 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(5)),
                                                       //#line 479 GJavaParser.g
                                                       <IArgumentListopt>this.getRhsSym(6),
                                                       //#line 479 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(7)),
                                                       //#line 479 GJavaParser.g
                                                       new AstToken(this.getRhsIToken(8)))
                //#line 479 GJavaParser.g
                );
            break;
            }
            //
            // Rule 175:  EnumDeclaration ::= ClassModifiersopt enum identifier Interfacesopt EnumBody
            //
            case 175: {
                //#line 481 "GJavaParser.g"
                this.setResult(
                    //#line 481 GJavaParser.g
                    new EnumDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 481 GJavaParser.g
                                        <IClassModifiersopt>this.getRhsSym(1),
                                        //#line 481 GJavaParser.g
                                        new AstToken(this.getRhsIToken(2)),
                                        //#line 481 GJavaParser.g
                                        <identifier>this.getRhsSym(3),
                                        //#line 481 GJavaParser.g
                                        <Interfaces>this.getRhsSym(4),
                                        //#line 481 GJavaParser.g
                                        <EnumBody>this.getRhsSym(5))
                //#line 481 GJavaParser.g
                );
            break;
            }
            //
            // Rule 176:  EnumBody ::= { EnumConstantsopt ,opt EnumBodyDeclarationsopt }
            //
            case 176: {
                //#line 483 "GJavaParser.g"
                this.setResult(
                    //#line 483 GJavaParser.g
                    new EnumBody(this.getLeftIToken(), this.getRightIToken(),
                                 //#line 483 GJavaParser.g
                                 new AstToken(this.getRhsIToken(1)),
                                 //#line 483 GJavaParser.g
                                 <IEnumConstantsopt>this.getRhsSym(2),
                                 //#line 483 GJavaParser.g
                                 <Commaopt>this.getRhsSym(3),
                                 //#line 483 GJavaParser.g
                                 <EnumBodyDeclarations>this.getRhsSym(4),
                                 //#line 483 GJavaParser.g
                                 new AstToken(this.getRhsIToken(5)))
                //#line 483 GJavaParser.g
                );
            break;
            }
            //
            // Rule 177:  EnumConstants ::= EnumConstant
            //
            case 177:
                break;
            //
            // Rule 178:  EnumConstants ::= EnumConstants , EnumConstant
            //
            case 178: {
                //#line 486 "GJavaParser.g"
                this.setResult(
                    //#line 486 GJavaParser.g
                    new EnumConstants(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 486 GJavaParser.g
                                      <IEnumConstants>this.getRhsSym(1),
                                      //#line 486 GJavaParser.g
                                      new AstToken(this.getRhsIToken(2)),
                                      //#line 486 GJavaParser.g
                                      <IEnumConstant>this.getRhsSym(3))
                //#line 486 GJavaParser.g
                );
            break;
            }
            //
            // Rule 179:  EnumConstant ::= Annotationsopt identifier Argumentsopt ClassBodyopt
            //
            case 179: {
                //#line 488 "GJavaParser.g"
                this.setResult(
                    //#line 488 GJavaParser.g
                    new EnumConstant(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 488 GJavaParser.g
                                     <IAnnotationsopt>this.getRhsSym(1),
                                     //#line 488 GJavaParser.g
                                     <identifier>this.getRhsSym(2),
                                     //#line 488 GJavaParser.g
                                     <Arguments>this.getRhsSym(3),
                                     //#line 488 GJavaParser.g
                                     <ClassBody>this.getRhsSym(4))
                //#line 488 GJavaParser.g
                );
            break;
            }
            //
            // Rule 180:  Arguments ::= ( ArgumentListopt )
            //
            case 180: {
                //#line 490 "GJavaParser.g"
                this.setResult(
                    //#line 490 GJavaParser.g
                    new Arguments(this.getLeftIToken(), this.getRightIToken(),
                                  //#line 490 GJavaParser.g
                                  new AstToken(this.getRhsIToken(1)),
                                  //#line 490 GJavaParser.g
                                  <IArgumentListopt>this.getRhsSym(2),
                                  //#line 490 GJavaParser.g
                                  new AstToken(this.getRhsIToken(3)))
                //#line 490 GJavaParser.g
                );
            break;
            }
            //
            // Rule 181:  EnumBodyDeclarations ::= ; ClassBodyDeclarationsopt
            //
            case 181: {
                //#line 492 "GJavaParser.g"
                this.setResult(
                    //#line 492 GJavaParser.g
                    new EnumBodyDeclarations(this.getLeftIToken(), this.getRightIToken(),
                                             //#line 492 GJavaParser.g
                                             new AstToken(this.getRhsIToken(1)),
                                             //#line 492 GJavaParser.g
                                             <IClassBodyDeclarationsopt>this.getRhsSym(2))
                //#line 492 GJavaParser.g
                );
            break;
            }
            //
            // Rule 182:  InterfaceDeclaration ::= NormalInterfaceDeclaration
            //
            case 182:
                break;
            //
            // Rule 183:  InterfaceDeclaration ::= AnnotationTypeDeclaration
            //
            case 183:
                break;
            //
            // Rule 184:  NormalInterfaceDeclaration ::= InterfaceModifiersopt interface identifier TypeParametersopt ExtendsInterfacesopt InterfaceBody
            //
            case 184: {
                //#line 499 "GJavaParser.g"
                this.setResult(
                    //#line 499 GJavaParser.g
                    new NormalInterfaceDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                                   //#line 499 GJavaParser.g
                                                   <IInterfaceModifiersopt>this.getRhsSym(1),
                                                   //#line 499 GJavaParser.g
                                                   new AstToken(this.getRhsIToken(2)),
                                                   //#line 499 GJavaParser.g
                                                   <identifier>this.getRhsSym(3),
                                                   //#line 499 GJavaParser.g
                                                   <TypeParameters>this.getRhsSym(4),
                                                   //#line 499 GJavaParser.g
                                                   <IExtendsInterfacesopt>this.getRhsSym(5),
                                                   //#line 499 GJavaParser.g
                                                   <InterfaceBody>this.getRhsSym(6))
                //#line 499 GJavaParser.g
                );
            break;
            }
            //
            // Rule 185:  InterfaceModifiers ::= InterfaceModifier
            //
            case 185:
                break;
            //
            // Rule 186:  InterfaceModifiers ::= InterfaceModifiers InterfaceModifier
            //
            case 186: {
                //#line 502 "GJavaParser.g"
                this.setResult(
                    //#line 502 GJavaParser.g
                    new InterfaceModifiers(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 502 GJavaParser.g
                                           <IInterfaceModifiers>this.getRhsSym(1),
                                           //#line 502 GJavaParser.g
                                           <IInterfaceModifier>this.getRhsSym(2))
                //#line 502 GJavaParser.g
                );
            break;
            }
            //
            // Rule 187:  InterfaceModifier ::= Annotation
            //
            case 187:
                break;
            //
            // Rule 188:  InterfaceModifier ::= public
            //
            case 188: {
                //#line 505 "GJavaParser.g"
                this.setResult(
                    //#line 505 GJavaParser.g
                    new InterfaceModifier0(this.getRhsIToken(1))
                //#line 505 GJavaParser.g
                );
            break;
            }
            //
            // Rule 189:  InterfaceModifier ::= protected
            //
            case 189: {
                //#line 506 "GJavaParser.g"
                this.setResult(
                    //#line 506 GJavaParser.g
                    new InterfaceModifier1(this.getRhsIToken(1))
                //#line 506 GJavaParser.g
                );
            break;
            }
            //
            // Rule 190:  InterfaceModifier ::= private
            //
            case 190: {
                //#line 507 "GJavaParser.g"
                this.setResult(
                    //#line 507 GJavaParser.g
                    new InterfaceModifier2(this.getRhsIToken(1))
                //#line 507 GJavaParser.g
                );
            break;
            }
            //
            // Rule 191:  InterfaceModifier ::= abstract
            //
            case 191: {
                //#line 508 "GJavaParser.g"
                this.setResult(
                    //#line 508 GJavaParser.g
                    new InterfaceModifier3(this.getRhsIToken(1))
                //#line 508 GJavaParser.g
                );
            break;
            }
            //
            // Rule 192:  InterfaceModifier ::= static
            //
            case 192: {
                //#line 509 "GJavaParser.g"
                this.setResult(
                    //#line 509 GJavaParser.g
                    new InterfaceModifier4(this.getRhsIToken(1))
                //#line 509 GJavaParser.g
                );
            break;
            }
            //
            // Rule 193:  InterfaceModifier ::= strictfp
            //
            case 193: {
                //#line 510 "GJavaParser.g"
                this.setResult(
                    //#line 510 GJavaParser.g
                    new InterfaceModifier5(this.getRhsIToken(1))
                //#line 510 GJavaParser.g
                );
            break;
            }
            //
            // Rule 194:  ExtendsInterfaces ::= extends InterfaceType
            //
            case 194: {
                //#line 512 "GJavaParser.g"
                this.setResult(
                    //#line 512 GJavaParser.g
                    new ExtendsInterfaces0(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 512 GJavaParser.g
                                           new AstToken(this.getRhsIToken(1)),
                                           //#line 512 GJavaParser.g
                                           <InterfaceType>this.getRhsSym(2))
                //#line 512 GJavaParser.g
                );
            break;
            }
            //
            // Rule 195:  ExtendsInterfaces ::= ExtendsInterfaces , InterfaceType
            //
            case 195: {
                //#line 513 "GJavaParser.g"
                this.setResult(
                    //#line 513 GJavaParser.g
                    new ExtendsInterfaces1(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 513 GJavaParser.g
                                           <IExtendsInterfaces>this.getRhsSym(1),
                                           //#line 513 GJavaParser.g
                                           new AstToken(this.getRhsIToken(2)),
                                           //#line 513 GJavaParser.g
                                           <InterfaceType>this.getRhsSym(3))
                //#line 513 GJavaParser.g
                );
            break;
            }
            //
            // Rule 196:  InterfaceBody ::= { InterfaceMemberDeclarationsopt }
            //
            case 196: {
                //#line 520 "GJavaParser.g"
                this.setResult(
                    //#line 520 GJavaParser.g
                    new InterfaceBody(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 520 GJavaParser.g
                                      new AstToken(this.getRhsIToken(1)),
                                      //#line 520 GJavaParser.g
                                      <IInterfaceMemberDeclarationsopt>this.getRhsSym(2),
                                      //#line 520 GJavaParser.g
                                      new AstToken(this.getRhsIToken(3)))
                //#line 520 GJavaParser.g
                );
            break;
            }
            //
            // Rule 197:  InterfaceMemberDeclarations ::= InterfaceMemberDeclaration
            //
            case 197:
                break;
            //
            // Rule 198:  InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration
            //
            case 198: {
                //#line 523 "GJavaParser.g"
                this.setResult(
                    //#line 523 GJavaParser.g
                    new InterfaceMemberDeclarations(this.getLeftIToken(), this.getRightIToken(),
                                                    //#line 523 GJavaParser.g
                                                    <IInterfaceMemberDeclarations>this.getRhsSym(1),
                                                    //#line 523 GJavaParser.g
                                                    <IInterfaceMemberDeclaration>this.getRhsSym(2))
                //#line 523 GJavaParser.g
                );
            break;
            }
            //
            // Rule 199:  InterfaceMemberDeclaration ::= ConstantDeclaration
            //
            case 199:
                break;
            //
            // Rule 200:  InterfaceMemberDeclaration ::= AbstractMethodDeclaration
            //
            case 200:
                break;
            //
            // Rule 201:  InterfaceMemberDeclaration ::= ClassDeclaration
            //
            case 201:
                break;
            //
            // Rule 202:  InterfaceMemberDeclaration ::= InterfaceDeclaration
            //
            case 202:
                break;
            //
            // Rule 203:  InterfaceMemberDeclaration ::= ;
            //
            case 203: {
                //#line 529 "GJavaParser.g"
                this.setResult(
                    //#line 529 GJavaParser.g
                    new InterfaceMemberDeclaration(this.getRhsIToken(1))
                //#line 529 GJavaParser.g
                );
            break;
            }
            //
            // Rule 204:  ConstantDeclaration ::= ConstantModifiersopt Type VariableDeclarators
            //
            case 204: {
                //#line 531 "GJavaParser.g"
                this.setResult(
                    //#line 531 GJavaParser.g
                    new ConstantDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 531 GJavaParser.g
                                            <IConstantModifiersopt>this.getRhsSym(1),
                                            //#line 531 GJavaParser.g
                                            <IType>this.getRhsSym(2),
                                            //#line 531 GJavaParser.g
                                            <IVariableDeclarators>this.getRhsSym(3))
                //#line 531 GJavaParser.g
                );
            break;
            }
            //
            // Rule 205:  ConstantModifiers ::= ConstantModifier
            //
            case 205:
                break;
            //
            // Rule 206:  ConstantModifiers ::= ConstantModifiers ConstantModifier
            //
            case 206: {
                //#line 534 "GJavaParser.g"
                this.setResult(
                    //#line 534 GJavaParser.g
                    new ConstantModifiers(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 534 GJavaParser.g
                                          <IConstantModifiers>this.getRhsSym(1),
                                          //#line 534 GJavaParser.g
                                          <IConstantModifier>this.getRhsSym(2))
                //#line 534 GJavaParser.g
                );
            break;
            }
            //
            // Rule 207:  ConstantModifier ::= Annotation
            //
            case 207:
                break;
            //
            // Rule 208:  ConstantModifier ::= public
            //
            case 208: {
                //#line 537 "GJavaParser.g"
                this.setResult(
                    //#line 537 GJavaParser.g
                    new ConstantModifier0(this.getRhsIToken(1))
                //#line 537 GJavaParser.g
                );
            break;
            }
            //
            // Rule 209:  ConstantModifier ::= static
            //
            case 209: {
                //#line 538 "GJavaParser.g"
                this.setResult(
                    //#line 538 GJavaParser.g
                    new ConstantModifier1(this.getRhsIToken(1))
                //#line 538 GJavaParser.g
                );
            break;
            }
            //
            // Rule 210:  ConstantModifier ::= final
            //
            case 210: {
                //#line 539 "GJavaParser.g"
                this.setResult(
                    //#line 539 GJavaParser.g
                    new ConstantModifier2(this.getRhsIToken(1))
                //#line 539 GJavaParser.g
                );
            break;
            }
            //
            // Rule 211:  AbstractMethodDeclaration ::= AbstractMethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt ;
            //
            case 211: {
                //#line 541 "GJavaParser.g"
                this.setResult(
                    //#line 541 GJavaParser.g
                    new AbstractMethodDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                                  //#line 541 GJavaParser.g
                                                  <IAbstractMethodModifiersopt>this.getRhsSym(1),
                                                  //#line 541 GJavaParser.g
                                                  <TypeParameters>this.getRhsSym(2),
                                                  //#line 541 GJavaParser.g
                                                  <IResultType>this.getRhsSym(3),
                                                  //#line 541 GJavaParser.g
                                                  <IMethodDeclarator>this.getRhsSym(4),
                                                  //#line 541 GJavaParser.g
                                                  <Throws>this.getRhsSym(5),
                                                  //#line 541 GJavaParser.g
                                                  new AstToken(this.getRhsIToken(6)))
                //#line 541 GJavaParser.g
                );
            break;
            }
            //
            // Rule 212:  AbstractMethodModifiers ::= AbstractMethodModifier
            //
            case 212:
                break;
            //
            // Rule 213:  AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier
            //
            case 213: {
                //#line 544 "GJavaParser.g"
                this.setResult(
                    //#line 544 GJavaParser.g
                    new AbstractMethodModifiers(this.getLeftIToken(), this.getRightIToken(),
                                                //#line 544 GJavaParser.g
                                                <IAbstractMethodModifiers>this.getRhsSym(1),
                                                //#line 544 GJavaParser.g
                                                <IAbstractMethodModifier>this.getRhsSym(2))
                //#line 544 GJavaParser.g
                );
            break;
            }
            //
            // Rule 214:  AbstractMethodModifier ::= Annotations
            //
            case 214:
                break;
            //
            // Rule 215:  AbstractMethodModifier ::= public
            //
            case 215: {
                //#line 547 "GJavaParser.g"
                this.setResult(
                    //#line 547 GJavaParser.g
                    new AbstractMethodModifier0(this.getRhsIToken(1))
                //#line 547 GJavaParser.g
                );
            break;
            }
            //
            // Rule 216:  AbstractMethodModifier ::= abstract
            //
            case 216: {
                //#line 548 "GJavaParser.g"
                this.setResult(
                    //#line 548 GJavaParser.g
                    new AbstractMethodModifier1(this.getRhsIToken(1))
                //#line 548 GJavaParser.g
                );
            break;
            }
            //
            // Rule 217:  AnnotationTypeDeclaration ::= InterfaceModifiersopt @ interface identifier AnnotationTypeBody
            //
            case 217: {
                //#line 550 "GJavaParser.g"
                this.setResult(
                    //#line 550 GJavaParser.g
                    new AnnotationTypeDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                                  //#line 550 GJavaParser.g
                                                  <IInterfaceModifiersopt>this.getRhsSym(1),
                                                  //#line 550 GJavaParser.g
                                                  new AstToken(this.getRhsIToken(2)),
                                                  //#line 550 GJavaParser.g
                                                  new AstToken(this.getRhsIToken(3)),
                                                  //#line 550 GJavaParser.g
                                                  <identifier>this.getRhsSym(4),
                                                  //#line 550 GJavaParser.g
                                                  <AnnotationTypeBody>this.getRhsSym(5))
                //#line 550 GJavaParser.g
                );
            break;
            }
            //
            // Rule 218:  AnnotationTypeBody ::= { AnnotationTypeElementDeclarationsopt }
            //
            case 218: {
                //#line 552 "GJavaParser.g"
                this.setResult(
                    //#line 552 GJavaParser.g
                    new AnnotationTypeBody(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 552 GJavaParser.g
                                           new AstToken(this.getRhsIToken(1)),
                                           //#line 552 GJavaParser.g
                                           <IAnnotationTypeElementDeclarationsopt>this.getRhsSym(2),
                                           //#line 552 GJavaParser.g
                                           new AstToken(this.getRhsIToken(3)))
                //#line 552 GJavaParser.g
                );
            break;
            }
            //
            // Rule 219:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration
            //
            case 219:
                break;
            //
            // Rule 220:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration
            //
            case 220: {
                //#line 555 "GJavaParser.g"
                this.setResult(
                    //#line 555 GJavaParser.g
                    new AnnotationTypeElementDeclarations(this.getLeftIToken(), this.getRightIToken(),
                                                          //#line 555 GJavaParser.g
                                                          <IAnnotationTypeElementDeclarations>this.getRhsSym(1),
                                                          //#line 555 GJavaParser.g
                                                          <IAnnotationTypeElementDeclaration>this.getRhsSym(2))
                //#line 555 GJavaParser.g
                );
            break;
            }
            //
            // Rule 221:  AnnotationTypeElementDeclaration ::= AbstractMethodModifiersopt Type identifier ( ) DefaultValueopt ;
            //
            case 221: {
                //#line 557 "GJavaParser.g"
                this.setResult(
                    //#line 557 GJavaParser.g
                    new AnnotationTypeElementDeclaration0(this.getLeftIToken(), this.getRightIToken(),
                                                          //#line 557 GJavaParser.g
                                                          <IAbstractMethodModifiersopt>this.getRhsSym(1),
                                                          //#line 557 GJavaParser.g
                                                          <IType>this.getRhsSym(2),
                                                          //#line 557 GJavaParser.g
                                                          <identifier>this.getRhsSym(3),
                                                          //#line 557 GJavaParser.g
                                                          new AstToken(this.getRhsIToken(4)),
                                                          //#line 557 GJavaParser.g
                                                          new AstToken(this.getRhsIToken(5)),
                                                          //#line 557 GJavaParser.g
                                                          <DefaultValue>this.getRhsSym(6),
                                                          //#line 557 GJavaParser.g
                                                          new AstToken(this.getRhsIToken(7)))
                //#line 557 GJavaParser.g
                );
            break;
            }
            //
            // Rule 222:  AnnotationTypeElementDeclaration ::= ConstantDeclaration
            //
            case 222:
                break;
            //
            // Rule 223:  AnnotationTypeElementDeclaration ::= ClassDeclaration
            //
            case 223:
                break;
            //
            // Rule 224:  AnnotationTypeElementDeclaration ::= InterfaceDeclaration
            //
            case 224:
                break;
            //
            // Rule 225:  AnnotationTypeElementDeclaration ::= EnumDeclaration
            //
            case 225:
                break;
            //
            // Rule 226:  AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration
            //
            case 226:
                break;
            //
            // Rule 227:  AnnotationTypeElementDeclaration ::= ;
            //
            case 227: {
                //#line 563 "GJavaParser.g"
                this.setResult(
                    //#line 563 GJavaParser.g
                    new AnnotationTypeElementDeclaration1(this.getRhsIToken(1))
                //#line 563 GJavaParser.g
                );
            break;
            }
            //
            // Rule 228:  DefaultValue ::= default ElementValue
            //
            case 228: {
                //#line 565 "GJavaParser.g"
                this.setResult(
                    //#line 565 GJavaParser.g
                    new DefaultValue(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 565 GJavaParser.g
                                     new AstToken(this.getRhsIToken(1)),
                                     //#line 565 GJavaParser.g
                                     <IElementValue>this.getRhsSym(2))
                //#line 565 GJavaParser.g
                );
            break;
            }
            //
            // Rule 229:  Annotations ::= Annotation
            //
            case 229:
                break;
            //
            // Rule 230:  Annotations ::= Annotations Annotation
            //
            case 230: {
                //#line 568 "GJavaParser.g"
                this.setResult(
                    //#line 568 GJavaParser.g
                    new Annotations(this.getLeftIToken(), this.getRightIToken(),
                                    //#line 568 GJavaParser.g
                                    <IAnnotations>this.getRhsSym(1),
                                    //#line 568 GJavaParser.g
                                    <IAnnotation>this.getRhsSym(2))
                //#line 568 GJavaParser.g
                );
            break;
            }
            //
            // Rule 231:  Annotation ::= NormalAnnotation
            //
            case 231:
                break;
            //
            // Rule 232:  Annotation ::= MarkerAnnotation
            //
            case 232:
                break;
            //
            // Rule 233:  Annotation ::= SingleElementAnnotation
            //
            case 233:
                break;
            //
            // Rule 234:  NormalAnnotation ::= @ TypeName ( ElementValuePairsopt )
            //
            case 234: {
                //#line 574 "GJavaParser.g"
                this.setResult(
                    //#line 574 GJavaParser.g
                    new NormalAnnotation(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 574 GJavaParser.g
                                         new AstToken(this.getRhsIToken(1)),
                                         //#line 574 GJavaParser.g
                                         <ITypeName>this.getRhsSym(2),
                                         //#line 574 GJavaParser.g
                                         new AstToken(this.getRhsIToken(3)),
                                         //#line 574 GJavaParser.g
                                         <IElementValuePairsopt>this.getRhsSym(4),
                                         //#line 574 GJavaParser.g
                                         new AstToken(this.getRhsIToken(5)))
                //#line 574 GJavaParser.g
                );
            break;
            }
            //
            // Rule 235:  ElementValuePairs ::= ElementValuePair
            //
            case 235:
                break;
            //
            // Rule 236:  ElementValuePairs ::= ElementValuePairs , ElementValuePair
            //
            case 236: {
                //#line 577 "GJavaParser.g"
                this.setResult(
                    //#line 577 GJavaParser.g
                    new ElementValuePairs(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 577 GJavaParser.g
                                          <IElementValuePairs>this.getRhsSym(1),
                                          //#line 577 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 577 GJavaParser.g
                                          <ElementValuePair>this.getRhsSym(3))
                //#line 577 GJavaParser.g
                );
            break;
            }
            //
            // Rule 237:  ElementValuePair ::= SimpleName = ElementValue
            //
            case 237: {
                //#line 579 "GJavaParser.g"
                this.setResult(
                    //#line 579 GJavaParser.g
                    new ElementValuePair(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 579 GJavaParser.g
                                         <identifier>this.getRhsSym(1),
                                         //#line 579 GJavaParser.g
                                         new AstToken(this.getRhsIToken(2)),
                                         //#line 579 GJavaParser.g
                                         <IElementValue>this.getRhsSym(3))
                //#line 579 GJavaParser.g
                );
            break;
            }
            //
            // Rule 238:  SimpleName ::= identifier
            //
            case 238:
                break;
            //
            // Rule 239:  ElementValue ::= ConditionalExpression
            //
            case 239:
                break;
            //
            // Rule 240:  ElementValue ::= Annotation
            //
            case 240:
                break;
            //
            // Rule 241:  ElementValue ::= ElementValueArrayInitializer
            //
            case 241:
                break;
            //
            // Rule 242:  ElementValueArrayInitializer ::= { ElementValuesopt ,opt }
            //
            case 242: {
                //#line 587 "GJavaParser.g"
                this.setResult(
                    //#line 587 GJavaParser.g
                    new ElementValueArrayInitializer(this.getLeftIToken(), this.getRightIToken(),
                                                     //#line 587 GJavaParser.g
                                                     new AstToken(this.getRhsIToken(1)),
                                                     //#line 587 GJavaParser.g
                                                     <IElementValuesopt>this.getRhsSym(2),
                                                     //#line 587 GJavaParser.g
                                                     <Commaopt>this.getRhsSym(3),
                                                     //#line 587 GJavaParser.g
                                                     new AstToken(this.getRhsIToken(4)))
                //#line 587 GJavaParser.g
                );
            break;
            }
            //
            // Rule 243:  ElementValues ::= ElementValue
            //
            case 243:
                break;
            //
            // Rule 244:  ElementValues ::= ElementValues , ElementValue
            //
            case 244: {
                //#line 590 "GJavaParser.g"
                this.setResult(
                    //#line 590 GJavaParser.g
                    new ElementValues(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 590 GJavaParser.g
                                      <IElementValues>this.getRhsSym(1),
                                      //#line 590 GJavaParser.g
                                      new AstToken(this.getRhsIToken(2)),
                                      //#line 590 GJavaParser.g
                                      <IElementValue>this.getRhsSym(3))
                //#line 590 GJavaParser.g
                );
            break;
            }
            //
            // Rule 245:  MarkerAnnotation ::= @ TypeName
            //
            case 245: {
                //#line 592 "GJavaParser.g"
                this.setResult(
                    //#line 592 GJavaParser.g
                    new MarkerAnnotation(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 592 GJavaParser.g
                                         new AstToken(this.getRhsIToken(1)),
                                         //#line 592 GJavaParser.g
                                         <ITypeName>this.getRhsSym(2))
                //#line 592 GJavaParser.g
                );
            break;
            }
            //
            // Rule 246:  SingleElementAnnotation ::= @ TypeName ( ElementValue )
            //
            case 246: {
                //#line 594 "GJavaParser.g"
                this.setResult(
                    //#line 594 GJavaParser.g
                    new SingleElementAnnotation(this.getLeftIToken(), this.getRightIToken(),
                                                //#line 594 GJavaParser.g
                                                new AstToken(this.getRhsIToken(1)),
                                                //#line 594 GJavaParser.g
                                                <ITypeName>this.getRhsSym(2),
                                                //#line 594 GJavaParser.g
                                                new AstToken(this.getRhsIToken(3)),
                                                //#line 594 GJavaParser.g
                                                <IElementValue>this.getRhsSym(4),
                                                //#line 594 GJavaParser.g
                                                new AstToken(this.getRhsIToken(5)))
                //#line 594 GJavaParser.g
                );
            break;
            }
            //
            // Rule 247:  ArrayInitializer ::= { VariableInitializersopt ,opt }
            //
            case 247: {
                //#line 598 "GJavaParser.g"
                this.setResult(
                    //#line 598 GJavaParser.g
                    new ArrayInitializer(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 598 GJavaParser.g
                                         new AstToken(this.getRhsIToken(1)),
                                         //#line 598 GJavaParser.g
                                         <IVariableInitializersopt>this.getRhsSym(2),
                                         //#line 598 GJavaParser.g
                                         <Commaopt>this.getRhsSym(3),
                                         //#line 598 GJavaParser.g
                                         new AstToken(this.getRhsIToken(4)))
                //#line 598 GJavaParser.g
                );
            break;
            }
            //
            // Rule 248:  VariableInitializers ::= VariableInitializer
            //
            case 248:
                break;
            //
            // Rule 249:  VariableInitializers ::= VariableInitializers , VariableInitializer
            //
            case 249: {
                //#line 601 "GJavaParser.g"
                this.setResult(
                    //#line 601 GJavaParser.g
                    new VariableInitializers(this.getLeftIToken(), this.getRightIToken(),
                                             //#line 601 GJavaParser.g
                                             <IVariableInitializers>this.getRhsSym(1),
                                             //#line 601 GJavaParser.g
                                             new AstToken(this.getRhsIToken(2)),
                                             //#line 601 GJavaParser.g
                                             <IVariableInitializer>this.getRhsSym(3))
                //#line 601 GJavaParser.g
                );
            break;
            }
            //
            // Rule 250:  Block ::= { BlockStatementsopt }
            //
            case 250: {
                //#line 617 "GJavaParser.g"
                this.setResult(
                    //#line 617 GJavaParser.g
                    new Block(this.getLeftIToken(), this.getRightIToken(),
                              //#line 617 GJavaParser.g
                              new AstToken(this.getRhsIToken(1)),
                              //#line 617 GJavaParser.g
                              <IBlockStatementsopt>this.getRhsSym(2),
                              //#line 617 GJavaParser.g
                              new AstToken(this.getRhsIToken(3)))
                //#line 617 GJavaParser.g
                );
            break;
            }
            //
            // Rule 251:  BlockStatements ::= BlockStatement
            //
            case 251:
                break;
            //
            // Rule 252:  BlockStatements ::= BlockStatements BlockStatement
            //
            case 252: {
                //#line 620 "GJavaParser.g"
                this.setResult(
                    //#line 620 GJavaParser.g
                    new BlockStatements(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 620 GJavaParser.g
                                        <IBlockStatements>this.getRhsSym(1),
                                        //#line 620 GJavaParser.g
                                        <IBlockStatement>this.getRhsSym(2))
                //#line 620 GJavaParser.g
                );
            break;
            }
            //
            // Rule 253:  BlockStatement ::= LocalVariableDeclarationStatement
            //
            case 253:
                break;
            //
            // Rule 254:  BlockStatement ::= ClassDeclaration
            //
            case 254:
                break;
            //
            // Rule 255:  BlockStatement ::= Statement
            //
            case 255:
                break;
            //
            // Rule 256:  LocalVariableDeclarationStatement ::= LocalVariableDeclaration ;
            //
            case 256: {
                //#line 626 "GJavaParser.g"
                this.setResult(
                    //#line 626 GJavaParser.g
                    new LocalVariableDeclarationStatement(this.getLeftIToken(), this.getRightIToken(),
                                                          //#line 626 GJavaParser.g
                                                          <LocalVariableDeclaration>this.getRhsSym(1),
                                                          //#line 626 GJavaParser.g
                                                          new AstToken(this.getRhsIToken(2)))
                //#line 626 GJavaParser.g
                );
            break;
            }
            //
            // Rule 257:  LocalVariableDeclaration ::= VariableModifiersopt Type VariableDeclarators
            //
            case 257: {
                //#line 628 "GJavaParser.g"
                this.setResult(
                    //#line 628 GJavaParser.g
                    new LocalVariableDeclaration(this.getLeftIToken(), this.getRightIToken(),
                                                 //#line 628 GJavaParser.g
                                                 <IVariableModifiersopt>this.getRhsSym(1),
                                                 //#line 628 GJavaParser.g
                                                 <IType>this.getRhsSym(2),
                                                 //#line 628 GJavaParser.g
                                                 <IVariableDeclarators>this.getRhsSym(3))
                //#line 628 GJavaParser.g
                );
            break;
            }
            //
            // Rule 258:  Statement ::= StatementWithoutTrailingSubstatement
            //
            case 258:
                break;
            //
            // Rule 259:  Statement ::= LabeledStatement
            //
            case 259:
                break;
            //
            // Rule 260:  Statement ::= IfThenStatement
            //
            case 260:
                break;
            //
            // Rule 261:  Statement ::= IfThenElseStatement
            //
            case 261:
                break;
            //
            // Rule 262:  Statement ::= WhileStatement
            //
            case 262:
                break;
            //
            // Rule 263:  Statement ::= ForStatement
            //
            case 263:
                break;
            //
            // Rule 264:  StatementWithoutTrailingSubstatement ::= Block
            //
            case 264:
                break;
            //
            // Rule 265:  StatementWithoutTrailingSubstatement ::= EmptyStatement
            //
            case 265:
                break;
            //
            // Rule 266:  StatementWithoutTrailingSubstatement ::= ExpressionStatement
            //
            case 266:
                break;
            //
            // Rule 267:  StatementWithoutTrailingSubstatement ::= AssertStatement
            //
            case 267:
                break;
            //
            // Rule 268:  StatementWithoutTrailingSubstatement ::= SwitchStatement
            //
            case 268:
                break;
            //
            // Rule 269:  StatementWithoutTrailingSubstatement ::= DoStatement
            //
            case 269:
                break;
            //
            // Rule 270:  StatementWithoutTrailingSubstatement ::= BreakStatement
            //
            case 270:
                break;
            //
            // Rule 271:  StatementWithoutTrailingSubstatement ::= ContinueStatement
            //
            case 271:
                break;
            //
            // Rule 272:  StatementWithoutTrailingSubstatement ::= ReturnStatement
            //
            case 272:
                break;
            //
            // Rule 273:  StatementWithoutTrailingSubstatement ::= SynchronizedStatement
            //
            case 273:
                break;
            //
            // Rule 274:  StatementWithoutTrailingSubstatement ::= ThrowStatement
            //
            case 274:
                break;
            //
            // Rule 275:  StatementWithoutTrailingSubstatement ::= TryStatement
            //
            case 275:
                break;
            //
            // Rule 276:  StatementNoShortIf ::= StatementWithoutTrailingSubstatement
            //
            case 276:
                break;
            //
            // Rule 277:  StatementNoShortIf ::= LabeledStatementNoShortIf
            //
            case 277:
                break;
            //
            // Rule 278:  StatementNoShortIf ::= IfThenElseStatementNoShortIf
            //
            case 278:
                break;
            //
            // Rule 279:  StatementNoShortIf ::= WhileStatementNoShortIf
            //
            case 279:
                break;
            //
            // Rule 280:  StatementNoShortIf ::= ForStatementNoShortIf
            //
            case 280:
                break;
            //
            // Rule 281:  IfThenStatement ::= if ( Expression ) Statement
            //
            case 281: {
                //#line 671 "GJavaParser.g"
                this.setResult(
                    //#line 671 GJavaParser.g
                    new IfThenStatement(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 671 GJavaParser.g
                                        new AstToken(this.getRhsIToken(1)),
                                        //#line 671 GJavaParser.g
                                        new AstToken(this.getRhsIToken(2)),
                                        //#line 671 GJavaParser.g
                                        <IExpression>this.getRhsSym(3),
                                        //#line 671 GJavaParser.g
                                        new AstToken(this.getRhsIToken(4)),
                                        //#line 671 GJavaParser.g
                                        <IStatement>this.getRhsSym(5))
                //#line 671 GJavaParser.g
                );
            break;
            }
            //
            // Rule 282:  IfThenElseStatement ::= if ( Expression ) StatementNoShortIf else Statement
            //
            case 282: {
                //#line 673 "GJavaParser.g"
                this.setResult(
                    //#line 673 GJavaParser.g
                    new IfThenElseStatement(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 673 GJavaParser.g
                                            new AstToken(this.getRhsIToken(1)),
                                            //#line 673 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)),
                                            //#line 673 GJavaParser.g
                                            <IExpression>this.getRhsSym(3),
                                            //#line 673 GJavaParser.g
                                            new AstToken(this.getRhsIToken(4)),
                                            //#line 673 GJavaParser.g
                                            <IStatementNoShortIf>this.getRhsSym(5),
                                            //#line 673 GJavaParser.g
                                            new AstToken(this.getRhsIToken(6)),
                                            //#line 673 GJavaParser.g
                                            <IStatement>this.getRhsSym(7))
                //#line 673 GJavaParser.g
                );
            break;
            }
            //
            // Rule 283:  IfThenElseStatementNoShortIf ::= if ( Expression ) StatementNoShortIf else StatementNoShortIf
            //
            case 283: {
                //#line 675 "GJavaParser.g"
                this.setResult(
                    //#line 675 GJavaParser.g
                    new IfThenElseStatementNoShortIf(this.getLeftIToken(), this.getRightIToken(),
                                                     //#line 675 GJavaParser.g
                                                     new AstToken(this.getRhsIToken(1)),
                                                     //#line 675 GJavaParser.g
                                                     new AstToken(this.getRhsIToken(2)),
                                                     //#line 675 GJavaParser.g
                                                     <IExpression>this.getRhsSym(3),
                                                     //#line 675 GJavaParser.g
                                                     new AstToken(this.getRhsIToken(4)),
                                                     //#line 675 GJavaParser.g
                                                     <IStatementNoShortIf>this.getRhsSym(5),
                                                     //#line 675 GJavaParser.g
                                                     new AstToken(this.getRhsIToken(6)),
                                                     //#line 675 GJavaParser.g
                                                     <IStatementNoShortIf>this.getRhsSym(7))
                //#line 675 GJavaParser.g
                );
            break;
            }
            //
            // Rule 284:  EmptyStatement ::= ;
            //
            case 284: {
                //#line 677 "GJavaParser.g"
                this.setResult(
                    //#line 677 GJavaParser.g
                    new EmptyStatement(this.getRhsIToken(1))
                //#line 677 GJavaParser.g
                );
            break;
            }
            //
            // Rule 285:  LabeledStatement ::= identifier : Statement
            //
            case 285: {
                //#line 679 "GJavaParser.g"
                this.setResult(
                    //#line 679 GJavaParser.g
                    new LabeledStatement(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 679 GJavaParser.g
                                         <identifier>this.getRhsSym(1),
                                         //#line 679 GJavaParser.g
                                         new AstToken(this.getRhsIToken(2)),
                                         //#line 679 GJavaParser.g
                                         <IStatement>this.getRhsSym(3))
                //#line 679 GJavaParser.g
                );
            break;
            }
            //
            // Rule 286:  LabeledStatementNoShortIf ::= identifier : StatementNoShortIf
            //
            case 286: {
                //#line 681 "GJavaParser.g"
                this.setResult(
                    //#line 681 GJavaParser.g
                    new LabeledStatementNoShortIf(this.getLeftIToken(), this.getRightIToken(),
                                                  //#line 681 GJavaParser.g
                                                  <identifier>this.getRhsSym(1),
                                                  //#line 681 GJavaParser.g
                                                  new AstToken(this.getRhsIToken(2)),
                                                  //#line 681 GJavaParser.g
                                                  <IStatementNoShortIf>this.getRhsSym(3))
                //#line 681 GJavaParser.g
                );
            break;
            }
            //
            // Rule 287:  ExpressionStatement ::= StatementExpression ;
            //
            case 287: {
                //#line 683 "GJavaParser.g"
                this.setResult(
                    //#line 683 GJavaParser.g
                    new ExpressionStatement(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 683 GJavaParser.g
                                            <IStatementExpression>this.getRhsSym(1),
                                            //#line 683 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)))
                //#line 683 GJavaParser.g
                );
            break;
            }
            //
            // Rule 288:  StatementExpression ::= Assignment
            //
            case 288:
                break;
            //
            // Rule 289:  StatementExpression ::= PreIncrementExpression
            //
            case 289:
                break;
            //
            // Rule 290:  StatementExpression ::= PreDecrementExpression
            //
            case 290:
                break;
            //
            // Rule 291:  StatementExpression ::= PostIncrementExpression
            //
            case 291:
                break;
            //
            // Rule 292:  StatementExpression ::= PostDecrementExpression
            //
            case 292:
                break;
            //
            // Rule 293:  StatementExpression ::= MethodInvocation
            //
            case 293:
                break;
            //
            // Rule 294:  StatementExpression ::= ClassInstanceCreationExpression
            //
            case 294:
                break;
            //
            // Rule 295:  AssertStatement ::= assert Expression ;
            //
            case 295: {
                //#line 702 "GJavaParser.g"
                this.setResult(
                    //#line 702 GJavaParser.g
                    new AssertStatement0(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 702 GJavaParser.g
                                         new AstToken(this.getRhsIToken(1)),
                                         //#line 702 GJavaParser.g
                                         <IExpression>this.getRhsSym(2),
                                         //#line 702 GJavaParser.g
                                         new AstToken(this.getRhsIToken(3)))
                //#line 702 GJavaParser.g
                );
            break;
            }
            //
            // Rule 296:  AssertStatement ::= assert Expression : Expression ;
            //
            case 296: {
                //#line 703 "GJavaParser.g"
                this.setResult(
                    //#line 703 GJavaParser.g
                    new AssertStatement1(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 703 GJavaParser.g
                                         new AstToken(this.getRhsIToken(1)),
                                         //#line 703 GJavaParser.g
                                         <IExpression>this.getRhsSym(2),
                                         //#line 703 GJavaParser.g
                                         new AstToken(this.getRhsIToken(3)),
                                         //#line 703 GJavaParser.g
                                         <IExpression>this.getRhsSym(4),
                                         //#line 703 GJavaParser.g
                                         new AstToken(this.getRhsIToken(5)))
                //#line 703 GJavaParser.g
                );
            break;
            }
            //
            // Rule 297:  SwitchStatement ::= switch ( Expression ) SwitchBlock
            //
            case 297: {
                //#line 705 "GJavaParser.g"
                this.setResult(
                    //#line 705 GJavaParser.g
                    new SwitchStatement(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 705 GJavaParser.g
                                        new AstToken(this.getRhsIToken(1)),
                                        //#line 705 GJavaParser.g
                                        new AstToken(this.getRhsIToken(2)),
                                        //#line 705 GJavaParser.g
                                        <IExpression>this.getRhsSym(3),
                                        //#line 705 GJavaParser.g
                                        new AstToken(this.getRhsIToken(4)),
                                        //#line 705 GJavaParser.g
                                        <SwitchBlock>this.getRhsSym(5))
                //#line 705 GJavaParser.g
                );
            break;
            }
            //
            // Rule 298:  SwitchBlock ::= { SwitchBlockStatementGroupsopt SwitchLabelsopt }
            //
            case 298: {
                //#line 707 "GJavaParser.g"
                this.setResult(
                    //#line 707 GJavaParser.g
                    new SwitchBlock(this.getLeftIToken(), this.getRightIToken(),
                                    //#line 707 GJavaParser.g
                                    new AstToken(this.getRhsIToken(1)),
                                    //#line 707 GJavaParser.g
                                    <ISwitchBlockStatementGroupsopt>this.getRhsSym(2),
                                    //#line 707 GJavaParser.g
                                    <ISwitchLabelsopt>this.getRhsSym(3),
                                    //#line 707 GJavaParser.g
                                    new AstToken(this.getRhsIToken(4)))
                //#line 707 GJavaParser.g
                );
            break;
            }
            //
            // Rule 299:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroup
            //
            case 299:
                break;
            //
            // Rule 300:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup
            //
            case 300: {
                //#line 710 "GJavaParser.g"
                this.setResult(
                    //#line 710 GJavaParser.g
                    new SwitchBlockStatementGroups(this.getLeftIToken(), this.getRightIToken(),
                                                   //#line 710 GJavaParser.g
                                                   <ISwitchBlockStatementGroups>this.getRhsSym(1),
                                                   //#line 710 GJavaParser.g
                                                   <SwitchBlockStatementGroup>this.getRhsSym(2))
                //#line 710 GJavaParser.g
                );
            break;
            }
            //
            // Rule 301:  SwitchBlockStatementGroup ::= SwitchLabels BlockStatements
            //
            case 301: {
                //#line 712 "GJavaParser.g"
                this.setResult(
                    //#line 712 GJavaParser.g
                    new SwitchBlockStatementGroup(this.getLeftIToken(), this.getRightIToken(),
                                                  //#line 712 GJavaParser.g
                                                  <ISwitchLabels>this.getRhsSym(1),
                                                  //#line 712 GJavaParser.g
                                                  <IBlockStatements>this.getRhsSym(2))
                //#line 712 GJavaParser.g
                );
            break;
            }
            //
            // Rule 302:  SwitchLabels ::= SwitchLabel
            //
            case 302:
                break;
            //
            // Rule 303:  SwitchLabels ::= SwitchLabels SwitchLabel
            //
            case 303: {
                //#line 715 "GJavaParser.g"
                this.setResult(
                    //#line 715 GJavaParser.g
                    new SwitchLabels(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 715 GJavaParser.g
                                     <ISwitchLabels>this.getRhsSym(1),
                                     //#line 715 GJavaParser.g
                                     <ISwitchLabel>this.getRhsSym(2))
                //#line 715 GJavaParser.g
                );
            break;
            }
            //
            // Rule 304:  SwitchLabel ::= case ConstantExpression :
            //
            case 304: {
                //#line 717 "GJavaParser.g"
                this.setResult(
                    //#line 717 GJavaParser.g
                    new SwitchLabel0(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 717 GJavaParser.g
                                     new AstToken(this.getRhsIToken(1)),
                                     //#line 717 GJavaParser.g
                                     <IConstantExpression>this.getRhsSym(2),
                                     //#line 717 GJavaParser.g
                                     new AstToken(this.getRhsIToken(3)))
                //#line 717 GJavaParser.g
                );
            break;
            }
            //
            // Rule 305:  SwitchLabel ::= case EnumConstant :
            //
            case 305: {
                //#line 718 "GJavaParser.g"
                this.setResult(
                    //#line 718 GJavaParser.g
                    new SwitchLabel1(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 718 GJavaParser.g
                                     new AstToken(this.getRhsIToken(1)),
                                     //#line 718 GJavaParser.g
                                     <IEnumConstant>this.getRhsSym(2),
                                     //#line 718 GJavaParser.g
                                     new AstToken(this.getRhsIToken(3)))
                //#line 718 GJavaParser.g
                );
            break;
            }
            //
            // Rule 306:  SwitchLabel ::= default :
            //
            case 306: {
                //#line 719 "GJavaParser.g"
                this.setResult(
                    //#line 719 GJavaParser.g
                    new SwitchLabel2(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 719 GJavaParser.g
                                     new AstToken(this.getRhsIToken(1)),
                                     //#line 719 GJavaParser.g
                                     new AstToken(this.getRhsIToken(2)))
                //#line 719 GJavaParser.g
                );
            break;
            }
            //
            // Rule 307:  EnumConstant ::= identifier
            //
            case 307:
                break;
            //
            // Rule 308:  WhileStatement ::= while ( Expression ) Statement
            //
            case 308: {
                //#line 723 "GJavaParser.g"
                this.setResult(
                    //#line 723 GJavaParser.g
                    new WhileStatement(this.getLeftIToken(), this.getRightIToken(),
                                       //#line 723 GJavaParser.g
                                       new AstToken(this.getRhsIToken(1)),
                                       //#line 723 GJavaParser.g
                                       new AstToken(this.getRhsIToken(2)),
                                       //#line 723 GJavaParser.g
                                       <IExpression>this.getRhsSym(3),
                                       //#line 723 GJavaParser.g
                                       new AstToken(this.getRhsIToken(4)),
                                       //#line 723 GJavaParser.g
                                       <IStatement>this.getRhsSym(5))
                //#line 723 GJavaParser.g
                );
            break;
            }
            //
            // Rule 309:  WhileStatementNoShortIf ::= while ( Expression ) StatementNoShortIf
            //
            case 309: {
                //#line 725 "GJavaParser.g"
                this.setResult(
                    //#line 725 GJavaParser.g
                    new WhileStatementNoShortIf(this.getLeftIToken(), this.getRightIToken(),
                                                //#line 725 GJavaParser.g
                                                new AstToken(this.getRhsIToken(1)),
                                                //#line 725 GJavaParser.g
                                                new AstToken(this.getRhsIToken(2)),
                                                //#line 725 GJavaParser.g
                                                <IExpression>this.getRhsSym(3),
                                                //#line 725 GJavaParser.g
                                                new AstToken(this.getRhsIToken(4)),
                                                //#line 725 GJavaParser.g
                                                <IStatementNoShortIf>this.getRhsSym(5))
                //#line 725 GJavaParser.g
                );
            break;
            }
            //
            // Rule 310:  DoStatement ::= do Statement while ( Expression ) ;
            //
            case 310: {
                //#line 727 "GJavaParser.g"
                this.setResult(
                    //#line 727 GJavaParser.g
                    new DoStatement(this.getLeftIToken(), this.getRightIToken(),
                                    //#line 727 GJavaParser.g
                                    new AstToken(this.getRhsIToken(1)),
                                    //#line 727 GJavaParser.g
                                    <IStatement>this.getRhsSym(2),
                                    //#line 727 GJavaParser.g
                                    new AstToken(this.getRhsIToken(3)),
                                    //#line 727 GJavaParser.g
                                    new AstToken(this.getRhsIToken(4)),
                                    //#line 727 GJavaParser.g
                                    <IExpression>this.getRhsSym(5),
                                    //#line 727 GJavaParser.g
                                    new AstToken(this.getRhsIToken(6)),
                                    //#line 727 GJavaParser.g
                                    new AstToken(this.getRhsIToken(7)))
                //#line 727 GJavaParser.g
                );
            break;
            }
            //
            // Rule 311:  ForStatement ::= BasicForStatement
            //
            case 311:
                break;
            //
            // Rule 312:  ForStatement ::= EnhancedForStatement
            //
            case 312:
                break;
            //
            // Rule 313:  BasicForStatement ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) Statement
            //
            case 313: {
                //#line 732 "GJavaParser.g"
                this.setResult(
                    //#line 732 GJavaParser.g
                    new BasicForStatement(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 732 GJavaParser.g
                                          new AstToken(this.getRhsIToken(1)),
                                          //#line 732 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 732 GJavaParser.g
                                          <IForInitopt>this.getRhsSym(3),
                                          //#line 732 GJavaParser.g
                                          new AstToken(this.getRhsIToken(4)),
                                          //#line 732 GJavaParser.g
                                          <IExpressionopt>this.getRhsSym(5),
                                          //#line 732 GJavaParser.g
                                          new AstToken(this.getRhsIToken(6)),
                                          //#line 732 GJavaParser.g
                                          <IForUpdateopt>this.getRhsSym(7),
                                          //#line 732 GJavaParser.g
                                          new AstToken(this.getRhsIToken(8)),
                                          //#line 732 GJavaParser.g
                                          <IStatement>this.getRhsSym(9))
                //#line 732 GJavaParser.g
                );
            break;
            }
            //
            // Rule 314:  ForStatementNoShortIf ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) StatementNoShortIf
            //
            case 314: {
                //#line 734 "GJavaParser.g"
                this.setResult(
                    //#line 734 GJavaParser.g
                    new ForStatementNoShortIf(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 734 GJavaParser.g
                                              new AstToken(this.getRhsIToken(1)),
                                              //#line 734 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 734 GJavaParser.g
                                              <IForInitopt>this.getRhsSym(3),
                                              //#line 734 GJavaParser.g
                                              new AstToken(this.getRhsIToken(4)),
                                              //#line 734 GJavaParser.g
                                              <IExpressionopt>this.getRhsSym(5),
                                              //#line 734 GJavaParser.g
                                              new AstToken(this.getRhsIToken(6)),
                                              //#line 734 GJavaParser.g
                                              <IForUpdateopt>this.getRhsSym(7),
                                              //#line 734 GJavaParser.g
                                              new AstToken(this.getRhsIToken(8)),
                                              //#line 734 GJavaParser.g
                                              <IStatementNoShortIf>this.getRhsSym(9))
                //#line 734 GJavaParser.g
                );
            break;
            }
            //
            // Rule 315:  ForInit ::= StatementExpressionList
            //
            case 315:
                break;
            //
            // Rule 316:  ForInit ::= LocalVariableDeclaration
            //
            case 316:
                break;
            //
            // Rule 317:  ForUpdate ::= StatementExpressionList
            //
            case 317:
                break;
            //
            // Rule 318:  StatementExpressionList ::= StatementExpression
            //
            case 318:
                break;
            //
            // Rule 319:  StatementExpressionList ::= StatementExpressionList , StatementExpression
            //
            case 319: {
                //#line 742 "GJavaParser.g"
                this.setResult(
                    //#line 742 GJavaParser.g
                    new StatementExpressionList(this.getLeftIToken(), this.getRightIToken(),
                                                //#line 742 GJavaParser.g
                                                <IStatementExpressionList>this.getRhsSym(1),
                                                //#line 742 GJavaParser.g
                                                new AstToken(this.getRhsIToken(2)),
                                                //#line 742 GJavaParser.g
                                                <IStatementExpression>this.getRhsSym(3))
                //#line 742 GJavaParser.g
                );
            break;
            }
            //
            // Rule 320:  EnhancedForStatement ::= for ( FormalParameter : Expression ) Statement
            //
            case 320: {
                //#line 744 "GJavaParser.g"
                this.setResult(
                    //#line 744 GJavaParser.g
                    new EnhancedForStatement(this.getLeftIToken(), this.getRightIToken(),
                                             //#line 744 GJavaParser.g
                                             new AstToken(this.getRhsIToken(1)),
                                             //#line 744 GJavaParser.g
                                             new AstToken(this.getRhsIToken(2)),
                                             //#line 744 GJavaParser.g
                                             <FormalParameter>this.getRhsSym(3),
                                             //#line 744 GJavaParser.g
                                             new AstToken(this.getRhsIToken(4)),
                                             //#line 744 GJavaParser.g
                                             <IExpression>this.getRhsSym(5),
                                             //#line 744 GJavaParser.g
                                             new AstToken(this.getRhsIToken(6)),
                                             //#line 744 GJavaParser.g
                                             <IStatement>this.getRhsSym(7))
                //#line 744 GJavaParser.g
                );
            break;
            }
            //
            // Rule 321:  BreakStatement ::= break identifieropt ;
            //
            case 321: {
                //#line 746 "GJavaParser.g"
                this.setResult(
                    //#line 746 GJavaParser.g
                    new BreakStatement(this.getLeftIToken(), this.getRightIToken(),
                                       //#line 746 GJavaParser.g
                                       new AstToken(this.getRhsIToken(1)),
                                       //#line 746 GJavaParser.g
                                       <identifier>this.getRhsSym(2),
                                       //#line 746 GJavaParser.g
                                       new AstToken(this.getRhsIToken(3)))
                //#line 746 GJavaParser.g
                );
            break;
            }
            //
            // Rule 322:  ContinueStatement ::= continue identifieropt ;
            //
            case 322: {
                //#line 748 "GJavaParser.g"
                this.setResult(
                    //#line 748 GJavaParser.g
                    new ContinueStatement(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 748 GJavaParser.g
                                          new AstToken(this.getRhsIToken(1)),
                                          //#line 748 GJavaParser.g
                                          <identifier>this.getRhsSym(2),
                                          //#line 748 GJavaParser.g
                                          new AstToken(this.getRhsIToken(3)))
                //#line 748 GJavaParser.g
                );
            break;
            }
            //
            // Rule 323:  ReturnStatement ::= return Expressionopt ;
            //
            case 323: {
                //#line 750 "GJavaParser.g"
                this.setResult(
                    //#line 750 GJavaParser.g
                    new ReturnStatement(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 750 GJavaParser.g
                                        new AstToken(this.getRhsIToken(1)),
                                        //#line 750 GJavaParser.g
                                        <IExpressionopt>this.getRhsSym(2),
                                        //#line 750 GJavaParser.g
                                        new AstToken(this.getRhsIToken(3)))
                //#line 750 GJavaParser.g
                );
            break;
            }
            //
            // Rule 324:  ThrowStatement ::= throw Expression ;
            //
            case 324: {
                //#line 752 "GJavaParser.g"
                this.setResult(
                    //#line 752 GJavaParser.g
                    new ThrowStatement(this.getLeftIToken(), this.getRightIToken(),
                                       //#line 752 GJavaParser.g
                                       new AstToken(this.getRhsIToken(1)),
                                       //#line 752 GJavaParser.g
                                       <IExpression>this.getRhsSym(2),
                                       //#line 752 GJavaParser.g
                                       new AstToken(this.getRhsIToken(3)))
                //#line 752 GJavaParser.g
                );
            break;
            }
            //
            // Rule 325:  SynchronizedStatement ::= synchronized ( Expression ) Block
            //
            case 325: {
                //#line 754 "GJavaParser.g"
                this.setResult(
                    //#line 754 GJavaParser.g
                    new SynchronizedStatement(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 754 GJavaParser.g
                                              new AstToken(this.getRhsIToken(1)),
                                              //#line 754 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 754 GJavaParser.g
                                              <IExpression>this.getRhsSym(3),
                                              //#line 754 GJavaParser.g
                                              new AstToken(this.getRhsIToken(4)),
                                              //#line 754 GJavaParser.g
                                              <Block>this.getRhsSym(5))
                //#line 754 GJavaParser.g
                );
            break;
            }
            //
            // Rule 326:  TryStatement ::= try Block Catches
            //
            case 326: {
                //#line 756 "GJavaParser.g"
                this.setResult(
                    //#line 756 GJavaParser.g
                    new TryStatement0(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 756 GJavaParser.g
                                      new AstToken(this.getRhsIToken(1)),
                                      //#line 756 GJavaParser.g
                                      <Block>this.getRhsSym(2),
                                      //#line 756 GJavaParser.g
                                      <ICatches>this.getRhsSym(3))
                //#line 756 GJavaParser.g
                );
            break;
            }
            //
            // Rule 327:  TryStatement ::= try Block Catchesopt Finally
            //
            case 327: {
                //#line 757 "GJavaParser.g"
                this.setResult(
                    //#line 757 GJavaParser.g
                    new TryStatement1(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 757 GJavaParser.g
                                      new AstToken(this.getRhsIToken(1)),
                                      //#line 757 GJavaParser.g
                                      <Block>this.getRhsSym(2),
                                      //#line 757 GJavaParser.g
                                      <ICatchesopt>this.getRhsSym(3),
                                      //#line 757 GJavaParser.g
                                      <Finally>this.getRhsSym(4))
                //#line 757 GJavaParser.g
                );
            break;
            }
            //
            // Rule 328:  Catches ::= CatchClause
            //
            case 328:
                break;
            //
            // Rule 329:  Catches ::= Catches CatchClause
            //
            case 329: {
                //#line 760 "GJavaParser.g"
                this.setResult(
                    //#line 760 GJavaParser.g
                    new Catches(this.getLeftIToken(), this.getRightIToken(),
                                //#line 760 GJavaParser.g
                                <ICatches>this.getRhsSym(1),
                                //#line 760 GJavaParser.g
                                <CatchClause>this.getRhsSym(2))
                //#line 760 GJavaParser.g
                );
            break;
            }
            //
            // Rule 330:  CatchClause ::= catch ( FormalParameter ) Block
            //
            case 330: {
                //#line 762 "GJavaParser.g"
                this.setResult(
                    //#line 762 GJavaParser.g
                    new CatchClause(this.getLeftIToken(), this.getRightIToken(),
                                    //#line 762 GJavaParser.g
                                    new AstToken(this.getRhsIToken(1)),
                                    //#line 762 GJavaParser.g
                                    new AstToken(this.getRhsIToken(2)),
                                    //#line 762 GJavaParser.g
                                    <FormalParameter>this.getRhsSym(3),
                                    //#line 762 GJavaParser.g
                                    new AstToken(this.getRhsIToken(4)),
                                    //#line 762 GJavaParser.g
                                    <Block>this.getRhsSym(5))
                //#line 762 GJavaParser.g
                );
            break;
            }
            //
            // Rule 331:  Finally ::= finally Block
            //
            case 331: {
                //#line 764 "GJavaParser.g"
                this.setResult(
                    //#line 764 GJavaParser.g
                    new Finally(this.getLeftIToken(), this.getRightIToken(),
                                //#line 764 GJavaParser.g
                                new AstToken(this.getRhsIToken(1)),
                                //#line 764 GJavaParser.g
                                <Block>this.getRhsSym(2))
                //#line 764 GJavaParser.g
                );
            break;
            }
            //
            // Rule 332:  Primary ::= PrimaryNoNewArray
            //
            case 332:
                break;
            //
            // Rule 333:  Primary ::= ArrayCreationExpression
            //
            case 333:
                break;
            //
            // Rule 334:  PrimaryNoNewArray ::= Literal
            //
            case 334:
                break;
            //
            // Rule 335:  PrimaryNoNewArray ::= Type . class
            //
            case 335: {
                //#line 780 "GJavaParser.g"
                this.setResult(
                    //#line 780 GJavaParser.g
                    new PrimaryNoNewArray0(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 780 GJavaParser.g
                                           <IType>this.getRhsSym(1),
                                           //#line 780 GJavaParser.g
                                           new AstToken(this.getRhsIToken(2)),
                                           //#line 780 GJavaParser.g
                                           new AstToken(this.getRhsIToken(3)))
                //#line 780 GJavaParser.g
                );
            break;
            }
            //
            // Rule 336:  PrimaryNoNewArray ::= void . class
            //
            case 336: {
                //#line 781 "GJavaParser.g"
                this.setResult(
                    //#line 781 GJavaParser.g
                    new PrimaryNoNewArray1(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 781 GJavaParser.g
                                           new AstToken(this.getRhsIToken(1)),
                                           //#line 781 GJavaParser.g
                                           new AstToken(this.getRhsIToken(2)),
                                           //#line 781 GJavaParser.g
                                           new AstToken(this.getRhsIToken(3)))
                //#line 781 GJavaParser.g
                );
            break;
            }
            //
            // Rule 337:  PrimaryNoNewArray ::= this
            //
            case 337: {
                //#line 782 "GJavaParser.g"
                this.setResult(
                    //#line 782 GJavaParser.g
                    new PrimaryNoNewArray2(this.getRhsIToken(1))
                //#line 782 GJavaParser.g
                );
            break;
            }
            //
            // Rule 338:  PrimaryNoNewArray ::= ClassName . this
            //
            case 338: {
                //#line 783 "GJavaParser.g"
                this.setResult(
                    //#line 783 GJavaParser.g
                    new PrimaryNoNewArray3(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 783 GJavaParser.g
                                           <IClassName>this.getRhsSym(1),
                                           //#line 783 GJavaParser.g
                                           new AstToken(this.getRhsIToken(2)),
                                           //#line 783 GJavaParser.g
                                           new AstToken(this.getRhsIToken(3)))
                //#line 783 GJavaParser.g
                );
            break;
            }
            //
            // Rule 339:  PrimaryNoNewArray ::= ( Expression )
            //
            case 339: {
                //#line 784 "GJavaParser.g"
                this.setResult(
                    //#line 784 GJavaParser.g
                    new PrimaryNoNewArray4(this.getLeftIToken(), this.getRightIToken(),
                                           //#line 784 GJavaParser.g
                                           new AstToken(this.getRhsIToken(1)),
                                           //#line 784 GJavaParser.g
                                           <IExpression>this.getRhsSym(2),
                                           //#line 784 GJavaParser.g
                                           new AstToken(this.getRhsIToken(3)))
                //#line 784 GJavaParser.g
                );
            break;
            }
            //
            // Rule 340:  PrimaryNoNewArray ::= ClassInstanceCreationExpression
            //
            case 340:
                break;
            //
            // Rule 341:  PrimaryNoNewArray ::= FieldAccess
            //
            case 341:
                break;
            //
            // Rule 342:  PrimaryNoNewArray ::= MethodInvocation
            //
            case 342:
                break;
            //
            // Rule 343:  PrimaryNoNewArray ::= ArrayAccess
            //
            case 343:
                break;
            //
            // Rule 344:  Literal ::= IntegerLiteral
            //
            case 344: {
                //#line 790 "GJavaParser.g"
                this.setResult(
                    //#line 790 GJavaParser.g
                    new Literal0(this.getRhsIToken(1))
                //#line 790 GJavaParser.g
                );
            break;
            }
            //
            // Rule 345:  Literal ::= LongLiteral
            //
            case 345: {
                //#line 791 "GJavaParser.g"
                this.setResult(
                    //#line 791 GJavaParser.g
                    new Literal1(this.getRhsIToken(1))
                //#line 791 GJavaParser.g
                );
            break;
            }
            //
            // Rule 346:  Literal ::= FloatingPointLiteral
            //
            case 346: {
                //#line 792 "GJavaParser.g"
                this.setResult(
                    //#line 792 GJavaParser.g
                    new Literal2(this.getRhsIToken(1))
                //#line 792 GJavaParser.g
                );
            break;
            }
            //
            // Rule 347:  Literal ::= DoubleLiteral
            //
            case 347: {
                //#line 793 "GJavaParser.g"
                this.setResult(
                    //#line 793 GJavaParser.g
                    new Literal3(this.getRhsIToken(1))
                //#line 793 GJavaParser.g
                );
            break;
            }
            //
            // Rule 348:  Literal ::= BooleanLiteral
            //
            case 348:
                break;
            //
            // Rule 349:  Literal ::= CharacterLiteral
            //
            case 349: {
                //#line 795 "GJavaParser.g"
                this.setResult(
                    //#line 795 GJavaParser.g
                    new Literal4(this.getRhsIToken(1))
                //#line 795 GJavaParser.g
                );
            break;
            }
            //
            // Rule 350:  Literal ::= StringLiteral
            //
            case 350: {
                //#line 796 "GJavaParser.g"
                this.setResult(
                    //#line 796 GJavaParser.g
                    new Literal5(this.getRhsIToken(1))
                //#line 796 GJavaParser.g
                );
            break;
            }
            //
            // Rule 351:  Literal ::= null
            //
            case 351: {
                //#line 797 "GJavaParser.g"
                this.setResult(
                    //#line 797 GJavaParser.g
                    new Literal6(this.getRhsIToken(1))
                //#line 797 GJavaParser.g
                );
            break;
            }
            //
            // Rule 352:  BooleanLiteral ::= true
            //
            case 352: {
                //#line 799 "GJavaParser.g"
                this.setResult(
                    //#line 799 GJavaParser.g
                    new BooleanLiteral0(this.getRhsIToken(1))
                //#line 799 GJavaParser.g
                );
            break;
            }
            //
            // Rule 353:  BooleanLiteral ::= false
            //
            case 353: {
                //#line 800 "GJavaParser.g"
                this.setResult(
                    //#line 800 GJavaParser.g
                    new BooleanLiteral1(this.getRhsIToken(1))
                //#line 800 GJavaParser.g
                );
            break;
            }
            //
            // Rule 354:  ClassInstanceCreationExpression ::= new TypeArgumentsopt ClassOrInterfaceType TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
            //
            case 354: {
                //#line 807 "GJavaParser.g"
                this.setResult(
                    //#line 807 GJavaParser.g
                    new ClassInstanceCreationExpression0(this.getLeftIToken(), this.getRightIToken(),
                                                         //#line 807 GJavaParser.g
                                                         new AstToken(this.getRhsIToken(1)),
                                                         //#line 807 GJavaParser.g
                                                         <TypeArguments>this.getRhsSym(2),
                                                         //#line 807 GJavaParser.g
                                                         <ClassType>this.getRhsSym(3),
                                                         //#line 807 GJavaParser.g
                                                         <TypeArguments>this.getRhsSym(4),
                                                         //#line 807 GJavaParser.g
                                                         new AstToken(this.getRhsIToken(5)),
                                                         //#line 807 GJavaParser.g
                                                         <IArgumentListopt>this.getRhsSym(6),
                                                         //#line 807 GJavaParser.g
                                                         new AstToken(this.getRhsIToken(7)),
                                                         //#line 807 GJavaParser.g
                                                         <ClassBody>this.getRhsSym(8))
                //#line 807 GJavaParser.g
                );
            break;
            }
            //
            // Rule 355:  ClassInstanceCreationExpression ::= Primary . new TypeArgumentsopt identifier TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
            //
            case 355: {
                //#line 808 "GJavaParser.g"
                this.setResult(
                    //#line 808 GJavaParser.g
                    new ClassInstanceCreationExpression1(this.getLeftIToken(), this.getRightIToken(),
                                                         //#line 808 GJavaParser.g
                                                         <IPrimary>this.getRhsSym(1),
                                                         //#line 808 GJavaParser.g
                                                         new AstToken(this.getRhsIToken(2)),
                                                         //#line 808 GJavaParser.g
                                                         new AstToken(this.getRhsIToken(3)),
                                                         //#line 808 GJavaParser.g
                                                         <TypeArguments>this.getRhsSym(4),
                                                         //#line 808 GJavaParser.g
                                                         <identifier>this.getRhsSym(5),
                                                         //#line 808 GJavaParser.g
                                                         <TypeArguments>this.getRhsSym(6),
                                                         //#line 808 GJavaParser.g
                                                         new AstToken(this.getRhsIToken(7)),
                                                         //#line 808 GJavaParser.g
                                                         <IArgumentListopt>this.getRhsSym(8),
                                                         //#line 808 GJavaParser.g
                                                         new AstToken(this.getRhsIToken(9)),
                                                         //#line 808 GJavaParser.g
                                                         <ClassBody>this.getRhsSym(10))
                //#line 808 GJavaParser.g
                );
            break;
            }
            //
            // Rule 356:  ArgumentList ::= Expression
            //
            case 356:
                break;
            //
            // Rule 357:  ArgumentList ::= ArgumentList , Expression
            //
            case 357: {
                //#line 812 "GJavaParser.g"
                this.setResult(
                    //#line 812 GJavaParser.g
                    new ArgumentList(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 812 GJavaParser.g
                                     <IArgumentList>this.getRhsSym(1),
                                     //#line 812 GJavaParser.g
                                     new AstToken(this.getRhsIToken(2)),
                                     //#line 812 GJavaParser.g
                                     <IExpression>this.getRhsSym(3))
                //#line 812 GJavaParser.g
                );
            break;
            }
            //
            // Rule 358:  ArrayCreationExpression ::= new PrimitiveType DimExprs Dimsopt
            //
            case 358: {
                //#line 822 "GJavaParser.g"
                this.setResult(
                    //#line 822 GJavaParser.g
                    new ArrayCreationExpression0(this.getLeftIToken(), this.getRightIToken(),
                                                 //#line 822 GJavaParser.g
                                                 new AstToken(this.getRhsIToken(1)),
                                                 //#line 822 GJavaParser.g
                                                 <IPrimitiveType>this.getRhsSym(2),
                                                 //#line 822 GJavaParser.g
                                                 <IDimExprs>this.getRhsSym(3),
                                                 //#line 822 GJavaParser.g
                                                 <IDimsopt>this.getRhsSym(4))
                //#line 822 GJavaParser.g
                );
            break;
            }
            //
            // Rule 359:  ArrayCreationExpression ::= new ClassOrInterfaceType DimExprs Dimsopt
            //
            case 359: {
                //#line 823 "GJavaParser.g"
                this.setResult(
                    //#line 823 GJavaParser.g
                    new ArrayCreationExpression1(this.getLeftIToken(), this.getRightIToken(),
                                                 //#line 823 GJavaParser.g
                                                 new AstToken(this.getRhsIToken(1)),
                                                 //#line 823 GJavaParser.g
                                                 <ClassType>this.getRhsSym(2),
                                                 //#line 823 GJavaParser.g
                                                 <IDimExprs>this.getRhsSym(3),
                                                 //#line 823 GJavaParser.g
                                                 <IDimsopt>this.getRhsSym(4))
                //#line 823 GJavaParser.g
                );
            break;
            }
            //
            // Rule 360:  ArrayCreationExpression ::= new PrimitiveType Dims ArrayInitializer
            //
            case 360: {
                //#line 824 "GJavaParser.g"
                this.setResult(
                    //#line 824 GJavaParser.g
                    new ArrayCreationExpression2(this.getLeftIToken(), this.getRightIToken(),
                                                 //#line 824 GJavaParser.g
                                                 new AstToken(this.getRhsIToken(1)),
                                                 //#line 824 GJavaParser.g
                                                 <IPrimitiveType>this.getRhsSym(2),
                                                 //#line 824 GJavaParser.g
                                                 <IDims>this.getRhsSym(3),
                                                 //#line 824 GJavaParser.g
                                                 <ArrayInitializer>this.getRhsSym(4))
                //#line 824 GJavaParser.g
                );
            break;
            }
            //
            // Rule 361:  ArrayCreationExpression ::= new ClassOrInterfaceType Dims ArrayInitializer
            //
            case 361: {
                //#line 825 "GJavaParser.g"
                this.setResult(
                    //#line 825 GJavaParser.g
                    new ArrayCreationExpression3(this.getLeftIToken(), this.getRightIToken(),
                                                 //#line 825 GJavaParser.g
                                                 new AstToken(this.getRhsIToken(1)),
                                                 //#line 825 GJavaParser.g
                                                 <ClassType>this.getRhsSym(2),
                                                 //#line 825 GJavaParser.g
                                                 <IDims>this.getRhsSym(3),
                                                 //#line 825 GJavaParser.g
                                                 <ArrayInitializer>this.getRhsSym(4))
                //#line 825 GJavaParser.g
                );
            break;
            }
            //
            // Rule 362:  DimExprs ::= DimExpr
            //
            case 362:
                break;
            //
            // Rule 363:  DimExprs ::= DimExprs DimExpr
            //
            case 363: {
                //#line 828 "GJavaParser.g"
                this.setResult(
                    //#line 828 GJavaParser.g
                    new DimExprs(this.getLeftIToken(), this.getRightIToken(),
                                 //#line 828 GJavaParser.g
                                 <IDimExprs>this.getRhsSym(1),
                                 //#line 828 GJavaParser.g
                                 <DimExpr>this.getRhsSym(2))
                //#line 828 GJavaParser.g
                );
            break;
            }
            //
            // Rule 364:  DimExpr ::= [ Expression ]
            //
            case 364: {
                //#line 830 "GJavaParser.g"
                this.setResult(
                    //#line 830 GJavaParser.g
                    new DimExpr(this.getLeftIToken(), this.getRightIToken(),
                                //#line 830 GJavaParser.g
                                new AstToken(this.getRhsIToken(1)),
                                //#line 830 GJavaParser.g
                                <IExpression>this.getRhsSym(2),
                                //#line 830 GJavaParser.g
                                new AstToken(this.getRhsIToken(3)))
                //#line 830 GJavaParser.g
                );
            break;
            }
            //
            // Rule 365:  Dims ::= [ ]
            //
            case 365: {
                //#line 832 "GJavaParser.g"
                this.setResult(
                    //#line 832 GJavaParser.g
                    new Dims0(this.getLeftIToken(), this.getRightIToken(),
                              //#line 832 GJavaParser.g
                              new AstToken(this.getRhsIToken(1)),
                              //#line 832 GJavaParser.g
                              new AstToken(this.getRhsIToken(2)))
                //#line 832 GJavaParser.g
                );
            break;
            }
            //
            // Rule 366:  Dims ::= Dims [ ]
            //
            case 366: {
                //#line 833 "GJavaParser.g"
                this.setResult(
                    //#line 833 GJavaParser.g
                    new Dims1(this.getLeftIToken(), this.getRightIToken(),
                              //#line 833 GJavaParser.g
                              <IDims>this.getRhsSym(1),
                              //#line 833 GJavaParser.g
                              new AstToken(this.getRhsIToken(2)),
                              //#line 833 GJavaParser.g
                              new AstToken(this.getRhsIToken(3)))
                //#line 833 GJavaParser.g
                );
            break;
            }
            //
            // Rule 367:  FieldAccess ::= Primary . identifier
            //
            case 367: {
                //#line 835 "GJavaParser.g"
                this.setResult(
                    //#line 835 GJavaParser.g
                    new FieldAccess0(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 835 GJavaParser.g
                                     <IPrimary>this.getRhsSym(1),
                                     //#line 835 GJavaParser.g
                                     new AstToken(this.getRhsIToken(2)),
                                     //#line 835 GJavaParser.g
                                     <identifier>this.getRhsSym(3))
                //#line 835 GJavaParser.g
                );
            break;
            }
            //
            // Rule 368:  FieldAccess ::= super . identifier
            //
            case 368: {
                //#line 836 "GJavaParser.g"
                this.setResult(
                    //#line 836 GJavaParser.g
                    new FieldAccess1(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 836 GJavaParser.g
                                     new AstToken(this.getRhsIToken(1)),
                                     //#line 836 GJavaParser.g
                                     new AstToken(this.getRhsIToken(2)),
                                     //#line 836 GJavaParser.g
                                     <identifier>this.getRhsSym(3))
                //#line 836 GJavaParser.g
                );
            break;
            }
            //
            // Rule 369:  FieldAccess ::= ClassName . super . identifier
            //
            case 369: {
                //#line 837 "GJavaParser.g"
                this.setResult(
                    //#line 837 GJavaParser.g
                    new FieldAccess2(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 837 GJavaParser.g
                                     <IClassName>this.getRhsSym(1),
                                     //#line 837 GJavaParser.g
                                     new AstToken(this.getRhsIToken(2)),
                                     //#line 837 GJavaParser.g
                                     new AstToken(this.getRhsIToken(3)),
                                     //#line 837 GJavaParser.g
                                     new AstToken(this.getRhsIToken(4)),
                                     //#line 837 GJavaParser.g
                                     <identifier>this.getRhsSym(5))
                //#line 837 GJavaParser.g
                );
            break;
            }
            //
            // Rule 370:  MethodInvocation ::= MethodName ( ArgumentListopt )
            //
            case 370: {
                //#line 839 "GJavaParser.g"
                this.setResult(
                    //#line 839 GJavaParser.g
                    new MethodInvocation0(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 839 GJavaParser.g
                                          <IMethodName>this.getRhsSym(1),
                                          //#line 839 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 839 GJavaParser.g
                                          <IArgumentListopt>this.getRhsSym(3),
                                          //#line 839 GJavaParser.g
                                          new AstToken(this.getRhsIToken(4)))
                //#line 839 GJavaParser.g
                );
            break;
            }
            //
            // Rule 371:  MethodInvocation ::= Primary . TypeArgumentsopt identifier ( ArgumentListopt )
            //
            case 371: {
                //#line 840 "GJavaParser.g"
                this.setResult(
                    //#line 840 GJavaParser.g
                    new MethodInvocation1(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 840 GJavaParser.g
                                          <IPrimary>this.getRhsSym(1),
                                          //#line 840 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 840 GJavaParser.g
                                          <TypeArguments>this.getRhsSym(3),
                                          //#line 840 GJavaParser.g
                                          <identifier>this.getRhsSym(4),
                                          //#line 840 GJavaParser.g
                                          new AstToken(this.getRhsIToken(5)),
                                          //#line 840 GJavaParser.g
                                          <IArgumentListopt>this.getRhsSym(6),
                                          //#line 840 GJavaParser.g
                                          new AstToken(this.getRhsIToken(7)))
                //#line 840 GJavaParser.g
                );
            break;
            }
            //
            // Rule 372:  MethodInvocation ::= super . TypeArgumentsopt identifier ( ArgumentListopt )
            //
            case 372: {
                //#line 841 "GJavaParser.g"
                this.setResult(
                    //#line 841 GJavaParser.g
                    new MethodInvocation2(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 841 GJavaParser.g
                                          new AstToken(this.getRhsIToken(1)),
                                          //#line 841 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 841 GJavaParser.g
                                          <TypeArguments>this.getRhsSym(3),
                                          //#line 841 GJavaParser.g
                                          <identifier>this.getRhsSym(4),
                                          //#line 841 GJavaParser.g
                                          new AstToken(this.getRhsIToken(5)),
                                          //#line 841 GJavaParser.g
                                          <IArgumentListopt>this.getRhsSym(6),
                                          //#line 841 GJavaParser.g
                                          new AstToken(this.getRhsIToken(7)))
                //#line 841 GJavaParser.g
                );
            break;
            }
            //
            // Rule 373:  MethodInvocation ::= ClassName . super . TypeArgumentsopt identifier ( ArgumentListopt )
            //
            case 373: {
                //#line 842 "GJavaParser.g"
                this.setResult(
                    //#line 842 GJavaParser.g
                    new MethodInvocation3(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 842 GJavaParser.g
                                          <IClassName>this.getRhsSym(1),
                                          //#line 842 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 842 GJavaParser.g
                                          new AstToken(this.getRhsIToken(3)),
                                          //#line 842 GJavaParser.g
                                          new AstToken(this.getRhsIToken(4)),
                                          //#line 842 GJavaParser.g
                                          <TypeArguments>this.getRhsSym(5),
                                          //#line 842 GJavaParser.g
                                          <identifier>this.getRhsSym(6),
                                          //#line 842 GJavaParser.g
                                          new AstToken(this.getRhsIToken(7)),
                                          //#line 842 GJavaParser.g
                                          <IArgumentListopt>this.getRhsSym(8),
                                          //#line 842 GJavaParser.g
                                          new AstToken(this.getRhsIToken(9)))
                //#line 842 GJavaParser.g
                );
            break;
            }
            //
            // Rule 374:  MethodInvocation ::= TypeName . TypeArguments identifier ( ArgumentListopt )
            //
            case 374: {
                //#line 843 "GJavaParser.g"
                this.setResult(
                    //#line 843 GJavaParser.g
                    new MethodInvocation4(this.getLeftIToken(), this.getRightIToken(),
                                          //#line 843 GJavaParser.g
                                          <ITypeName>this.getRhsSym(1),
                                          //#line 843 GJavaParser.g
                                          new AstToken(this.getRhsIToken(2)),
                                          //#line 843 GJavaParser.g
                                          <TypeArguments>this.getRhsSym(3),
                                          //#line 843 GJavaParser.g
                                          <identifier>this.getRhsSym(4),
                                          //#line 843 GJavaParser.g
                                          new AstToken(this.getRhsIToken(5)),
                                          //#line 843 GJavaParser.g
                                          <IArgumentListopt>this.getRhsSym(6),
                                          //#line 843 GJavaParser.g
                                          new AstToken(this.getRhsIToken(7)))
                //#line 843 GJavaParser.g
                );
            break;
            }
            //
            // Rule 375:  ArrayAccess ::= ExpressionName [ Expression ]
            //
            case 375: {
                //#line 851 "GJavaParser.g"
                this.setResult(
                    //#line 851 GJavaParser.g
                    new ArrayAccess0(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 851 GJavaParser.g
                                     <IExpressionName>this.getRhsSym(1),
                                     //#line 851 GJavaParser.g
                                     new AstToken(this.getRhsIToken(2)),
                                     //#line 851 GJavaParser.g
                                     <IExpression>this.getRhsSym(3),
                                     //#line 851 GJavaParser.g
                                     new AstToken(this.getRhsIToken(4)))
                //#line 851 GJavaParser.g
                );
            break;
            }
            //
            // Rule 376:  ArrayAccess ::= PrimaryNoNewArray [ Expression ]
            //
            case 376: {
                //#line 852 "GJavaParser.g"
                this.setResult(
                    //#line 852 GJavaParser.g
                    new ArrayAccess1(this.getLeftIToken(), this.getRightIToken(),
                                     //#line 852 GJavaParser.g
                                     <IPrimaryNoNewArray>this.getRhsSym(1),
                                     //#line 852 GJavaParser.g
                                     new AstToken(this.getRhsIToken(2)),
                                     //#line 852 GJavaParser.g
                                     <IExpression>this.getRhsSym(3),
                                     //#line 852 GJavaParser.g
                                     new AstToken(this.getRhsIToken(4)))
                //#line 852 GJavaParser.g
                );
            break;
            }
            //
            // Rule 377:  PostfixExpression ::= Primary
            //
            case 377:
                break;
            //
            // Rule 378:  PostfixExpression ::= ExpressionName
            //
            case 378:
                break;
            //
            // Rule 379:  PostfixExpression ::= PostIncrementExpression
            //
            case 379:
                break;
            //
            // Rule 380:  PostfixExpression ::= PostDecrementExpression
            //
            case 380:
                break;
            //
            // Rule 381:  PostIncrementExpression ::= PostfixExpression ++
            //
            case 381: {
                //#line 859 "GJavaParser.g"
                this.setResult(
                    //#line 859 GJavaParser.g
                    new PostIncrementExpression(this.getLeftIToken(), this.getRightIToken(),
                                                //#line 859 GJavaParser.g
                                                <IPostfixExpression>this.getRhsSym(1),
                                                //#line 859 GJavaParser.g
                                                new AstToken(this.getRhsIToken(2)))
                //#line 859 GJavaParser.g
                );
            break;
            }
            //
            // Rule 382:  PostDecrementExpression ::= PostfixExpression --
            //
            case 382: {
                //#line 861 "GJavaParser.g"
                this.setResult(
                    //#line 861 GJavaParser.g
                    new PostDecrementExpression(this.getLeftIToken(), this.getRightIToken(),
                                                //#line 861 GJavaParser.g
                                                <IPostfixExpression>this.getRhsSym(1),
                                                //#line 861 GJavaParser.g
                                                new AstToken(this.getRhsIToken(2)))
                //#line 861 GJavaParser.g
                );
            break;
            }
            //
            // Rule 383:  UnaryExpression ::= PreIncrementExpression
            //
            case 383:
                break;
            //
            // Rule 384:  UnaryExpression ::= PreDecrementExpression
            //
            case 384:
                break;
            //
            // Rule 385:  UnaryExpression ::= + UnaryExpression
            //
            case 385: {
                //#line 865 "GJavaParser.g"
                this.setResult(
                    //#line 865 GJavaParser.g
                    new UnaryExpression0(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 865 GJavaParser.g
                                         new AstToken(this.getRhsIToken(1)),
                                         //#line 865 GJavaParser.g
                                         <IUnaryExpression>this.getRhsSym(2))
                //#line 865 GJavaParser.g
                );
            break;
            }
            //
            // Rule 386:  UnaryExpression ::= - UnaryExpression
            //
            case 386: {
                //#line 866 "GJavaParser.g"
                this.setResult(
                    //#line 866 GJavaParser.g
                    new UnaryExpression1(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 866 GJavaParser.g
                                         new AstToken(this.getRhsIToken(1)),
                                         //#line 866 GJavaParser.g
                                         <IUnaryExpression>this.getRhsSym(2))
                //#line 866 GJavaParser.g
                );
            break;
            }
            //
            // Rule 387:  UnaryExpression ::= UnaryExpressionNotPlusMinus
            //
            case 387:
                break;
            //
            // Rule 388:  PreIncrementExpression ::= ++ UnaryExpression
            //
            case 388: {
                //#line 869 "GJavaParser.g"
                this.setResult(
                    //#line 869 GJavaParser.g
                    new PreIncrementExpression(this.getLeftIToken(), this.getRightIToken(),
                                               //#line 869 GJavaParser.g
                                               new AstToken(this.getRhsIToken(1)),
                                               //#line 869 GJavaParser.g
                                               <IUnaryExpression>this.getRhsSym(2))
                //#line 869 GJavaParser.g
                );
            break;
            }
            //
            // Rule 389:  PreDecrementExpression ::= -- UnaryExpression
            //
            case 389: {
                //#line 871 "GJavaParser.g"
                this.setResult(
                    //#line 871 GJavaParser.g
                    new PreDecrementExpression(this.getLeftIToken(), this.getRightIToken(),
                                               //#line 871 GJavaParser.g
                                               new AstToken(this.getRhsIToken(1)),
                                               //#line 871 GJavaParser.g
                                               <IUnaryExpression>this.getRhsSym(2))
                //#line 871 GJavaParser.g
                );
            break;
            }
            //
            // Rule 390:  UnaryExpressionNotPlusMinus ::= PostfixExpression
            //
            case 390:
                break;
            //
            // Rule 391:  UnaryExpressionNotPlusMinus ::= ~ UnaryExpression
            //
            case 391: {
                //#line 874 "GJavaParser.g"
                this.setResult(
                    //#line 874 GJavaParser.g
                    new UnaryExpressionNotPlusMinus0(this.getLeftIToken(), this.getRightIToken(),
                                                     //#line 874 GJavaParser.g
                                                     new AstToken(this.getRhsIToken(1)),
                                                     //#line 874 GJavaParser.g
                                                     <IUnaryExpression>this.getRhsSym(2))
                //#line 874 GJavaParser.g
                );
            break;
            }
            //
            // Rule 392:  UnaryExpressionNotPlusMinus ::= ! UnaryExpression
            //
            case 392: {
                //#line 875 "GJavaParser.g"
                this.setResult(
                    //#line 875 GJavaParser.g
                    new UnaryExpressionNotPlusMinus1(this.getLeftIToken(), this.getRightIToken(),
                                                     //#line 875 GJavaParser.g
                                                     new AstToken(this.getRhsIToken(1)),
                                                     //#line 875 GJavaParser.g
                                                     <IUnaryExpression>this.getRhsSym(2))
                //#line 875 GJavaParser.g
                );
            break;
            }
            //
            // Rule 393:  UnaryExpressionNotPlusMinus ::= CastExpression
            //
            case 393:
                break;
            //
            // Rule 394:  CastExpression ::= ( PrimitiveType Dimsopt ) UnaryExpression
            //
            case 394: {
                //#line 878 "GJavaParser.g"
                this.setResult(
                    //#line 878 GJavaParser.g
                    new CastExpression0(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 878 GJavaParser.g
                                        new AstToken(this.getRhsIToken(1)),
                                        //#line 878 GJavaParser.g
                                        <IPrimitiveType>this.getRhsSym(2),
                                        //#line 878 GJavaParser.g
                                        <IDimsopt>this.getRhsSym(3),
                                        //#line 878 GJavaParser.g
                                        new AstToken(this.getRhsIToken(4)),
                                        //#line 878 GJavaParser.g
                                        <IUnaryExpression>this.getRhsSym(5))
                //#line 878 GJavaParser.g
                );
            break;
            }
            //
            // Rule 395:  CastExpression ::= ( ReferenceType ) UnaryExpressionNotPlusMinus
            //
            case 395: {
                //#line 879 "GJavaParser.g"
                this.setResult(
                    //#line 879 GJavaParser.g
                    new CastExpression1(this.getLeftIToken(), this.getRightIToken(),
                                        //#line 879 GJavaParser.g
                                        new AstToken(this.getRhsIToken(1)),
                                        //#line 879 GJavaParser.g
                                        <IReferenceType>this.getRhsSym(2),
                                        //#line 879 GJavaParser.g
                                        new AstToken(this.getRhsIToken(3)),
                                        //#line 879 GJavaParser.g
                                        <IUnaryExpressionNotPlusMinus>this.getRhsSym(4))
                //#line 879 GJavaParser.g
                );
            break;
            }
            //
            // Rule 396:  MultiplicativeExpression ::= UnaryExpression
            //
            case 396:
                break;
            //
            // Rule 397:  MultiplicativeExpression ::= MultiplicativeExpression * UnaryExpression
            //
            case 397: {
                //#line 882 "GJavaParser.g"
                this.setResult(
                    //#line 882 GJavaParser.g
                    new MultiplicativeExpression0(this.getLeftIToken(), this.getRightIToken(),
                                                  //#line 882 GJavaParser.g
                                                  <IMultiplicativeExpression>this.getRhsSym(1),
                                                  //#line 882 GJavaParser.g
                                                  new AstToken(this.getRhsIToken(2)),
                                                  //#line 882 GJavaParser.g
                                                  <IUnaryExpression>this.getRhsSym(3))
                //#line 882 GJavaParser.g
                );
            break;
            }
            //
            // Rule 398:  MultiplicativeExpression ::= MultiplicativeExpression / UnaryExpression
            //
            case 398: {
                //#line 883 "GJavaParser.g"
                this.setResult(
                    //#line 883 GJavaParser.g
                    new MultiplicativeExpression1(this.getLeftIToken(), this.getRightIToken(),
                                                  //#line 883 GJavaParser.g
                                                  <IMultiplicativeExpression>this.getRhsSym(1),
                                                  //#line 883 GJavaParser.g
                                                  new AstToken(this.getRhsIToken(2)),
                                                  //#line 883 GJavaParser.g
                                                  <IUnaryExpression>this.getRhsSym(3))
                //#line 883 GJavaParser.g
                );
            break;
            }
            //
            // Rule 399:  MultiplicativeExpression ::= MultiplicativeExpression % UnaryExpression
            //
            case 399: {
                //#line 884 "GJavaParser.g"
                this.setResult(
                    //#line 884 GJavaParser.g
                    new MultiplicativeExpression2(this.getLeftIToken(), this.getRightIToken(),
                                                  //#line 884 GJavaParser.g
                                                  <IMultiplicativeExpression>this.getRhsSym(1),
                                                  //#line 884 GJavaParser.g
                                                  new AstToken(this.getRhsIToken(2)),
                                                  //#line 884 GJavaParser.g
                                                  <IUnaryExpression>this.getRhsSym(3))
                //#line 884 GJavaParser.g
                );
            break;
            }
            //
            // Rule 400:  AdditiveExpression ::= MultiplicativeExpression
            //
            case 400:
                break;
            //
            // Rule 401:  AdditiveExpression ::= AdditiveExpression + MultiplicativeExpression
            //
            case 401: {
                //#line 887 "GJavaParser.g"
                this.setResult(
                    //#line 887 GJavaParser.g
                    new AdditiveExpression0(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 887 GJavaParser.g
                                            <IAdditiveExpression>this.getRhsSym(1),
                                            //#line 887 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)),
                                            //#line 887 GJavaParser.g
                                            <IMultiplicativeExpression>this.getRhsSym(3))
                //#line 887 GJavaParser.g
                );
            break;
            }
            //
            // Rule 402:  AdditiveExpression ::= AdditiveExpression - MultiplicativeExpression
            //
            case 402: {
                //#line 888 "GJavaParser.g"
                this.setResult(
                    //#line 888 GJavaParser.g
                    new AdditiveExpression1(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 888 GJavaParser.g
                                            <IAdditiveExpression>this.getRhsSym(1),
                                            //#line 888 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)),
                                            //#line 888 GJavaParser.g
                                            <IMultiplicativeExpression>this.getRhsSym(3))
                //#line 888 GJavaParser.g
                );
            break;
            }
            //
            // Rule 403:  ShiftExpression ::= AdditiveExpression
            //
            case 403:
                break;
            //
            // Rule 404:  ShiftExpression ::= ShiftExpression << AdditiveExpression
            //
            case 404: {
                //#line 891 "GJavaParser.g"
                this.setResult(
                    //#line 891 GJavaParser.g
                    new ShiftExpression0(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 891 GJavaParser.g
                                         <IShiftExpression>this.getRhsSym(1),
                                         //#line 891 GJavaParser.g
                                         new AstToken(this.getRhsIToken(2)),
                                         //#line 891 GJavaParser.g
                                         <IAdditiveExpression>this.getRhsSym(3))
                //#line 891 GJavaParser.g
                );
            break;
            }
            //
            // Rule 405:  ShiftExpression ::= ShiftExpression > > AdditiveExpression
            //
            case 405: {
                //#line 892 "GJavaParser.g"
                this.setResult(
                    //#line 892 GJavaParser.g
                    new ShiftExpression1(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 892 GJavaParser.g
                                         <IShiftExpression>this.getRhsSym(1),
                                         //#line 892 GJavaParser.g
                                         new AstToken(this.getRhsIToken(2)),
                                         //#line 892 GJavaParser.g
                                         new AstToken(this.getRhsIToken(3)),
                                         //#line 892 GJavaParser.g
                                         <IAdditiveExpression>this.getRhsSym(4))
                //#line 892 GJavaParser.g
                );
            break;
            }
            //
            // Rule 406:  ShiftExpression ::= ShiftExpression > > > AdditiveExpression
            //
            case 406: {
                //#line 893 "GJavaParser.g"
                this.setResult(
                    //#line 893 GJavaParser.g
                    new ShiftExpression2(this.getLeftIToken(), this.getRightIToken(),
                                         //#line 893 GJavaParser.g
                                         <IShiftExpression>this.getRhsSym(1),
                                         //#line 893 GJavaParser.g
                                         new AstToken(this.getRhsIToken(2)),
                                         //#line 893 GJavaParser.g
                                         new AstToken(this.getRhsIToken(3)),
                                         //#line 893 GJavaParser.g
                                         new AstToken(this.getRhsIToken(4)),
                                         //#line 893 GJavaParser.g
                                         <IAdditiveExpression>this.getRhsSym(5))
                //#line 893 GJavaParser.g
                );
            break;
            }
            //
            // Rule 407:  RelationalExpression ::= ShiftExpression
            //
            case 407:
                break;
            //
            // Rule 408:  RelationalExpression ::= RelationalExpression < ShiftExpression
            //
            case 408: {
                //#line 896 "GJavaParser.g"
                this.setResult(
                    //#line 896 GJavaParser.g
                    new RelationalExpression0(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 896 GJavaParser.g
                                              <IRelationalExpression>this.getRhsSym(1),
                                              //#line 896 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 896 GJavaParser.g
                                              <IShiftExpression>this.getRhsSym(3))
                //#line 896 GJavaParser.g
                );
            break;
            }
            //
            // Rule 409:  RelationalExpression ::= RelationalExpression > ShiftExpression
            //
            case 409: {
                //#line 897 "GJavaParser.g"
                this.setResult(
                    //#line 897 GJavaParser.g
                    new RelationalExpression1(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 897 GJavaParser.g
                                              <IRelationalExpression>this.getRhsSym(1),
                                              //#line 897 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 897 GJavaParser.g
                                              <IShiftExpression>this.getRhsSym(3))
                //#line 897 GJavaParser.g
                );
            break;
            }
            //
            // Rule 410:  RelationalExpression ::= RelationalExpression <= ShiftExpression
            //
            case 410: {
                //#line 898 "GJavaParser.g"
                this.setResult(
                    //#line 898 GJavaParser.g
                    new RelationalExpression2(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 898 GJavaParser.g
                                              <IRelationalExpression>this.getRhsSym(1),
                                              //#line 898 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 898 GJavaParser.g
                                              <IShiftExpression>this.getRhsSym(3))
                //#line 898 GJavaParser.g
                );
            break;
            }
            //
            // Rule 411:  RelationalExpression ::= RelationalExpression > = ShiftExpression
            //
            case 411: {
                //#line 899 "GJavaParser.g"
                this.setResult(
                    //#line 899 GJavaParser.g
                    new RelationalExpression3(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 899 GJavaParser.g
                                              <IRelationalExpression>this.getRhsSym(1),
                                              //#line 899 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 899 GJavaParser.g
                                              new AstToken(this.getRhsIToken(3)),
                                              //#line 899 GJavaParser.g
                                              <IShiftExpression>this.getRhsSym(4))
                //#line 899 GJavaParser.g
                );
            break;
            }
            //
            // Rule 412:  RelationalExpression ::= RelationalExpression instanceof ReferenceType
            //
            case 412: {
                //#line 900 "GJavaParser.g"
                this.setResult(
                    //#line 900 GJavaParser.g
                    new RelationalExpression4(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 900 GJavaParser.g
                                              <IRelationalExpression>this.getRhsSym(1),
                                              //#line 900 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 900 GJavaParser.g
                                              <IReferenceType>this.getRhsSym(3))
                //#line 900 GJavaParser.g
                );
            break;
            }
            //
            // Rule 413:  EqualityExpression ::= RelationalExpression
            //
            case 413:
                break;
            //
            // Rule 414:  EqualityExpression ::= EqualityExpression == RelationalExpression
            //
            case 414: {
                //#line 903 "GJavaParser.g"
                this.setResult(
                    //#line 903 GJavaParser.g
                    new EqualityExpression0(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 903 GJavaParser.g
                                            <IEqualityExpression>this.getRhsSym(1),
                                            //#line 903 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)),
                                            //#line 903 GJavaParser.g
                                            <IRelationalExpression>this.getRhsSym(3))
                //#line 903 GJavaParser.g
                );
            break;
            }
            //
            // Rule 415:  EqualityExpression ::= EqualityExpression != RelationalExpression
            //
            case 415: {
                //#line 904 "GJavaParser.g"
                this.setResult(
                    //#line 904 GJavaParser.g
                    new EqualityExpression1(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 904 GJavaParser.g
                                            <IEqualityExpression>this.getRhsSym(1),
                                            //#line 904 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)),
                                            //#line 904 GJavaParser.g
                                            <IRelationalExpression>this.getRhsSym(3))
                //#line 904 GJavaParser.g
                );
            break;
            }
            //
            // Rule 416:  AndExpression ::= EqualityExpression
            //
            case 416:
                break;
            //
            // Rule 417:  AndExpression ::= AndExpression & EqualityExpression
            //
            case 417: {
                //#line 907 "GJavaParser.g"
                this.setResult(
                    //#line 907 GJavaParser.g
                    new AndExpression(this.getLeftIToken(), this.getRightIToken(),
                                      //#line 907 GJavaParser.g
                                      <IAndExpression>this.getRhsSym(1),
                                      //#line 907 GJavaParser.g
                                      new AstToken(this.getRhsIToken(2)),
                                      //#line 907 GJavaParser.g
                                      <IEqualityExpression>this.getRhsSym(3))
                //#line 907 GJavaParser.g
                );
            break;
            }
            //
            // Rule 418:  ExclusiveOrExpression ::= AndExpression
            //
            case 418:
                break;
            //
            // Rule 419:  ExclusiveOrExpression ::= ExclusiveOrExpression ^ AndExpression
            //
            case 419: {
                //#line 910 "GJavaParser.g"
                this.setResult(
                    //#line 910 GJavaParser.g
                    new ExclusiveOrExpression(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 910 GJavaParser.g
                                              <IExclusiveOrExpression>this.getRhsSym(1),
                                              //#line 910 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 910 GJavaParser.g
                                              <IAndExpression>this.getRhsSym(3))
                //#line 910 GJavaParser.g
                );
            break;
            }
            //
            // Rule 420:  InclusiveOrExpression ::= ExclusiveOrExpression
            //
            case 420:
                break;
            //
            // Rule 421:  InclusiveOrExpression ::= InclusiveOrExpression | ExclusiveOrExpression
            //
            case 421: {
                //#line 913 "GJavaParser.g"
                this.setResult(
                    //#line 913 GJavaParser.g
                    new InclusiveOrExpression(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 913 GJavaParser.g
                                              <IInclusiveOrExpression>this.getRhsSym(1),
                                              //#line 913 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 913 GJavaParser.g
                                              <IExclusiveOrExpression>this.getRhsSym(3))
                //#line 913 GJavaParser.g
                );
            break;
            }
            //
            // Rule 422:  ConditionalAndExpression ::= InclusiveOrExpression
            //
            case 422:
                break;
            //
            // Rule 423:  ConditionalAndExpression ::= ConditionalAndExpression && InclusiveOrExpression
            //
            case 423: {
                //#line 916 "GJavaParser.g"
                this.setResult(
                    //#line 916 GJavaParser.g
                    new ConditionalAndExpression(this.getLeftIToken(), this.getRightIToken(),
                                                 //#line 916 GJavaParser.g
                                                 <IConditionalAndExpression>this.getRhsSym(1),
                                                 //#line 916 GJavaParser.g
                                                 new AstToken(this.getRhsIToken(2)),
                                                 //#line 916 GJavaParser.g
                                                 <IInclusiveOrExpression>this.getRhsSym(3))
                //#line 916 GJavaParser.g
                );
            break;
            }
            //
            // Rule 424:  ConditionalOrExpression ::= ConditionalAndExpression
            //
            case 424:
                break;
            //
            // Rule 425:  ConditionalOrExpression ::= ConditionalOrExpression || ConditionalAndExpression
            //
            case 425: {
                //#line 919 "GJavaParser.g"
                this.setResult(
                    //#line 919 GJavaParser.g
                    new ConditionalOrExpression(this.getLeftIToken(), this.getRightIToken(),
                                                //#line 919 GJavaParser.g
                                                <IConditionalOrExpression>this.getRhsSym(1),
                                                //#line 919 GJavaParser.g
                                                new AstToken(this.getRhsIToken(2)),
                                                //#line 919 GJavaParser.g
                                                <IConditionalAndExpression>this.getRhsSym(3))
                //#line 919 GJavaParser.g
                );
            break;
            }
            //
            // Rule 426:  ConditionalExpression ::= ConditionalOrExpression
            //
            case 426:
                break;
            //
            // Rule 427:  ConditionalExpression ::= ConditionalOrExpression ? Expression : ConditionalExpression
            //
            case 427: {
                //#line 922 "GJavaParser.g"
                this.setResult(
                    //#line 922 GJavaParser.g
                    new ConditionalExpression(this.getLeftIToken(), this.getRightIToken(),
                                              //#line 922 GJavaParser.g
                                              <IConditionalOrExpression>this.getRhsSym(1),
                                              //#line 922 GJavaParser.g
                                              new AstToken(this.getRhsIToken(2)),
                                              //#line 922 GJavaParser.g
                                              <IExpression>this.getRhsSym(3),
                                              //#line 922 GJavaParser.g
                                              new AstToken(this.getRhsIToken(4)),
                                              //#line 922 GJavaParser.g
                                              <IConditionalExpression>this.getRhsSym(5))
                //#line 922 GJavaParser.g
                );
            break;
            }
            //
            // Rule 428:  AssignmentExpression ::= ConditionalExpression
            //
            case 428:
                break;
            //
            // Rule 429:  AssignmentExpression ::= Assignment
            //
            case 429:
                break;
            //
            // Rule 430:  Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression
            //
            case 430: {
                //#line 927 "GJavaParser.g"
                this.setResult(
                    //#line 927 GJavaParser.g
                    new Assignment(this.getLeftIToken(), this.getRightIToken(),
                                   //#line 927 GJavaParser.g
                                   <ILeftHandSide>this.getRhsSym(1),
                                   //#line 927 GJavaParser.g
                                   <IAssignmentOperator>this.getRhsSym(2),
                                   //#line 927 GJavaParser.g
                                   <IAssignmentExpression>this.getRhsSym(3))
                //#line 927 GJavaParser.g
                );
            break;
            }
            //
            // Rule 431:  LeftHandSide ::= ExpressionName
            //
            case 431:
                break;
            //
            // Rule 432:  LeftHandSide ::= FieldAccess
            //
            case 432:
                break;
            //
            // Rule 433:  LeftHandSide ::= ArrayAccess
            //
            case 433:
                break;
            //
            // Rule 434:  AssignmentOperator ::= =
            //
            case 434: {
                //#line 933 "GJavaParser.g"
                this.setResult(
                    //#line 933 GJavaParser.g
                    new AssignmentOperator0(this.getRhsIToken(1))
                //#line 933 GJavaParser.g
                );
            break;
            }
            //
            // Rule 435:  AssignmentOperator ::= *=
            //
            case 435: {
                //#line 934 "GJavaParser.g"
                this.setResult(
                    //#line 934 GJavaParser.g
                    new AssignmentOperator1(this.getRhsIToken(1))
                //#line 934 GJavaParser.g
                );
            break;
            }
            //
            // Rule 436:  AssignmentOperator ::= /=
            //
            case 436: {
                //#line 935 "GJavaParser.g"
                this.setResult(
                    //#line 935 GJavaParser.g
                    new AssignmentOperator2(this.getRhsIToken(1))
                //#line 935 GJavaParser.g
                );
            break;
            }
            //
            // Rule 437:  AssignmentOperator ::= %=
            //
            case 437: {
                //#line 936 "GJavaParser.g"
                this.setResult(
                    //#line 936 GJavaParser.g
                    new AssignmentOperator3(this.getRhsIToken(1))
                //#line 936 GJavaParser.g
                );
            break;
            }
            //
            // Rule 438:  AssignmentOperator ::= +=
            //
            case 438: {
                //#line 937 "GJavaParser.g"
                this.setResult(
                    //#line 937 GJavaParser.g
                    new AssignmentOperator4(this.getRhsIToken(1))
                //#line 937 GJavaParser.g
                );
            break;
            }
            //
            // Rule 439:  AssignmentOperator ::= -=
            //
            case 439: {
                //#line 938 "GJavaParser.g"
                this.setResult(
                    //#line 938 GJavaParser.g
                    new AssignmentOperator5(this.getRhsIToken(1))
                //#line 938 GJavaParser.g
                );
            break;
            }
            //
            // Rule 440:  AssignmentOperator ::= <<=
            //
            case 440: {
                //#line 939 "GJavaParser.g"
                this.setResult(
                    //#line 939 GJavaParser.g
                    new AssignmentOperator6(this.getRhsIToken(1))
                //#line 939 GJavaParser.g
                );
            break;
            }
            //
            // Rule 441:  AssignmentOperator ::= > > =
            //
            case 441: {
                //#line 940 "GJavaParser.g"
                this.setResult(
                    //#line 940 GJavaParser.g
                    new AssignmentOperator7(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 940 GJavaParser.g
                                            new AstToken(this.getRhsIToken(1)),
                                            //#line 940 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)),
                                            //#line 940 GJavaParser.g
                                            new AstToken(this.getRhsIToken(3)))
                //#line 940 GJavaParser.g
                );
            break;
            }
            //
            // Rule 442:  AssignmentOperator ::= > > > =
            //
            case 442: {
                //#line 941 "GJavaParser.g"
                this.setResult(
                    //#line 941 GJavaParser.g
                    new AssignmentOperator8(this.getLeftIToken(), this.getRightIToken(),
                                            //#line 941 GJavaParser.g
                                            new AstToken(this.getRhsIToken(1)),
                                            //#line 941 GJavaParser.g
                                            new AstToken(this.getRhsIToken(2)),
                                            //#line 941 GJavaParser.g
                                            new AstToken(this.getRhsIToken(3)),
                                            //#line 941 GJavaParser.g
                                            new AstToken(this.getRhsIToken(4)))
                //#line 941 GJavaParser.g
                );
            break;
            }
            //
            // Rule 443:  AssignmentOperator ::= &=
            //
            case 443: {
                //#line 942 "GJavaParser.g"
                this.setResult(
                    //#line 942 GJavaParser.g
                    new AssignmentOperator9(this.getRhsIToken(1))
                //#line 942 GJavaParser.g
                );
            break;
            }
            //
            // Rule 444:  AssignmentOperator ::= ^=
            //
            case 444: {
                //#line 943 "GJavaParser.g"
                this.setResult(
                    //#line 943 GJavaParser.g
                    new AssignmentOperator10(this.getRhsIToken(1))
                //#line 943 GJavaParser.g
                );
            break;
            }
            //
            // Rule 445:  AssignmentOperator ::= |=
            //
            case 445: {
                //#line 944 "GJavaParser.g"
                this.setResult(
                    //#line 944 GJavaParser.g
                    new AssignmentOperator11(this.getRhsIToken(1))
                //#line 944 GJavaParser.g
                );
            break;
            }
            //
            // Rule 446:  Expression ::= AssignmentExpression
            //
            case 446:
                break;
            //
            // Rule 447:  ConstantExpression ::= Expression
            //
            case 447:
                break;
            //
            // Rule 448:  Dimsopt ::= %Empty
            //
            case 448: {
                //#line 953 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 449:  Dimsopt ::= Dims
            //
            case 449:
                break;
            //
            // Rule 450:  Catchesopt ::= %Empty
            //
            case 450: {
                //#line 956 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 451:  Catchesopt ::= Catches
            //
            case 451:
                break;
            //
            // Rule 452:  identifieropt ::= %Empty
            //
            case 452: {
                //#line 959 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 453:  identifieropt ::= identifier
            //
            case 453:
                break;
            //
            // Rule 454:  ForUpdateopt ::= %Empty
            //
            case 454: {
                //#line 962 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 455:  ForUpdateopt ::= ForUpdate
            //
            case 455:
                break;
            //
            // Rule 456:  Expressionopt ::= %Empty
            //
            case 456: {
                //#line 965 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 457:  Expressionopt ::= Expression
            //
            case 457:
                break;
            //
            // Rule 458:  ForInitopt ::= %Empty
            //
            case 458: {
                //#line 968 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 459:  ForInitopt ::= ForInit
            //
            case 459:
                break;
            //
            // Rule 460:  SwitchLabelsopt ::= %Empty
            //
            case 460: {
                //#line 971 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 461:  SwitchLabelsopt ::= SwitchLabels
            //
            case 461:
                break;
            //
            // Rule 462:  SwitchBlockStatementGroupsopt ::= %Empty
            //
            case 462: {
                //#line 974 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 463:  SwitchBlockStatementGroupsopt ::= SwitchBlockStatementGroups
            //
            case 463:
                break;
            //
            // Rule 464:  VariableModifiersopt ::= %Empty
            //
            case 464: {
                //#line 977 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 465:  VariableModifiersopt ::= VariableModifiers
            //
            case 465:
                break;
            //
            // Rule 466:  VariableInitializersopt ::= %Empty
            //
            case 466: {
                //#line 980 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 467:  VariableInitializersopt ::= VariableInitializers
            //
            case 467:
                break;
            //
            // Rule 468:  ElementValuesopt ::= %Empty
            //
            case 468: {
                //#line 983 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 469:  ElementValuesopt ::= ElementValues
            //
            case 469:
                break;
            //
            // Rule 470:  ElementValuePairsopt ::= %Empty
            //
            case 470: {
                //#line 986 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 471:  ElementValuePairsopt ::= ElementValuePairs
            //
            case 471:
                break;
            //
            // Rule 472:  DefaultValueopt ::= %Empty
            //
            case 472: {
                //#line 989 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 473:  DefaultValueopt ::= DefaultValue
            //
            case 473:
                break;
            //
            // Rule 474:  AnnotationTypeElementDeclarationsopt ::= %Empty
            //
            case 474: {
                //#line 992 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 475:  AnnotationTypeElementDeclarationsopt ::= AnnotationTypeElementDeclarations
            //
            case 475:
                break;
            //
            // Rule 476:  AbstractMethodModifiersopt ::= %Empty
            //
            case 476: {
                //#line 995 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 477:  AbstractMethodModifiersopt ::= AbstractMethodModifiers
            //
            case 477:
                break;
            //
            // Rule 478:  ConstantModifiersopt ::= %Empty
            //
            case 478: {
                //#line 998 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 479:  ConstantModifiersopt ::= ConstantModifiers
            //
            case 479:
                break;
            //
            // Rule 480:  InterfaceMemberDeclarationsopt ::= %Empty
            //
            case 480: {
                //#line 1001 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 481:  InterfaceMemberDeclarationsopt ::= InterfaceMemberDeclarations
            //
            case 481:
                break;
            //
            // Rule 482:  ExtendsInterfacesopt ::= %Empty
            //
            case 482: {
                //#line 1004 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 483:  ExtendsInterfacesopt ::= ExtendsInterfaces
            //
            case 483:
                break;
            //
            // Rule 484:  InterfaceModifiersopt ::= %Empty
            //
            case 484: {
                //#line 1007 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 485:  InterfaceModifiersopt ::= InterfaceModifiers
            //
            case 485:
                break;
            //
            // Rule 486:  ClassBodyopt ::= %Empty
            //
            case 486: {
                //#line 1010 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 487:  ClassBodyopt ::= ClassBody
            //
            case 487:
                break;
            //
            // Rule 488:  Argumentsopt ::= %Empty
            //
            case 488: {
                //#line 1013 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 489:  Argumentsopt ::= Arguments
            //
            case 489:
                break;
            //
            // Rule 490:  EnumBodyDeclarationsopt ::= %Empty
            //
            case 490: {
                //#line 1016 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 491:  EnumBodyDeclarationsopt ::= EnumBodyDeclarations
            //
            case 491:
                break;
            //
            // Rule 492:  ,opt ::= %Empty
            //
            case 492: {
                //#line 1019 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 493:  ,opt ::= ,
            //
            case 493: {
                //#line 1020 "GJavaParser.g"
                this.setResult(
                    //#line 1020 GJavaParser.g
                    new Commaopt(this.getRhsIToken(1))
                //#line 1020 GJavaParser.g
                );
            break;
            }
            //
            // Rule 494:  EnumConstantsopt ::= %Empty
            //
            case 494: {
                //#line 1022 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 495:  EnumConstantsopt ::= EnumConstants
            //
            case 495:
                break;
            //
            // Rule 496:  ArgumentListopt ::= %Empty
            //
            case 496: {
                //#line 1025 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 497:  ArgumentListopt ::= ArgumentList
            //
            case 497:
                break;
            //
            // Rule 498:  BlockStatementsopt ::= %Empty
            //
            case 498: {
                //#line 1028 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 499:  BlockStatementsopt ::= BlockStatements
            //
            case 499:
                break;
            //
            // Rule 500:  ExplicitConstructorInvocationopt ::= %Empty
            //
            case 500: {
                //#line 1031 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 501:  ExplicitConstructorInvocationopt ::= ExplicitConstructorInvocation
            //
            case 501:
                break;
            //
            // Rule 502:  ConstructorModifiersopt ::= %Empty
            //
            case 502: {
                //#line 1034 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 503:  ConstructorModifiersopt ::= ConstructorModifiers
            //
            case 503:
                break;
            //
            // Rule 504:  ...opt ::= %Empty
            //
            case 504: {
                //#line 1037 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 505:  ...opt ::= ...
            //
            case 505: {
                //#line 1038 "GJavaParser.g"
                this.setResult(
                    //#line 1038 GJavaParser.g
                    new Ellipsisopt(this.getRhsIToken(1))
                //#line 1038 GJavaParser.g
                );
            break;
            }
            //
            // Rule 506:  FormalParameterListopt ::= %Empty
            //
            case 506: {
                //#line 1040 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 507:  FormalParameterListopt ::= FormalParameterList
            //
            case 507:
                break;
            //
            // Rule 508:  Throwsopt ::= %Empty
            //
            case 508: {
                //#line 1043 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 509:  Throwsopt ::= Throws
            //
            case 509:
                break;
            //
            // Rule 510:  MethodModifiersopt ::= %Empty
            //
            case 510: {
                //#line 1046 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 511:  MethodModifiersopt ::= MethodModifiers
            //
            case 511:
                break;
            //
            // Rule 512:  FieldModifiersopt ::= %Empty
            //
            case 512: {
                //#line 1049 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 513:  FieldModifiersopt ::= FieldModifiers
            //
            case 513:
                break;
            //
            // Rule 514:  ClassBodyDeclarationsopt ::= %Empty
            //
            case 514: {
                //#line 1052 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 515:  ClassBodyDeclarationsopt ::= ClassBodyDeclarations
            //
            case 515:
                break;
            //
            // Rule 516:  Interfacesopt ::= %Empty
            //
            case 516: {
                //#line 1055 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 517:  Interfacesopt ::= Interfaces
            //
            case 517:
                break;
            //
            // Rule 518:  Superopt ::= %Empty
            //
            case 518: {
                //#line 1058 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 519:  Superopt ::= Super
            //
            case 519:
                break;
            //
            // Rule 520:  TypeParametersopt ::= %Empty
            //
            case 520: {
                //#line 1061 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 521:  TypeParametersopt ::= TypeParameters
            //
            case 521:
                break;
            //
            // Rule 522:  ClassModifiersopt ::= %Empty
            //
            case 522: {
                //#line 1064 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 523:  ClassModifiersopt ::= ClassModifiers
            //
            case 523:
                break;
            //
            // Rule 524:  Annotationsopt ::= %Empty
            //
            case 524: {
                //#line 1067 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 525:  Annotationsopt ::= Annotations
            //
            case 525:
                break;
            //
            // Rule 526:  TypeDeclarationsopt ::= %Empty
            //
            case 526: {
                //#line 1070 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 527:  TypeDeclarationsopt ::= TypeDeclarations
            //
            case 527:
                break;
            //
            // Rule 528:  ImportDeclarationsopt ::= %Empty
            //
            case 528: {
                //#line 1073 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 529:  ImportDeclarationsopt ::= ImportDeclarations
            //
            case 529:
                break;
            //
            // Rule 530:  PackageDeclarationopt ::= %Empty
            //
            case 530: {
                //#line 1076 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 531:  PackageDeclarationopt ::= PackageDeclaration
            //
            case 531:
                break;
            //
            // Rule 532:  WildcardBoundsOpt ::= %Empty
            //
            case 532: {
                //#line 1079 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 533:  WildcardBoundsOpt ::= WildcardBounds
            //
            case 533:
                break;
            //
            // Rule 534:  AdditionalBoundListopt ::= %Empty
            //
            case 534: {
                //#line 1082 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 535:  AdditionalBoundListopt ::= AdditionalBoundList
            //
            case 535:
                break;
            //
            // Rule 536:  TypeBoundopt ::= %Empty
            //
            case 536: {
                //#line 1085 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 537:  TypeBoundopt ::= TypeBound
            //
            case 537:
                break;
            //
            // Rule 538:  TypeArgumentsopt ::= %Empty
            //
            case 538: {
                //#line 1088 "GJavaParser.g"
                this.setResult(null);
            break;
            }
            //
            // Rule 539:  TypeArgumentsopt ::= TypeArguments
            //
            case 539:
                break;
    //#line 331 "dtParserTemplateF.gi

    
            default:
                break;
        }
        return;
    }
}
    export abstract class Ast implements IAst
    {
        public getNextAst() : IAst | null { return null; }
        protected leftIToken : IToken ;
        protected rightIToken: IToken ;
        protected parent : IAst | null = null;
        public  setParent(parent : IAst ) : void { this.parent = parent; }
        public  getParent() : IAst | null{ return this.parent; }

        public getLeftIToken() : IToken { return this.leftIToken; }
        public getRightIToken() : IToken { return this.rightIToken; }
        public getPrecedingAdjuncts() : IToken[] { return this.leftIToken.getPrecedingAdjuncts(); }
        public getFollowingAdjuncts() : IToken[] { return this.rightIToken.getFollowingAdjuncts(); }

        public  toString() : string 
        {
            let str = this.leftIToken.getILexStream()?.toString(this.leftIToken.getStartOffset(), this.rightIToken.getEndOffset());
            return str? str : "";
        }

    constructor(leftIToken : IToken , rightIToken? : IToken )
        {
            this.leftIToken = leftIToken;
            if(rightIToken) this.rightIToken = rightIToken;
            else            this.rightIToken = leftIToken;
        }

      public   initialize() : void {}

        /**
         * A list of all children of this node, excluding the null ones.
         */
        public  getChildren() : Lpg.Util.ArrayList<IAst>
        {
             let list = this.getAllChildren() ;
            let k = -1;
            for (let i = 0; i < list.size(); i++)
            {
                let element = list.get(i);
                if (element)
                {
                    if (++k != i)
                        list.set(k, element);
                }
            }
            for (let i = list.size() - 1; i > k; i--) // remove extraneous elements
                list.remove(i);
            return list;
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
        public abstract  getAllChildren() : Lpg.Util.ArrayList<IAst>;

        public abstract acceptWithVisitor(v : Visitor) : void;
        public abstract  acceptWithArg(v : ArgumentVisitor, o : any) : void;
        public abstract acceptWithResult(v : ResultVisitor) : any;
        public abstract acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any;
        public  accept(v : IAstVisitor ) : void {}
    }

    export abstract class AbstractAstList extends Ast implements IAbstractArrayList<Ast>
    {
        private leftRecursive : boolean ;
        public  list  = new Lpg.Util.ArrayList<Ast>();
        public  size() : number { return this.list.size(); }
        public   getList() : Lpg.Util.ArrayList<Ast    > { return this.list; }
        public  getElementAt(i : number ) : Ast { return <Ast> this.list.get(this.leftRecursive ? i : this.list.size() - 1 - i); }
        public  getArrayList() : Lpg.Util.ArrayList<Ast>
        {
            if (! this.leftRecursive) // reverse the list 
            {
                for (let i = 0, n = this.list.size() - 1; i < n; i++, n--)
                {
                    let ith = this.list.get(i),
                           nth = this.list.get(n);
                    this.list.set(i, nth);
                    this.list.set(n, ith);
                }
                this.leftRecursive = true;
            }
            return this.list;
        }
        /**
         * @deprecated replaced by {@link #addElement()}
         *
         */
        public  add(element : Ast) : boolean
        {
            this.addElement(element);
            return true;
        }

        public  addElement(element : Ast) : void
        {
            this.list.add(element);
            if (this.leftRecursive)
                 this.rightIToken = element.getRightIToken();
            else this.leftIToken = element.getLeftIToken();
        }

        constructor(leftToken : IToken, rightToken : IToken , leftRecursive : boolean )        {
              super(leftToken, rightToken);
              this.leftRecursive = leftRecursive;
        }

        /**
         * Make a copy of the list and return it. Note that we obtain the local list by
         * invoking getArrayList so as to make sure that the list we return is in proper order.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            return this.getArrayList().clone();
        }

    }

    export class AstToken extends Ast implements IAstToken
    {
        constructor(token : IToken ) { super(token); }
        public  getIToken() : IToken{ return this.leftIToken; }
        public  toString() : string  { return this.leftIToken.toString(); }

        /**
         * A token class has no children. So, we return the empty list.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst> { return new Lpg.Util.ArrayList<IAst>(); }


        public  acceptWithVisitor(v : Visitor) : void{ v.visitAstToken(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAstToken(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAstToken(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAstToken(this, o); }
    }

    export interface IRootForJavaParser
    {
         getLeftIToken() : IToken;
         getRightIToken() : IToken;

        acceptWithVisitor(v : Visitor) : void;
         acceptWithArg(v : ArgumentVisitor, o : any) : void;
        acceptWithResult(v : ResultVisitor) : any;
        acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any;
    }

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PrimitiveType
     *<li>ClassType
     *<li>ArrayType
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>ResultType
     *<li>VariableModifier
     *<li>MethodBody
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>Commaopt
     *<li>Ellipsisopt
     *<li>LPGUserAction0
     *<li>LPGUserAction1
     *<li>LPGUserAction2
     *<li>LPGUserAction3
     *<li>LPGUserAction4
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *<li>ClassModifier0
     *<li>ClassModifier1
     *<li>ClassModifier2
     *<li>ClassModifier3
     *<li>ClassModifier4
     *<li>ClassModifier5
     *<li>ClassModifier6
     *<li>FieldModifier0
     *<li>FieldModifier1
     *<li>FieldModifier2
     *<li>FieldModifier3
     *<li>FieldModifier4
     *<li>FieldModifier5
     *<li>FieldModifier6
     *<li>MethodModifier0
     *<li>MethodModifier1
     *<li>MethodModifier2
     *<li>MethodModifier3
     *<li>MethodModifier4
     *<li>MethodModifier5
     *<li>MethodModifier6
     *<li>MethodModifier7
     *<li>MethodModifier8
     *<li>ConstructorModifier0
     *<li>ConstructorModifier1
     *<li>ConstructorModifier2
     *<li>InterfaceModifier0
     *<li>InterfaceModifier1
     *<li>InterfaceModifier2
     *<li>InterfaceModifier3
     *<li>InterfaceModifier4
     *<li>InterfaceModifier5
     *<li>ConstantModifier0
     *<li>ConstantModifier1
     *<li>ConstantModifier2
     *<li>AbstractMethodModifier0
     *<li>AbstractMethodModifier1
     *<li>AnnotationTypeElementDeclaration0
     *<li>AnnotationTypeElementDeclaration1
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>AssignmentOperator0
     *<li>AssignmentOperator1
     *<li>AssignmentOperator2
     *<li>AssignmentOperator3
     *<li>AssignmentOperator4
     *<li>AssignmentOperator5
     *<li>AssignmentOperator6
     *<li>AssignmentOperator7
     *<li>AssignmentOperator8
     *<li>AssignmentOperator9
     *<li>AssignmentOperator10
     *<li>AssignmentOperator11
     *</ul>
     *</b>
     */
    export interface IAstToken extends IRootForJavaParser    {
    }

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>Commaopt</b>
     */
    export interface ICommaopt extends IAstToken {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>Ellipsisopt</b>
     */
    export interface IEllipsisopt extends IAstToken {}

    /**
     * is implemented by <b>CompilationUnit</b>
     */
    export interface ICompilationUnit extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassBodyDeclarations
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>StaticInitializer
     *<li>ConstructorDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Block
     *</ul>
     *</b>
     */
    export interface IClassBodyDeclarationsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>LPGUserAction0
     *<li>LPGUserAction1
     *<li>LPGUserAction2
     *<li>LPGUserAction3
     *<li>LPGUserAction4
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    export interface ILPGUserAction extends IAstToken {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    export interface Iidentifier extends IAstToken, ITypeName, ITypeVariable, IPackageName, IExpressionName, IMethodName, IPackageOrTypeName, IAmbiguousName, IVariableDeclaratorId, ISimpleTypeName, ISimpleName, IEnumConstant, Iidentifieropt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    export interface IBlockStatementsopt extends ILPGUserAction {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PrimitiveType
     *<li>ClassType
     *<li>ArrayType
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    export interface IType extends IResultType {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>PrimitiveType
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    export interface IPrimitiveType extends IType, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ArrayType
     *</ul>
     *</b>
     */
    export interface IReferenceType extends IType, IActualTypeArgument {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    export interface INumericType extends IPrimitiveType {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *</ul>
     *</b>
     */
    export interface IIntegralType extends INumericType, IAstToken {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    export interface IFloatingPointType extends INumericType, IAstToken {}

    /**
     * is implemented by <b>ClassType</b>
     */
    export interface IClassOrInterfaceType extends IReferenceType {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    export interface ITypeVariable extends IReferenceType, IExceptionType {}

    /**
     * is implemented by <b>ArrayType</b>
     */
    export interface IArrayType extends IReferenceType {}

    /**
     * is implemented by <b>ClassType</b>
     */
    export interface IClassType extends IClassOrInterfaceType, IExceptionType {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>TypeName
     *</ul>
     *</b>
     */
    export interface ITypeName extends IClassName {}

    /**
     * is implemented by <b>TypeArguments</b>
     */
    export interface ITypeArgumentsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>InterfaceType</b>
     */
    export interface IInterfaceType extends IInterfaceTypeList {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>TypeName
     *</ul>
     *</b>
     */
    export interface IClassName extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>TypeParameter</b>
     */
    export interface ITypeParameter extends ITypeParameterList {}

    /**
     * is implemented by <b>TypeBound</b>
     */
    export interface ITypeBoundopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>TypeBound</b>
     */
    export interface ITypeBound extends ITypeBoundopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AdditionalBoundList
     *<li>AdditionalBound
     *</ul>
     *</b>
     */
    export interface IAdditionalBoundListopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AdditionalBoundList
     *<li>AdditionalBound
     *</ul>
     *</b>
     */
    export interface IAdditionalBoundList extends IAdditionalBoundListopt {}

    /**
     * is implemented by <b>AdditionalBound</b>
     */
    export interface IAdditionalBound extends IAdditionalBoundList {}

    /**
     * is implemented by <b>TypeArguments</b>
     */
    export interface ITypeArguments extends ITypeArgumentsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ArrayType
     *<li>ActualTypeArgumentList
     *<li>Wildcard
     *</ul>
     *</b>
     */
    export interface IActualTypeArgumentList extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ArrayType
     *<li>Wildcard
     *</ul>
     *</b>
     */
    export interface IActualTypeArgument extends IActualTypeArgumentList {}

    /**
     * is implemented by <b>Wildcard</b>
     */
    export interface IWildcard extends IActualTypeArgument {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>WildcardBounds0
     *<li>WildcardBounds1
     *</ul>
     *</b>
     */
    export interface IWildcardBoundsOpt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>WildcardBounds0
     *<li>WildcardBounds1
     *</ul>
     *</b>
     */
    export interface IWildcardBounds extends IWildcardBoundsOpt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PackageName
     *</ul>
     *</b>
     */
    export interface IPackageName extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *</ul>
     *</b>
     */
    export interface IExpressionName extends IPostfixExpression, ILeftHandSide {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>AmbiguousName
     *</ul>
     *</b>
     */
    export interface IAmbiguousName extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>MethodName
     *</ul>
     *</b>
     */
    export interface IMethodName extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PackageOrTypeName
     *</ul>
     *</b>
     */
    export interface IPackageOrTypeName extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>PackageDeclaration</b>
     */
    export interface IPackageDeclarationopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ImportDeclarations
     *<li>SingleTypeImportDeclaration
     *<li>TypeImportOnDemandDeclaration
     *<li>SingleStaticImportDeclaration
     *<li>StaticImportOnDemandDeclaration
     *</ul>
     *</b>
     */
    export interface IImportDeclarationsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeDeclarations
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    export interface ITypeDeclarationsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ImportDeclarations
     *<li>SingleTypeImportDeclaration
     *<li>TypeImportOnDemandDeclaration
     *<li>SingleStaticImportDeclaration
     *<li>StaticImportOnDemandDeclaration
     *</ul>
     *</b>
     */
    export interface IImportDeclarations extends IImportDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SingleTypeImportDeclaration
     *<li>TypeImportOnDemandDeclaration
     *<li>SingleStaticImportDeclaration
     *<li>StaticImportOnDemandDeclaration
     *</ul>
     *</b>
     */
    export interface IImportDeclaration extends IImportDeclarations {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeDeclarations
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    export interface ITypeDeclarations extends ITypeDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    export interface ITypeDeclaration extends ITypeDeclarations, IAstToken {}

    /**
     * is implemented by <b>PackageDeclaration</b>
     */
    export interface IPackageDeclaration extends IPackageDeclarationopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    export interface IAnnotationsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>SingleTypeImportDeclaration</b>
     */
    export interface ISingleTypeImportDeclaration extends IImportDeclaration {}

    /**
     * is implemented by <b>TypeImportOnDemandDeclaration</b>
     */
    export interface ITypeImportOnDemandDeclaration extends IImportDeclaration {}

    /**
     * is implemented by <b>SingleStaticImportDeclaration</b>
     */
    export interface ISingleStaticImportDeclaration extends IImportDeclaration {}

    /**
     * is implemented by <b>StaticImportOnDemandDeclaration</b>
     */
    export interface IStaticImportOnDemandDeclaration extends IImportDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *</ul>
     *</b>
     */
    export interface IClassDeclaration extends ITypeDeclaration, IClassMemberDeclaration, IInterfaceMemberDeclaration, IAnnotationTypeElementDeclaration, IBlockStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    export interface IInterfaceDeclaration extends ITypeDeclaration, IClassMemberDeclaration, IInterfaceMemberDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by <b>NormalClassDeclaration</b>
     */
    export interface INormalClassDeclaration extends IClassDeclaration {}

    /**
     * is implemented by <b>EnumDeclaration</b>
     */
    export interface IEnumDeclaration extends IClassDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ClassModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ClassModifier0
     *<li>ClassModifier1
     *<li>ClassModifier2
     *<li>ClassModifier3
     *<li>ClassModifier4
     *<li>ClassModifier5
     *<li>ClassModifier6
     *</ul>
     *</b>
     */
    export interface IClassModifiersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>TypeParameters</b>
     */
    export interface ITypeParametersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Super</b>
     */
    export interface ISuperopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Interfaces</b>
     */
    export interface IInterfacesopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>ClassBody</b>
     */
    export interface IClassBody extends IClassBodyopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ClassModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ClassModifier0
     *<li>ClassModifier1
     *<li>ClassModifier2
     *<li>ClassModifier3
     *<li>ClassModifier4
     *<li>ClassModifier5
     *<li>ClassModifier6
     *</ul>
     *</b>
     */
    export interface IClassModifiers extends IClassModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ClassModifier0
     *<li>ClassModifier1
     *<li>ClassModifier2
     *<li>ClassModifier3
     *<li>ClassModifier4
     *<li>ClassModifier5
     *<li>ClassModifier6
     *</ul>
     *</b>
     */
    export interface IClassModifier extends IClassModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    export interface IAnnotation extends IClassModifier, IFieldModifier, IInterfaceModifier, IConstantModifier, IAnnotations, IElementValue {}

    /**
     * is implemented by <b>TypeParameters</b>
     */
    export interface ITypeParameters extends ITypeParametersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeParameter
     *<li>TypeParameterList
     *</ul>
     *</b>
     */
    export interface ITypeParameterList extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Super</b>
     */
    export interface ISuper extends ISuperopt {}

    /**
     * is implemented by <b>Interfaces</b>
     */
    export interface IInterfaces extends IInterfacesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>InterfaceType
     *<li>InterfaceTypeList
     *</ul>
     *</b>
     */
    export interface IInterfaceTypeList extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassBodyDeclarations
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>StaticInitializer
     *<li>ConstructorDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Block
     *</ul>
     *</b>
     */
    export interface IClassBodyDeclarations extends IClassBodyDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>StaticInitializer
     *<li>ConstructorDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Block
     *</ul>
     *</b>
     */
    export interface IClassBodyDeclaration extends IClassBodyDeclarations {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    export interface IClassMemberDeclaration extends IClassBodyDeclaration, IAstToken {}

    /**
     * is implemented by <b>Block</b>
     */
    export interface IInstanceInitializer extends IClassBodyDeclaration {}

    /**
     * is implemented by <b>StaticInitializer</b>
     */
    export interface IStaticInitializer extends IClassBodyDeclaration {}

    /**
     * is implemented by <b>ConstructorDeclaration</b>
     */
    export interface IConstructorDeclaration extends IClassBodyDeclaration {}

    /**
     * is implemented by <b>FieldDeclaration</b>
     */
    export interface IFieldDeclaration extends IClassMemberDeclaration {}

    /**
     * is implemented by <b>MethodDeclaration</b>
     */
    export interface IMethodDeclaration extends IClassMemberDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FieldModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>FieldModifier0
     *<li>FieldModifier1
     *<li>FieldModifier2
     *<li>FieldModifier3
     *<li>FieldModifier4
     *<li>FieldModifier5
     *<li>FieldModifier6
     *</ul>
     *</b>
     */
    export interface IFieldModifiersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>VariableDeclarators
     *<li>VariableDeclarator
     *<li>VariableDeclaratorId
     *</ul>
     *</b>
     */
    export interface IVariableDeclarators extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>VariableDeclarator
     *<li>VariableDeclaratorId
     *</ul>
     *</b>
     */
    export interface IVariableDeclarator extends IVariableDeclarators {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>VariableDeclaratorId
     *</ul>
     *</b>
     */
    export interface IVariableDeclaratorId extends IVariableDeclarator {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArrayInitializer
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IVariableInitializer extends IVariableInitializers {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IExpression extends IVariableInitializer, IArgumentList, IConstantExpression, IExpressionopt {}

    /**
     * is implemented by <b>ArrayInitializer</b>
     */
    export interface IArrayInitializer extends IVariableInitializer {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FieldModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>FieldModifier0
     *<li>FieldModifier1
     *<li>FieldModifier2
     *<li>FieldModifier3
     *<li>FieldModifier4
     *<li>FieldModifier5
     *<li>FieldModifier6
     *</ul>
     *</b>
     */
    export interface IFieldModifiers extends IFieldModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>FieldModifier0
     *<li>FieldModifier1
     *<li>FieldModifier2
     *<li>FieldModifier3
     *<li>FieldModifier4
     *<li>FieldModifier5
     *<li>FieldModifier6
     *</ul>
     *</b>
     */
    export interface IFieldModifier extends IFieldModifiers, IAstToken {}

    /**
     * is implemented by <b>MethodHeader</b>
     */
    export interface IMethodHeader extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodBody
     *<li>Block
     *</ul>
     *</b>
     */
    export interface IMethodBody extends IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>MethodModifier0
     *<li>MethodModifier1
     *<li>MethodModifier2
     *<li>MethodModifier3
     *<li>MethodModifier4
     *<li>MethodModifier5
     *<li>MethodModifier6
     *<li>MethodModifier7
     *<li>MethodModifier8
     *</ul>
     *</b>
     */
    export interface IMethodModifiersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PrimitiveType
     *<li>ClassType
     *<li>ArrayType
     *<li>ResultType
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    export interface IResultType extends IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodDeclarator0
     *<li>MethodDeclarator1
     *</ul>
     *</b>
     */
    export interface IMethodDeclarator extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Throws</b>
     */
    export interface IThrowsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FormalParameterList
     *<li>LastFormalParameter
     *</ul>
     *</b>
     */
    export interface IFormalParameterListopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FormalParameterList
     *<li>LastFormalParameter
     *</ul>
     *</b>
     */
    export interface IFormalParameterList extends IFormalParameterListopt {}

    /**
     * is implemented by <b>LastFormalParameter</b>
     */
    export interface ILastFormalParameter extends IFormalParameterList {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FormalParameters
     *<li>FormalParameter
     *</ul>
     *</b>
     */
    export interface IFormalParameters extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>FormalParameter</b>
     */
    export interface IFormalParameter extends IFormalParameters {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>VariableModifiers
     *<li>VariableModifier
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    export interface IVariableModifiersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>VariableModifiers
     *<li>VariableModifier
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    export interface IVariableModifiers extends IVariableModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>VariableModifier
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    export interface IVariableModifier extends IVariableModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    export interface IAnnotations extends IVariableModifier, IMethodModifier, IConstructorModifier, IAbstractMethodModifier, IAnnotationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>MethodModifier0
     *<li>MethodModifier1
     *<li>MethodModifier2
     *<li>MethodModifier3
     *<li>MethodModifier4
     *<li>MethodModifier5
     *<li>MethodModifier6
     *<li>MethodModifier7
     *<li>MethodModifier8
     *</ul>
     *</b>
     */
    export interface IMethodModifiers extends IMethodModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>MethodModifier0
     *<li>MethodModifier1
     *<li>MethodModifier2
     *<li>MethodModifier3
     *<li>MethodModifier4
     *<li>MethodModifier5
     *<li>MethodModifier6
     *<li>MethodModifier7
     *<li>MethodModifier8
     *</ul>
     *</b>
     */
    export interface IMethodModifier extends IMethodModifiers, IAstToken {}

    /**
     * is implemented by <b>Throws</b>
     */
    export interface IThrows extends IThrowsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ExceptionTypeList
     *</ul>
     *</b>
     */
    export interface IExceptionTypeList extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *</ul>
     *</b>
     */
    export interface IExceptionType extends IExceptionTypeList {}

    /**
     * is implemented by <b>Block</b>
     */
    export interface IBlock extends IMethodBody, IInstanceInitializer, IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstructorModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstructorModifier0
     *<li>ConstructorModifier1
     *<li>ConstructorModifier2
     *</ul>
     *</b>
     */
    export interface IConstructorModifiersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>ConstructorDeclarator</b>
     */
    export interface IConstructorDeclarator extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>ConstructorBody</b>
     */
    export interface IConstructorBody extends IRootForJavaParser    {
    }

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    export interface ISimpleTypeName extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstructorModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstructorModifier0
     *<li>ConstructorModifier1
     *<li>ConstructorModifier2
     *</ul>
     *</b>
     */
    export interface IConstructorModifiers extends IConstructorModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstructorModifier0
     *<li>ConstructorModifier1
     *<li>ConstructorModifier2
     *</ul>
     *</b>
     */
    export interface IConstructorModifier extends IConstructorModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExplicitConstructorInvocation0
     *<li>ExplicitConstructorInvocation1
     *<li>ExplicitConstructorInvocation2
     *</ul>
     *</b>
     */
    export interface IExplicitConstructorInvocationopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExplicitConstructorInvocation0
     *<li>ExplicitConstructorInvocation1
     *<li>ExplicitConstructorInvocation2
     *</ul>
     *</b>
     */
    export interface IExplicitConstructorInvocation extends IExplicitConstructorInvocationopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArgumentList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IArgumentListopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    export interface IPrimary extends IPostfixExpression {}

    /**
     * is implemented by <b>EnumBody</b>
     */
    export interface IEnumBody extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>EnumConstants
     *<li>EnumConstant
     *</ul>
     *</b>
     */
    export interface IEnumConstantsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>EnumBodyDeclarations</b>
     */
    export interface IEnumBodyDeclarationsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>EnumConstants
     *<li>EnumConstant
     *</ul>
     *</b>
     */
    export interface IEnumConstants extends IEnumConstantsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>EnumConstant
     *</ul>
     *</b>
     */
    export interface IEnumConstant extends IEnumConstants {}

    /**
     * is implemented by <b>Arguments</b>
     */
    export interface IArgumentsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>ClassBody</b>
     */
    export interface IClassBodyopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Arguments</b>
     */
    export interface IArguments extends IArgumentsopt {}

    /**
     * is implemented by <b>EnumBodyDeclarations</b>
     */
    export interface IEnumBodyDeclarations extends IEnumBodyDeclarationsopt {}

    /**
     * is implemented by <b>NormalInterfaceDeclaration</b>
     */
    export interface INormalInterfaceDeclaration extends IInterfaceDeclaration {}

    /**
     * is implemented by <b>AnnotationTypeDeclaration</b>
     */
    export interface IAnnotationTypeDeclaration extends IInterfaceDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>InterfaceModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>InterfaceModifier0
     *<li>InterfaceModifier1
     *<li>InterfaceModifier2
     *<li>InterfaceModifier3
     *<li>InterfaceModifier4
     *<li>InterfaceModifier5
     *</ul>
     *</b>
     */
    export interface IInterfaceModifiersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExtendsInterfaces0
     *<li>ExtendsInterfaces1
     *</ul>
     *</b>
     */
    export interface IExtendsInterfacesopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>InterfaceBody</b>
     */
    export interface IInterfaceBody extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>InterfaceModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>InterfaceModifier0
     *<li>InterfaceModifier1
     *<li>InterfaceModifier2
     *<li>InterfaceModifier3
     *<li>InterfaceModifier4
     *<li>InterfaceModifier5
     *</ul>
     *</b>
     */
    export interface IInterfaceModifiers extends IInterfaceModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>InterfaceModifier0
     *<li>InterfaceModifier1
     *<li>InterfaceModifier2
     *<li>InterfaceModifier3
     *<li>InterfaceModifier4
     *<li>InterfaceModifier5
     *</ul>
     *</b>
     */
    export interface IInterfaceModifier extends IInterfaceModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExtendsInterfaces0
     *<li>ExtendsInterfaces1
     *</ul>
     *</b>
     */
    export interface IExtendsInterfaces extends IExtendsInterfacesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclarations
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    export interface IInterfaceMemberDeclarationsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclarations
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    export interface IInterfaceMemberDeclarations extends IInterfaceMemberDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    export interface IInterfaceMemberDeclaration extends IInterfaceMemberDeclarations, IAstToken {}

    /**
     * is implemented by <b>ConstantDeclaration</b>
     */
    export interface IConstantDeclaration extends IInterfaceMemberDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by <b>AbstractMethodDeclaration</b>
     */
    export interface IAbstractMethodDeclaration extends IInterfaceMemberDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstantModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstantModifier0
     *<li>ConstantModifier1
     *<li>ConstantModifier2
     *</ul>
     *</b>
     */
    export interface IConstantModifiersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstantModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstantModifier0
     *<li>ConstantModifier1
     *<li>ConstantModifier2
     *</ul>
     *</b>
     */
    export interface IConstantModifiers extends IConstantModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstantModifier0
     *<li>ConstantModifier1
     *<li>ConstantModifier2
     *</ul>
     *</b>
     */
    export interface IConstantModifier extends IConstantModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AbstractMethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>AbstractMethodModifier0
     *<li>AbstractMethodModifier1
     *</ul>
     *</b>
     */
    export interface IAbstractMethodModifiersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AbstractMethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>AbstractMethodModifier0
     *<li>AbstractMethodModifier1
     *</ul>
     *</b>
     */
    export interface IAbstractMethodModifiers extends IAbstractMethodModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>AbstractMethodModifier0
     *<li>AbstractMethodModifier1
     *</ul>
     *</b>
     */
    export interface IAbstractMethodModifier extends IAbstractMethodModifiers, IAstToken {}

    /**
     * is implemented by <b>AnnotationTypeBody</b>
     */
    export interface IAnnotationTypeBody extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>ConstantDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>AnnotationTypeElementDeclarations
     *<li>AnnotationTypeElementDeclaration0
     *<li>AnnotationTypeElementDeclaration1
     *</ul>
     *</b>
     */
    export interface IAnnotationTypeElementDeclarationsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>ConstantDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>AnnotationTypeElementDeclarations
     *<li>AnnotationTypeElementDeclaration0
     *<li>AnnotationTypeElementDeclaration1
     *</ul>
     *</b>
     */
    export interface IAnnotationTypeElementDeclarations extends IAnnotationTypeElementDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>ConstantDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>AnnotationTypeElementDeclaration0
     *<li>AnnotationTypeElementDeclaration1
     *</ul>
     *</b>
     */
    export interface IAnnotationTypeElementDeclaration extends IAnnotationTypeElementDeclarations, IAstToken {}

    /**
     * is implemented by <b>DefaultValue</b>
     */
    export interface IDefaultValueopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>DefaultValue</b>
     */
    export interface IDefaultValue extends IDefaultValueopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>NormalAnnotation
     *<li>ElementValueArrayInitializer
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IElementValue extends IElementValues {}

    /**
     * is implemented by <b>NormalAnnotation</b>
     */
    export interface INormalAnnotation extends IAnnotation {}

    /**
     * is implemented by <b>MarkerAnnotation</b>
     */
    export interface IMarkerAnnotation extends IAnnotation {}

    /**
     * is implemented by <b>SingleElementAnnotation</b>
     */
    export interface ISingleElementAnnotation extends IAnnotation {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ElementValuePairs
     *<li>ElementValuePair
     *</ul>
     *</b>
     */
    export interface IElementValuePairsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ElementValuePairs
     *<li>ElementValuePair
     *</ul>
     *</b>
     */
    export interface IElementValuePairs extends IElementValuePairsopt {}

    /**
     * is implemented by <b>ElementValuePair</b>
     */
    export interface IElementValuePair extends IElementValuePairs {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    export interface ISimpleName extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IConditionalExpression extends IElementValue, IAssignmentExpression {}

    /**
     * is implemented by <b>ElementValueArrayInitializer</b>
     */
    export interface IElementValueArrayInitializer extends IElementValue {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>NormalAnnotation
     *<li>ElementValueArrayInitializer
     *<li>ElementValues
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IElementValuesopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>NormalAnnotation
     *<li>ElementValueArrayInitializer
     *<li>ElementValues
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IElementValues extends IElementValuesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArrayInitializer
     *<li>VariableInitializers
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IVariableInitializersopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArrayInitializer
     *<li>VariableInitializers
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IVariableInitializers extends IVariableInitializersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    export interface IBlockStatements extends IBlockStatementsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    export interface IBlockStatement extends IBlockStatements {}

    /**
     * is implemented by <b>LocalVariableDeclarationStatement</b>
     */
    export interface ILocalVariableDeclarationStatement extends IBlockStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Block
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    export interface IStatement extends IBlockStatement {}

    /**
     * is implemented by <b>LocalVariableDeclaration</b>
     */
    export interface ILocalVariableDeclaration extends IForInit {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Block
     *<li>EmptyStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>DoStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    export interface IStatementWithoutTrailingSubstatement extends IStatement, IStatementNoShortIf {}

    /**
     * is implemented by <b>LabeledStatement</b>
     */
    export interface ILabeledStatement extends IStatement {}

    /**
     * is implemented by <b>IfThenStatement</b>
     */
    export interface IIfThenStatement extends IStatement {}

    /**
     * is implemented by <b>IfThenElseStatement</b>
     */
    export interface IIfThenElseStatement extends IStatement {}

    /**
     * is implemented by <b>WhileStatement</b>
     */
    export interface IWhileStatement extends IStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *</ul>
     *</b>
     */
    export interface IForStatement extends IStatement {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>EmptyStatement</b>
     */
    export interface IEmptyStatement extends IStatementWithoutTrailingSubstatement, IAstToken {}

    /**
     * is implemented by <b>ExpressionStatement</b>
     */
    export interface IExpressionStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AssertStatement0
     *<li>AssertStatement1
     *</ul>
     *</b>
     */
    export interface IAssertStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>SwitchStatement</b>
     */
    export interface ISwitchStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>DoStatement</b>
     */
    export interface IDoStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>BreakStatement</b>
     */
    export interface IBreakStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>ContinueStatement</b>
     */
    export interface IContinueStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>ReturnStatement</b>
     */
    export interface IReturnStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>SynchronizedStatement</b>
     */
    export interface ISynchronizedStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>ThrowStatement</b>
     */
    export interface IThrowStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    export interface ITryStatement extends IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Block
     *<li>IfThenElseStatementNoShortIf
     *<li>EmptyStatement
     *<li>LabeledStatementNoShortIf
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatementNoShortIf
     *<li>DoStatement
     *<li>ForStatementNoShortIf
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    export interface IStatementNoShortIf extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>LabeledStatementNoShortIf</b>
     */
    export interface ILabeledStatementNoShortIf extends IStatementNoShortIf {}

    /**
     * is implemented by <b>IfThenElseStatementNoShortIf</b>
     */
    export interface IIfThenElseStatementNoShortIf extends IStatementNoShortIf {}

    /**
     * is implemented by <b>WhileStatementNoShortIf</b>
     */
    export interface IWhileStatementNoShortIf extends IStatementNoShortIf {}

    /**
     * is implemented by <b>ForStatementNoShortIf</b>
     */
    export interface IForStatementNoShortIf extends IStatementNoShortIf {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    export interface IStatementExpression extends IStatementExpressionList {}

    /**
     * is implemented by <b>Assignment</b>
     */
    export interface IAssignment extends IStatementExpression, IAssignmentExpression {}

    /**
     * is implemented by <b>PreIncrementExpression</b>
     */
    export interface IPreIncrementExpression extends IStatementExpression, IUnaryExpression {}

    /**
     * is implemented by <b>PreDecrementExpression</b>
     */
    export interface IPreDecrementExpression extends IStatementExpression, IUnaryExpression {}

    /**
     * is implemented by <b>PostIncrementExpression</b>
     */
    export interface IPostIncrementExpression extends IStatementExpression, IPostfixExpression {}

    /**
     * is implemented by <b>PostDecrementExpression</b>
     */
    export interface IPostDecrementExpression extends IStatementExpression, IPostfixExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    export interface IMethodInvocation extends IStatementExpression, IPrimaryNoNewArray {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *</ul>
     *</b>
     */
    export interface IClassInstanceCreationExpression extends IStatementExpression, IPrimaryNoNewArray {}

    /**
     * is implemented by <b>SwitchBlock</b>
     */
    export interface ISwitchBlock extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchBlockStatementGroups
     *<li>SwitchBlockStatementGroup
     *</ul>
     *</b>
     */
    export interface ISwitchBlockStatementGroupsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchLabels
     *<li>SwitchLabel0
     *<li>SwitchLabel1
     *<li>SwitchLabel2
     *</ul>
     *</b>
     */
    export interface ISwitchLabelsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchBlockStatementGroups
     *<li>SwitchBlockStatementGroup
     *</ul>
     *</b>
     */
    export interface ISwitchBlockStatementGroups extends ISwitchBlockStatementGroupsopt {}

    /**
     * is implemented by <b>SwitchBlockStatementGroup</b>
     */
    export interface ISwitchBlockStatementGroup extends ISwitchBlockStatementGroups {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchLabels
     *<li>SwitchLabel0
     *<li>SwitchLabel1
     *<li>SwitchLabel2
     *</ul>
     *</b>
     */
    export interface ISwitchLabels extends ISwitchLabelsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchLabel0
     *<li>SwitchLabel1
     *<li>SwitchLabel2
     *</ul>
     *</b>
     */
    export interface ISwitchLabel extends ISwitchLabels {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IConstantExpression extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>BasicForStatement</b>
     */
    export interface IBasicForStatement extends IForStatement {}

    /**
     * is implemented by <b>EnhancedForStatement</b>
     */
    export interface IEnhancedForStatement extends IForStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>LocalVariableDeclaration
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    export interface IForInitopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IExpressionopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    export interface IForUpdateopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>LocalVariableDeclaration
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    export interface IForInit extends IForInitopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    export interface IStatementExpressionList extends IForInit, IForUpdate {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    export interface IForUpdate extends IForUpdateopt {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    export interface Iidentifieropt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Catches
     *<li>CatchClause
     *</ul>
     *</b>
     */
    export interface ICatches extends ICatchesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Catches
     *<li>CatchClause
     *</ul>
     *</b>
     */
    export interface ICatchesopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Finally</b>
     */
    export interface IFinally extends IRootForJavaParser    {
    }

    /**
     * is implemented by <b>CatchClause</b>
     */
    export interface ICatchClause extends ICatches {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    export interface IPrimaryNoNewArray extends IPrimary, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *</ul>
     *</b>
     */
    export interface IArrayCreationExpression extends IPrimary {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *</ul>
     *</b>
     */
    export interface ILiteral extends IPrimaryNoNewArray, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *</ul>
     *</b>
     */
    export interface IFieldAccess extends IPrimaryNoNewArray, ILeftHandSide {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    export interface IArrayAccess extends IPrimaryNoNewArray, ILeftHandSide {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *</ul>
     *</b>
     */
    export interface IBooleanLiteral extends ILiteral, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArgumentList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IArgumentList extends IArgumentListopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>DimExprs
     *<li>DimExpr
     *</ul>
     *</b>
     */
    export interface IDimExprs extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Dims0
     *<li>Dims1
     *</ul>
     *</b>
     */
    export interface IDimsopt extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Dims0
     *<li>Dims1
     *</ul>
     *</b>
     */
    export interface IDims extends IDimsopt {}

    /**
     * is implemented by <b>DimExpr</b>
     */
    export interface IDimExpr extends IDimExprs {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    export interface IPostfixExpression extends IUnaryExpressionNotPlusMinus {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *</ul>
     *</b>
     */
    export interface IUnaryExpression extends IMultiplicativeExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *</ul>
     *</b>
     */
    export interface IUnaryExpressionNotPlusMinus extends IUnaryExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>CastExpression0
     *<li>CastExpression1
     *</ul>
     *</b>
     */
    export interface ICastExpression extends IUnaryExpressionNotPlusMinus {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *</ul>
     *</b>
     */
    export interface IMultiplicativeExpression extends IAdditiveExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *</ul>
     *</b>
     */
    export interface IAdditiveExpression extends IShiftExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *</ul>
     *</b>
     */
    export interface IShiftExpression extends IRelationalExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *</ul>
     *</b>
     */
    export interface IRelationalExpression extends IEqualityExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IEqualityExpression extends IAndExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IAndExpression extends IExclusiveOrExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IExclusiveOrExpression extends IInclusiveOrExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IInclusiveOrExpression extends IConditionalAndExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IConditionalAndExpression extends IConditionalOrExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IConditionalOrExpression extends IConditionalExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    export interface IAssignmentExpression extends IExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    export interface ILeftHandSide extends IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AssignmentOperator0
     *<li>AssignmentOperator1
     *<li>AssignmentOperator2
     *<li>AssignmentOperator3
     *<li>AssignmentOperator4
     *<li>AssignmentOperator5
     *<li>AssignmentOperator6
     *<li>AssignmentOperator7
     *<li>AssignmentOperator8
     *<li>AssignmentOperator9
     *<li>AssignmentOperator10
     *<li>AssignmentOperator11
     *</ul>
     *</b>
     */
    export interface IAssignmentOperator extends IAstToken {}

    /**
     *<b>
    *<li>Rule 3:  identifier ::= IDENTIFIER
     *</b>
     */
    export class identifier extends AstToken implements Iidentifier
    {
        private  environment : JavaParser;
        public  getEnvironment() :JavaParser{ return this.environment; }

        public  getIDENTIFIER() : IToken { return this.leftIToken; }

    constructor(environment : JavaParser, token : IToken )        {
            super(token)
            this.environment = environment;
            this.initialize();
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitidentifier(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitidentifier(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitidentifier(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitidentifier(this, o); }
    }

    /**
     *<em>
    *<li>Rule 12:  PrimitiveType ::= NumericType
     *</em>
     *<p>
     *<b>
    *<li>Rule 13:  PrimitiveType ::= boolean
     *</b>
     */
    export class PrimitiveType extends AstToken implements IPrimitiveType
    {
        public  getboolean() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPrimitiveType(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPrimitiveType(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPrimitiveType(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPrimitiveType(this, o); }
    }

    /**
     *<b>
    *<li>Rule 27:  ClassType ::= TypeName TypeArgumentsopt
     *</b>
     */
    export class ClassType extends Ast implements IClassType
    {
        private  _TypeName : ITypeName;
        private  _TypeArgumentsopt : TypeArguments| null;

        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeName : ITypeName,
                     _TypeArgumentsopt : TypeArguments| null)
        {
            super(leftIToken, rightIToken)

            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeName)  list.add(this._TypeName);
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassType(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassType(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassType(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassType(this, o); }
    }

    /**
     *<b>
    *<li>Rule 28:  InterfaceType ::= TypeName TypeArgumentsopt
     *</b>
     */
    export class InterfaceType extends Ast implements IInterfaceType
    {
        private  _TypeName : ITypeName;
        private  _TypeArgumentsopt : TypeArguments| null;

        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeName : ITypeName,
                     _TypeArgumentsopt : TypeArguments| null)
        {
            super(leftIToken, rightIToken)

            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeName)  list.add(this._TypeName);
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceType(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceType(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceType(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceType(this, o); }
    }

    /**
     *<em>
    *<li>Rule 29:  TypeName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 30:  TypeName ::= TypeName . identifier
     *</b>
     */
    export class TypeName extends Ast implements ITypeName
    {
        private  _TypeName : ITypeName;
        private  _DOT : AstToken;
        private  _identifier : identifier;

        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeName : ITypeName,
                     _DOT : AstToken,
                     _identifier : identifier)
        {
            super(leftIToken, rightIToken)

            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeName)  list.add(this._TypeName);
            if(this._DOT)  list.add(this._DOT);
            if(this._identifier)  list.add(this._identifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTypeName(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTypeName(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTypeName(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTypeName(this, o); }
    }

    /**
     *<b>
    *<li>Rule 33:  ArrayType ::= Type [ ]
     *</b>
     */
    export class ArrayType extends Ast implements IArrayType
    {
        private  _Type : IType;
        private  _LBRACKET : AstToken;
        private  _RBRACKET : AstToken;

        public  getType() : IType{ return this._Type; }
        public  setType( _Type : IType) : void { this._Type = _Type; }
        public  getLBRACKET() : AstToken{ return this._LBRACKET; }
        public  setLBRACKET( _LBRACKET : AstToken) : void { this._LBRACKET = _LBRACKET; }
        public  getRBRACKET() : AstToken{ return this._RBRACKET; }
        public  setRBRACKET( _RBRACKET : AstToken) : void { this._RBRACKET = _RBRACKET; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Type : IType,
                     _LBRACKET : AstToken,
                     _RBRACKET : AstToken)
        {
            super(leftIToken, rightIToken)

            this._Type = _Type;
            (<Ast> _Type).setParent(this);
            this._LBRACKET = _LBRACKET;
            (<Ast> _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            (<Ast> _RBRACKET).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Type)  list.add(this._Type);
            if(this._LBRACKET)  list.add(this._LBRACKET);
            if(this._RBRACKET)  list.add(this._RBRACKET);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArrayType(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArrayType(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArrayType(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArrayType(this, o); }
    }

    /**
     *<b>
    *<li>Rule 34:  TypeParameter ::= TypeVariable TypeBoundopt
     *</b>
     */
    export class TypeParameter extends Ast implements ITypeParameter
    {
        private  _TypeVariable : identifier;
        private  _TypeBoundopt : TypeBound| null;

        public  getTypeVariable() : identifier{ return this._TypeVariable; }
        public  setTypeVariable( _TypeVariable : identifier) : void { this._TypeVariable = _TypeVariable; }
        /**
         * The value returned by <b>getTypeBoundopt</b> may be <b>null</b>
         */
        public  getTypeBoundopt() : TypeBound | null { return this._TypeBoundopt; }
        public  setTypeBoundopt( _TypeBoundopt : TypeBound) : void { this._TypeBoundopt = _TypeBoundopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeVariable : identifier,
                     _TypeBoundopt : TypeBound| null)
        {
            super(leftIToken, rightIToken)

            this._TypeVariable = _TypeVariable;
            (<Ast> _TypeVariable).setParent(this);
            this._TypeBoundopt = _TypeBoundopt;
            if (_TypeBoundopt) (<Ast> _TypeBoundopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeVariable)  list.add(this._TypeVariable);
            if(this._TypeBoundopt)  list.add(this._TypeBoundopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTypeParameter(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTypeParameter(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTypeParameter(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTypeParameter(this, o); }
    }

    /**
     *<b>
    *<li>Rule 35:  TypeBound ::= extends ClassOrInterfaceType AdditionalBoundListopt
     *</b>
     */
    export class TypeBound extends Ast implements ITypeBound
    {
        private  _extends : AstToken;
        private  _ClassOrInterfaceType : ClassType;
        private  _AdditionalBoundListopt : IAdditionalBoundListopt| null;

        public  getextends() : AstToken{ return this._extends; }
        public  setextends( _extends : AstToken) : void { this._extends = _extends; }
        public  getClassOrInterfaceType() : ClassType{ return this._ClassOrInterfaceType; }
        public  setClassOrInterfaceType( _ClassOrInterfaceType : ClassType) : void { this._ClassOrInterfaceType = _ClassOrInterfaceType; }
        /**
         * The value returned by <b>getAdditionalBoundListopt</b> may be <b>null</b>
         */
        public  getAdditionalBoundListopt() : IAdditionalBoundListopt | null { return this._AdditionalBoundListopt; }
        public  setAdditionalBoundListopt( _AdditionalBoundListopt : IAdditionalBoundListopt) : void { this._AdditionalBoundListopt = _AdditionalBoundListopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _extends : AstToken,
                     _ClassOrInterfaceType : ClassType,
                     _AdditionalBoundListopt : IAdditionalBoundListopt| null)
        {
            super(leftIToken, rightIToken)

            this._extends = _extends;
            (<Ast> _extends).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            (<Ast> _ClassOrInterfaceType).setParent(this);
            this._AdditionalBoundListopt = _AdditionalBoundListopt;
            if (_AdditionalBoundListopt) (<Ast> _AdditionalBoundListopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._extends)  list.add(this._extends);
            if(this._ClassOrInterfaceType)  list.add(this._ClassOrInterfaceType);
            if(this._AdditionalBoundListopt)  list.add(this._AdditionalBoundListopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTypeBound(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTypeBound(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTypeBound(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTypeBound(this, o); }
    }

    /**
     *<em>
    *<li>Rule 36:  AdditionalBoundList ::= AdditionalBound
     *</em>
     *<p>
     *<b>
    *<li>Rule 37:  AdditionalBoundList ::= AdditionalBoundList AdditionalBound
     *</b>
     */
    export class AdditionalBoundList extends Ast implements IAdditionalBoundList
    {
        private  _AdditionalBoundList : IAdditionalBoundList;
        private  _AdditionalBound : AdditionalBound;

        public  getAdditionalBoundList() : IAdditionalBoundList{ return this._AdditionalBoundList; }
        public  setAdditionalBoundList( _AdditionalBoundList : IAdditionalBoundList) : void { this._AdditionalBoundList = _AdditionalBoundList; }
        public  getAdditionalBound() : AdditionalBound{ return this._AdditionalBound; }
        public  setAdditionalBound( _AdditionalBound : AdditionalBound) : void { this._AdditionalBound = _AdditionalBound; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AdditionalBoundList : IAdditionalBoundList,
                     _AdditionalBound : AdditionalBound)
        {
            super(leftIToken, rightIToken)

            this._AdditionalBoundList = _AdditionalBoundList;
            (<Ast> _AdditionalBoundList).setParent(this);
            this._AdditionalBound = _AdditionalBound;
            (<Ast> _AdditionalBound).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AdditionalBoundList)  list.add(this._AdditionalBoundList);
            if(this._AdditionalBound)  list.add(this._AdditionalBound);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAdditionalBoundList(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAdditionalBoundList(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAdditionalBoundList(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAdditionalBoundList(this, o); }
    }

    /**
     *<b>
    *<li>Rule 38:  AdditionalBound ::= & InterfaceType
     *</b>
     */
    export class AdditionalBound extends Ast implements IAdditionalBound
    {
        private  _AND : AstToken;
        private  _InterfaceType : InterfaceType;

        public  getAND() : AstToken{ return this._AND; }
        public  setAND( _AND : AstToken) : void { this._AND = _AND; }
        public  getInterfaceType() : InterfaceType{ return this._InterfaceType; }
        public  setInterfaceType( _InterfaceType : InterfaceType) : void { this._InterfaceType = _InterfaceType; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AND : AstToken,
                     _InterfaceType : InterfaceType)
        {
            super(leftIToken, rightIToken)

            this._AND = _AND;
            (<Ast> _AND).setParent(this);
            this._InterfaceType = _InterfaceType;
            (<Ast> _InterfaceType).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AND)  list.add(this._AND);
            if(this._InterfaceType)  list.add(this._InterfaceType);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAdditionalBound(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAdditionalBound(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAdditionalBound(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAdditionalBound(this, o); }
    }

    /**
     *<b>
    *<li>Rule 39:  TypeArguments ::= < ActualTypeArgumentList >
     *</b>
     */
    export class TypeArguments extends Ast implements ITypeArguments
    {
        private  _LESS : AstToken;
        private  _ActualTypeArgumentList : IActualTypeArgumentList;
        private  _GREATER : AstToken;

        public  getLESS() : AstToken{ return this._LESS; }
        public  setLESS( _LESS : AstToken) : void { this._LESS = _LESS; }
        public  getActualTypeArgumentList() : IActualTypeArgumentList{ return this._ActualTypeArgumentList; }
        public  setActualTypeArgumentList( _ActualTypeArgumentList : IActualTypeArgumentList) : void { this._ActualTypeArgumentList = _ActualTypeArgumentList; }
        public  getGREATER() : AstToken{ return this._GREATER; }
        public  setGREATER( _GREATER : AstToken) : void { this._GREATER = _GREATER; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LESS : AstToken,
                     _ActualTypeArgumentList : IActualTypeArgumentList,
                     _GREATER : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LESS = _LESS;
            (<Ast> _LESS).setParent(this);
            this._ActualTypeArgumentList = _ActualTypeArgumentList;
            (<Ast> _ActualTypeArgumentList).setParent(this);
            this._GREATER = _GREATER;
            (<Ast> _GREATER).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LESS)  list.add(this._LESS);
            if(this._ActualTypeArgumentList)  list.add(this._ActualTypeArgumentList);
            if(this._GREATER)  list.add(this._GREATER);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTypeArguments(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTypeArguments(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTypeArguments(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTypeArguments(this, o); }
    }

    /**
     *<em>
    *<li>Rule 40:  ActualTypeArgumentList ::= ActualTypeArgument
     *</em>
     *<p>
     *<b>
    *<li>Rule 41:  ActualTypeArgumentList ::= ActualTypeArgumentList , ActualTypeArgument
     *</b>
     */
    export class ActualTypeArgumentList extends Ast implements IActualTypeArgumentList
    {
        private  _ActualTypeArgumentList : IActualTypeArgumentList;
        private  _COMMA : AstToken;
        private  _ActualTypeArgument : IActualTypeArgument;

        public  getActualTypeArgumentList() : IActualTypeArgumentList{ return this._ActualTypeArgumentList; }
        public  setActualTypeArgumentList( _ActualTypeArgumentList : IActualTypeArgumentList) : void { this._ActualTypeArgumentList = _ActualTypeArgumentList; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getActualTypeArgument() : IActualTypeArgument{ return this._ActualTypeArgument; }
        public  setActualTypeArgument( _ActualTypeArgument : IActualTypeArgument) : void { this._ActualTypeArgument = _ActualTypeArgument; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ActualTypeArgumentList : IActualTypeArgumentList,
                     _COMMA : AstToken,
                     _ActualTypeArgument : IActualTypeArgument)
        {
            super(leftIToken, rightIToken)

            this._ActualTypeArgumentList = _ActualTypeArgumentList;
            (<Ast> _ActualTypeArgumentList).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._ActualTypeArgument = _ActualTypeArgument;
            (<Ast> _ActualTypeArgument).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ActualTypeArgumentList)  list.add(this._ActualTypeArgumentList);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._ActualTypeArgument)  list.add(this._ActualTypeArgument);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitActualTypeArgumentList(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitActualTypeArgumentList(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitActualTypeArgumentList(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitActualTypeArgumentList(this, o); }
    }

    /**
     *<b>
    *<li>Rule 44:  Wildcard ::= ? WildcardBoundsOpt
     *</b>
     */
    export class Wildcard extends Ast implements IWildcard
    {
        private  _QUESTION : AstToken;
        private  _WildcardBoundsOpt : IWildcardBoundsOpt| null;

        public  getQUESTION() : AstToken{ return this._QUESTION; }
        public  setQUESTION( _QUESTION : AstToken) : void { this._QUESTION = _QUESTION; }
        /**
         * The value returned by <b>getWildcardBoundsOpt</b> may be <b>null</b>
         */
        public  getWildcardBoundsOpt() : IWildcardBoundsOpt | null { return this._WildcardBoundsOpt; }
        public  setWildcardBoundsOpt( _WildcardBoundsOpt : IWildcardBoundsOpt) : void { this._WildcardBoundsOpt = _WildcardBoundsOpt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _QUESTION : AstToken,
                     _WildcardBoundsOpt : IWildcardBoundsOpt| null)
        {
            super(leftIToken, rightIToken)

            this._QUESTION = _QUESTION;
            (<Ast> _QUESTION).setParent(this);
            this._WildcardBoundsOpt = _WildcardBoundsOpt;
            if (_WildcardBoundsOpt) (<Ast> _WildcardBoundsOpt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._QUESTION)  list.add(this._QUESTION);
            if(this._WildcardBoundsOpt)  list.add(this._WildcardBoundsOpt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitWildcard(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitWildcard(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitWildcard(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitWildcard(this, o); }
    }

    /**
     *<em>
    *<li>Rule 47:  PackageName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 48:  PackageName ::= PackageName . identifier
     *</b>
     */
    export class PackageName extends Ast implements IPackageName
    {
        private  _PackageName : IPackageName;
        private  _DOT : AstToken;
        private  _identifier : identifier;

        public  getPackageName() : IPackageName{ return this._PackageName; }
        public  setPackageName( _PackageName : IPackageName) : void { this._PackageName = _PackageName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _PackageName : IPackageName,
                     _DOT : AstToken,
                     _identifier : identifier)
        {
            super(leftIToken, rightIToken)

            this._PackageName = _PackageName;
            (<Ast> _PackageName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._PackageName)  list.add(this._PackageName);
            if(this._DOT)  list.add(this._DOT);
            if(this._identifier)  list.add(this._identifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPackageName(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPackageName(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPackageName(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPackageName(this, o); }
    }

    /**
     *<em>
    *<li>Rule 49:  ExpressionName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 50:  ExpressionName ::= AmbiguousName . identifier
     *</b>
     */
    export class ExpressionName extends Ast implements IExpressionName
    {
        private  _AmbiguousName : IAmbiguousName;
        private  _DOT : AstToken;
        private  _identifier : identifier;

        public  getAmbiguousName() : IAmbiguousName{ return this._AmbiguousName; }
        public  setAmbiguousName( _AmbiguousName : IAmbiguousName) : void { this._AmbiguousName = _AmbiguousName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AmbiguousName : IAmbiguousName,
                     _DOT : AstToken,
                     _identifier : identifier)
        {
            super(leftIToken, rightIToken)

            this._AmbiguousName = _AmbiguousName;
            (<Ast> _AmbiguousName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AmbiguousName)  list.add(this._AmbiguousName);
            if(this._DOT)  list.add(this._DOT);
            if(this._identifier)  list.add(this._identifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitExpressionName(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitExpressionName(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitExpressionName(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitExpressionName(this, o); }
    }

    /**
     *<em>
    *<li>Rule 51:  MethodName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 52:  MethodName ::= AmbiguousName . identifier
     *</b>
     */
    export class MethodName extends Ast implements IMethodName
    {
        private  _AmbiguousName : IAmbiguousName;
        private  _DOT : AstToken;
        private  _identifier : identifier;

        public  getAmbiguousName() : IAmbiguousName{ return this._AmbiguousName; }
        public  setAmbiguousName( _AmbiguousName : IAmbiguousName) : void { this._AmbiguousName = _AmbiguousName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AmbiguousName : IAmbiguousName,
                     _DOT : AstToken,
                     _identifier : identifier)
        {
            super(leftIToken, rightIToken)

            this._AmbiguousName = _AmbiguousName;
            (<Ast> _AmbiguousName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AmbiguousName)  list.add(this._AmbiguousName);
            if(this._DOT)  list.add(this._DOT);
            if(this._identifier)  list.add(this._identifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodName(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodName(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodName(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodName(this, o); }
    }

    /**
     *<em>
    *<li>Rule 53:  PackageOrTypeName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 54:  PackageOrTypeName ::= PackageOrTypeName . identifier
     *</b>
     */
    export class PackageOrTypeName extends Ast implements IPackageOrTypeName
    {
        private  _PackageOrTypeName : IPackageOrTypeName;
        private  _DOT : AstToken;
        private  _identifier : identifier;

        public  getPackageOrTypeName() : IPackageOrTypeName{ return this._PackageOrTypeName; }
        public  setPackageOrTypeName( _PackageOrTypeName : IPackageOrTypeName) : void { this._PackageOrTypeName = _PackageOrTypeName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _PackageOrTypeName : IPackageOrTypeName,
                     _DOT : AstToken,
                     _identifier : identifier)
        {
            super(leftIToken, rightIToken)

            this._PackageOrTypeName = _PackageOrTypeName;
            (<Ast> _PackageOrTypeName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._PackageOrTypeName)  list.add(this._PackageOrTypeName);
            if(this._DOT)  list.add(this._DOT);
            if(this._identifier)  list.add(this._identifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPackageOrTypeName(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPackageOrTypeName(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPackageOrTypeName(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPackageOrTypeName(this, o); }
    }

    /**
     *<em>
    *<li>Rule 55:  AmbiguousName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 56:  AmbiguousName ::= AmbiguousName . identifier
     *</b>
     */
    export class AmbiguousName extends Ast implements IAmbiguousName
    {
        private  _AmbiguousName : IAmbiguousName;
        private  _DOT : AstToken;
        private  _identifier : identifier;

        public  getAmbiguousName() : IAmbiguousName{ return this._AmbiguousName; }
        public  setAmbiguousName( _AmbiguousName : IAmbiguousName) : void { this._AmbiguousName = _AmbiguousName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AmbiguousName : IAmbiguousName,
                     _DOT : AstToken,
                     _identifier : identifier)
        {
            super(leftIToken, rightIToken)

            this._AmbiguousName = _AmbiguousName;
            (<Ast> _AmbiguousName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AmbiguousName)  list.add(this._AmbiguousName);
            if(this._DOT)  list.add(this._DOT);
            if(this._identifier)  list.add(this._identifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAmbiguousName(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAmbiguousName(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAmbiguousName(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAmbiguousName(this, o); }
    }

    /**
     *<b>
    *<li>Rule 57:  CompilationUnit ::= PackageDeclarationopt ImportDeclarationsopt TypeDeclarationsopt
     *</b>
     */
    export class CompilationUnit extends Ast implements ICompilationUnit
    {
        private  _PackageDeclarationopt : PackageDeclaration| null;
        private  _ImportDeclarationsopt : IImportDeclarationsopt| null;
        private  _TypeDeclarationsopt : ITypeDeclarationsopt| null;

        /**
         * The value returned by <b>getPackageDeclarationopt</b> may be <b>null</b>
         */
        public  getPackageDeclarationopt() : PackageDeclaration | null { return this._PackageDeclarationopt; }
        public  setPackageDeclarationopt( _PackageDeclarationopt : PackageDeclaration) : void { this._PackageDeclarationopt = _PackageDeclarationopt; }
        /**
         * The value returned by <b>getImportDeclarationsopt</b> may be <b>null</b>
         */
        public  getImportDeclarationsopt() : IImportDeclarationsopt | null { return this._ImportDeclarationsopt; }
        public  setImportDeclarationsopt( _ImportDeclarationsopt : IImportDeclarationsopt) : void { this._ImportDeclarationsopt = _ImportDeclarationsopt; }
        /**
         * The value returned by <b>getTypeDeclarationsopt</b> may be <b>null</b>
         */
        public  getTypeDeclarationsopt() : ITypeDeclarationsopt | null { return this._TypeDeclarationsopt; }
        public  setTypeDeclarationsopt( _TypeDeclarationsopt : ITypeDeclarationsopt) : void { this._TypeDeclarationsopt = _TypeDeclarationsopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _PackageDeclarationopt : PackageDeclaration| null,
                     _ImportDeclarationsopt : IImportDeclarationsopt| null,
                     _TypeDeclarationsopt : ITypeDeclarationsopt| null)
        {
            super(leftIToken, rightIToken)

            this._PackageDeclarationopt = _PackageDeclarationopt;
            if (_PackageDeclarationopt) (<Ast> _PackageDeclarationopt).setParent(this);
            this._ImportDeclarationsopt = _ImportDeclarationsopt;
            if (_ImportDeclarationsopt) (<Ast> _ImportDeclarationsopt).setParent(this);
            this._TypeDeclarationsopt = _TypeDeclarationsopt;
            if (_TypeDeclarationsopt) (<Ast> _TypeDeclarationsopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._PackageDeclarationopt)  list.add(this._PackageDeclarationopt);
            if(this._ImportDeclarationsopt)  list.add(this._ImportDeclarationsopt);
            if(this._TypeDeclarationsopt)  list.add(this._TypeDeclarationsopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitCompilationUnit(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitCompilationUnit(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitCompilationUnit(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitCompilationUnit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 58:  ImportDeclarations ::= ImportDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 59:  ImportDeclarations ::= ImportDeclarations ImportDeclaration
     *</b>
     */
    export class ImportDeclarations extends Ast implements IImportDeclarations
    {
        private  _ImportDeclarations : IImportDeclarations;
        private  _ImportDeclaration : IImportDeclaration;

        public  getImportDeclarations() : IImportDeclarations{ return this._ImportDeclarations; }
        public  setImportDeclarations( _ImportDeclarations : IImportDeclarations) : void { this._ImportDeclarations = _ImportDeclarations; }
        public  getImportDeclaration() : IImportDeclaration{ return this._ImportDeclaration; }
        public  setImportDeclaration( _ImportDeclaration : IImportDeclaration) : void { this._ImportDeclaration = _ImportDeclaration; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ImportDeclarations : IImportDeclarations,
                     _ImportDeclaration : IImportDeclaration)
        {
            super(leftIToken, rightIToken)

            this._ImportDeclarations = _ImportDeclarations;
            (<Ast> _ImportDeclarations).setParent(this);
            this._ImportDeclaration = _ImportDeclaration;
            (<Ast> _ImportDeclaration).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ImportDeclarations)  list.add(this._ImportDeclarations);
            if(this._ImportDeclaration)  list.add(this._ImportDeclaration);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitImportDeclarations(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitImportDeclarations(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitImportDeclarations(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitImportDeclarations(this, o); }
    }

    /**
     *<em>
    *<li>Rule 60:  TypeDeclarations ::= TypeDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 61:  TypeDeclarations ::= TypeDeclarations TypeDeclaration
     *</b>
     */
    export class TypeDeclarations extends Ast implements ITypeDeclarations
    {
        private  _TypeDeclarations : ITypeDeclarations;
        private  _TypeDeclaration : ITypeDeclaration;

        public  getTypeDeclarations() : ITypeDeclarations{ return this._TypeDeclarations; }
        public  setTypeDeclarations( _TypeDeclarations : ITypeDeclarations) : void { this._TypeDeclarations = _TypeDeclarations; }
        public  getTypeDeclaration() : ITypeDeclaration{ return this._TypeDeclaration; }
        public  setTypeDeclaration( _TypeDeclaration : ITypeDeclaration) : void { this._TypeDeclaration = _TypeDeclaration; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeDeclarations : ITypeDeclarations,
                     _TypeDeclaration : ITypeDeclaration)
        {
            super(leftIToken, rightIToken)

            this._TypeDeclarations = _TypeDeclarations;
            (<Ast> _TypeDeclarations).setParent(this);
            this._TypeDeclaration = _TypeDeclaration;
            (<Ast> _TypeDeclaration).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeDeclarations)  list.add(this._TypeDeclarations);
            if(this._TypeDeclaration)  list.add(this._TypeDeclaration);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTypeDeclarations(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTypeDeclarations(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTypeDeclarations(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTypeDeclarations(this, o); }
    }

    /**
     *<b>
    *<li>Rule 62:  PackageDeclaration ::= Annotationsopt package PackageName ;
     *</b>
     */
    export class PackageDeclaration extends Ast implements IPackageDeclaration
    {
        private  _Annotationsopt : IAnnotationsopt| null;
        private  _package : AstToken;
        private  _PackageName : IPackageName;
        private  _SEMICOLON : AstToken;

        /**
         * The value returned by <b>getAnnotationsopt</b> may be <b>null</b>
         */
        public  getAnnotationsopt() : IAnnotationsopt | null { return this._Annotationsopt; }
        public  setAnnotationsopt( _Annotationsopt : IAnnotationsopt) : void { this._Annotationsopt = _Annotationsopt; }
        public  getpackage() : AstToken{ return this._package; }
        public  setpackage( _package : AstToken) : void { this._package = _package; }
        public  getPackageName() : IPackageName{ return this._PackageName; }
        public  setPackageName( _PackageName : IPackageName) : void { this._PackageName = _PackageName; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Annotationsopt : IAnnotationsopt| null,
                     _package : AstToken,
                     _PackageName : IPackageName,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._Annotationsopt = _Annotationsopt;
            if (_Annotationsopt) (<Ast> _Annotationsopt).setParent(this);
            this._package = _package;
            (<Ast> _package).setParent(this);
            this._PackageName = _PackageName;
            (<Ast> _PackageName).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Annotationsopt)  list.add(this._Annotationsopt);
            if(this._package)  list.add(this._package);
            if(this._PackageName)  list.add(this._PackageName);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPackageDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPackageDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPackageDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPackageDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 67:  SingleTypeImportDeclaration ::= import TypeName ;
     *</b>
     */
    export class SingleTypeImportDeclaration extends Ast implements ISingleTypeImportDeclaration
    {
        private  _import : AstToken;
        private  _TypeName : ITypeName;
        private  _SEMICOLON : AstToken;

        public  getimport() : AstToken{ return this._import; }
        public  setimport( _import : AstToken) : void { this._import = _import; }
        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _import : AstToken,
                     _TypeName : ITypeName,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._import = _import;
            (<Ast> _import).setParent(this);
            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._import)  list.add(this._import);
            if(this._TypeName)  list.add(this._TypeName);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSingleTypeImportDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSingleTypeImportDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSingleTypeImportDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSingleTypeImportDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 68:  TypeImportOnDemandDeclaration ::= import PackageOrTypeName . * ;
     *</b>
     */
    export class TypeImportOnDemandDeclaration extends Ast implements ITypeImportOnDemandDeclaration
    {
        private  _import : AstToken;
        private  _PackageOrTypeName : IPackageOrTypeName;
        private  _DOT : AstToken;
        private  _MULTIPLY : AstToken;
        private  _SEMICOLON : AstToken;

        public  getimport() : AstToken{ return this._import; }
        public  setimport( _import : AstToken) : void { this._import = _import; }
        public  getPackageOrTypeName() : IPackageOrTypeName{ return this._PackageOrTypeName; }
        public  setPackageOrTypeName( _PackageOrTypeName : IPackageOrTypeName) : void { this._PackageOrTypeName = _PackageOrTypeName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getMULTIPLY() : AstToken{ return this._MULTIPLY; }
        public  setMULTIPLY( _MULTIPLY : AstToken) : void { this._MULTIPLY = _MULTIPLY; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _import : AstToken,
                     _PackageOrTypeName : IPackageOrTypeName,
                     _DOT : AstToken,
                     _MULTIPLY : AstToken,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._import = _import;
            (<Ast> _import).setParent(this);
            this._PackageOrTypeName = _PackageOrTypeName;
            (<Ast> _PackageOrTypeName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._MULTIPLY = _MULTIPLY;
            (<Ast> _MULTIPLY).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._import)  list.add(this._import);
            if(this._PackageOrTypeName)  list.add(this._PackageOrTypeName);
            if(this._DOT)  list.add(this._DOT);
            if(this._MULTIPLY)  list.add(this._MULTIPLY);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTypeImportOnDemandDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTypeImportOnDemandDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTypeImportOnDemandDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTypeImportOnDemandDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 69:  SingleStaticImportDeclaration ::= import static TypeName . identifier ;
     *</b>
     */
    export class SingleStaticImportDeclaration extends Ast implements ISingleStaticImportDeclaration
    {
        private  _import : AstToken;
        private  _static : AstToken;
        private  _TypeName : ITypeName;
        private  _DOT : AstToken;
        private  _identifier : identifier;
        private  _SEMICOLON : AstToken;

        public  getimport() : AstToken{ return this._import; }
        public  setimport( _import : AstToken) : void { this._import = _import; }
        public  getstatic() : AstToken{ return this._static; }
        public  setstatic( _static : AstToken) : void { this._static = _static; }
        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _import : AstToken,
                     _static : AstToken,
                     _TypeName : ITypeName,
                     _DOT : AstToken,
                     _identifier : identifier,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._import = _import;
            (<Ast> _import).setParent(this);
            this._static = _static;
            (<Ast> _static).setParent(this);
            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._import)  list.add(this._import);
            if(this._static)  list.add(this._static);
            if(this._TypeName)  list.add(this._TypeName);
            if(this._DOT)  list.add(this._DOT);
            if(this._identifier)  list.add(this._identifier);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSingleStaticImportDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSingleStaticImportDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSingleStaticImportDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSingleStaticImportDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 70:  StaticImportOnDemandDeclaration ::= import static TypeName . * ;
     *</b>
     */
    export class StaticImportOnDemandDeclaration extends Ast implements IStaticImportOnDemandDeclaration
    {
        private  _import : AstToken;
        private  _static : AstToken;
        private  _TypeName : ITypeName;
        private  _DOT : AstToken;
        private  _MULTIPLY : AstToken;
        private  _SEMICOLON : AstToken;

        public  getimport() : AstToken{ return this._import; }
        public  setimport( _import : AstToken) : void { this._import = _import; }
        public  getstatic() : AstToken{ return this._static; }
        public  setstatic( _static : AstToken) : void { this._static = _static; }
        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getMULTIPLY() : AstToken{ return this._MULTIPLY; }
        public  setMULTIPLY( _MULTIPLY : AstToken) : void { this._MULTIPLY = _MULTIPLY; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _import : AstToken,
                     _static : AstToken,
                     _TypeName : ITypeName,
                     _DOT : AstToken,
                     _MULTIPLY : AstToken,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._import = _import;
            (<Ast> _import).setParent(this);
            this._static = _static;
            (<Ast> _static).setParent(this);
            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._MULTIPLY = _MULTIPLY;
            (<Ast> _MULTIPLY).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._import)  list.add(this._import);
            if(this._static)  list.add(this._static);
            if(this._TypeName)  list.add(this._TypeName);
            if(this._DOT)  list.add(this._DOT);
            if(this._MULTIPLY)  list.add(this._MULTIPLY);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitStaticImportOnDemandDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitStaticImportOnDemandDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitStaticImportOnDemandDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitStaticImportOnDemandDeclaration(this, o); }
    }

    /**
     *<em>
    *<li>Rule 71:  TypeDeclaration ::= ClassDeclaration
    *<li>Rule 72:  TypeDeclaration ::= InterfaceDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 73:  TypeDeclaration ::= ;
     *</b>
     */
    export class TypeDeclaration extends AstToken implements ITypeDeclaration
    {
        public  getSEMICOLON() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTypeDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTypeDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTypeDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTypeDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 76:  NormalClassDeclaration ::= ClassModifiersopt class identifier TypeParametersopt Superopt Interfacesopt ClassBody
     *</b>
     */
    export class NormalClassDeclaration extends Ast implements INormalClassDeclaration
    {
        private  _ClassModifiersopt : IClassModifiersopt| null;
        private  _class : AstToken;
        private  _identifier : identifier;
        private  _TypeParametersopt : TypeParameters| null;
        private  _Superopt : Super| null;
        private  _Interfacesopt : Interfaces| null;
        private  _ClassBody : ClassBody;

        /**
         * The value returned by <b>getClassModifiersopt</b> may be <b>null</b>
         */
        public  getClassModifiersopt() : IClassModifiersopt | null { return this._ClassModifiersopt; }
        public  setClassModifiersopt( _ClassModifiersopt : IClassModifiersopt) : void { this._ClassModifiersopt = _ClassModifiersopt; }
        public  getclass() : AstToken{ return this._class; }
        public  setclass( _class : AstToken) : void { this._class = _class; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public  getTypeParametersopt() : TypeParameters | null { return this._TypeParametersopt; }
        public  setTypeParametersopt( _TypeParametersopt : TypeParameters) : void { this._TypeParametersopt = _TypeParametersopt; }
        /**
         * The value returned by <b>getSuperopt</b> may be <b>null</b>
         */
        public  getSuperopt() : Super | null { return this._Superopt; }
        public  setSuperopt( _Superopt : Super) : void { this._Superopt = _Superopt; }
        /**
         * The value returned by <b>getInterfacesopt</b> may be <b>null</b>
         */
        public  getInterfacesopt() : Interfaces | null { return this._Interfacesopt; }
        public  setInterfacesopt( _Interfacesopt : Interfaces) : void { this._Interfacesopt = _Interfacesopt; }
        public  getClassBody() : ClassBody{ return this._ClassBody; }
        public  setClassBody( _ClassBody : ClassBody) : void { this._ClassBody = _ClassBody; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ClassModifiersopt : IClassModifiersopt| null,
                     _class : AstToken,
                     _identifier : identifier,
                     _TypeParametersopt : TypeParameters| null,
                     _Superopt : Super| null,
                     _Interfacesopt : Interfaces| null,
                     _ClassBody : ClassBody)
        {
            super(leftIToken, rightIToken)

            this._ClassModifiersopt = _ClassModifiersopt;
            if (_ClassModifiersopt) (<Ast> _ClassModifiersopt).setParent(this);
            this._class = _class;
            (<Ast> _class).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt) (<Ast> _TypeParametersopt).setParent(this);
            this._Superopt = _Superopt;
            if (_Superopt) (<Ast> _Superopt).setParent(this);
            this._Interfacesopt = _Interfacesopt;
            if (_Interfacesopt) (<Ast> _Interfacesopt).setParent(this);
            this._ClassBody = _ClassBody;
            (<Ast> _ClassBody).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ClassModifiersopt)  list.add(this._ClassModifiersopt);
            if(this._class)  list.add(this._class);
            if(this._identifier)  list.add(this._identifier);
            if(this._TypeParametersopt)  list.add(this._TypeParametersopt);
            if(this._Superopt)  list.add(this._Superopt);
            if(this._Interfacesopt)  list.add(this._Interfacesopt);
            if(this._ClassBody)  list.add(this._ClassBody);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitNormalClassDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitNormalClassDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitNormalClassDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitNormalClassDeclaration(this, o); }
    }

    /**
     *<em>
    *<li>Rule 77:  ClassModifiers ::= ClassModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 78:  ClassModifiers ::= ClassModifiers ClassModifier
     *</b>
     */
    export class ClassModifiers extends Ast implements IClassModifiers
    {
        private  _ClassModifiers : IClassModifiers;
        private  _ClassModifier : IClassModifier;

        public  getClassModifiers() : IClassModifiers{ return this._ClassModifiers; }
        public  setClassModifiers( _ClassModifiers : IClassModifiers) : void { this._ClassModifiers = _ClassModifiers; }
        public  getClassModifier() : IClassModifier{ return this._ClassModifier; }
        public  setClassModifier( _ClassModifier : IClassModifier) : void { this._ClassModifier = _ClassModifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ClassModifiers : IClassModifiers,
                     _ClassModifier : IClassModifier)
        {
            super(leftIToken, rightIToken)

            this._ClassModifiers = _ClassModifiers;
            (<Ast> _ClassModifiers).setParent(this);
            this._ClassModifier = _ClassModifier;
            (<Ast> _ClassModifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ClassModifiers)  list.add(this._ClassModifiers);
            if(this._ClassModifier)  list.add(this._ClassModifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassModifiers(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassModifiers(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassModifiers(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassModifiers(this, o); }
    }

    /**
     *<b>
    *<li>Rule 87:  TypeParameters ::= < TypeParameterList >
     *</b>
     */
    export class TypeParameters extends Ast implements ITypeParameters
    {
        private  _LESS : AstToken;
        private  _TypeParameterList : ITypeParameterList;
        private  _GREATER : AstToken;

        public  getLESS() : AstToken{ return this._LESS; }
        public  setLESS( _LESS : AstToken) : void { this._LESS = _LESS; }
        public  getTypeParameterList() : ITypeParameterList{ return this._TypeParameterList; }
        public  setTypeParameterList( _TypeParameterList : ITypeParameterList) : void { this._TypeParameterList = _TypeParameterList; }
        public  getGREATER() : AstToken{ return this._GREATER; }
        public  setGREATER( _GREATER : AstToken) : void { this._GREATER = _GREATER; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LESS : AstToken,
                     _TypeParameterList : ITypeParameterList,
                     _GREATER : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LESS = _LESS;
            (<Ast> _LESS).setParent(this);
            this._TypeParameterList = _TypeParameterList;
            (<Ast> _TypeParameterList).setParent(this);
            this._GREATER = _GREATER;
            (<Ast> _GREATER).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LESS)  list.add(this._LESS);
            if(this._TypeParameterList)  list.add(this._TypeParameterList);
            if(this._GREATER)  list.add(this._GREATER);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTypeParameters(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTypeParameters(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTypeParameters(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTypeParameters(this, o); }
    }

    /**
     *<em>
    *<li>Rule 88:  TypeParameterList ::= TypeParameter
     *</em>
     *<p>
     *<b>
    *<li>Rule 89:  TypeParameterList ::= TypeParameterList , TypeParameter
     *</b>
     */
    export class TypeParameterList extends Ast implements ITypeParameterList
    {
        private  _TypeParameterList : ITypeParameterList;
        private  _COMMA : AstToken;
        private  _TypeParameter : TypeParameter;

        public  getTypeParameterList() : ITypeParameterList{ return this._TypeParameterList; }
        public  setTypeParameterList( _TypeParameterList : ITypeParameterList) : void { this._TypeParameterList = _TypeParameterList; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getTypeParameter() : TypeParameter{ return this._TypeParameter; }
        public  setTypeParameter( _TypeParameter : TypeParameter) : void { this._TypeParameter = _TypeParameter; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeParameterList : ITypeParameterList,
                     _COMMA : AstToken,
                     _TypeParameter : TypeParameter)
        {
            super(leftIToken, rightIToken)

            this._TypeParameterList = _TypeParameterList;
            (<Ast> _TypeParameterList).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._TypeParameter = _TypeParameter;
            (<Ast> _TypeParameter).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeParameterList)  list.add(this._TypeParameterList);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._TypeParameter)  list.add(this._TypeParameter);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTypeParameterList(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTypeParameterList(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTypeParameterList(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTypeParameterList(this, o); }
    }

    /**
     *<b>
    *<li>Rule 90:  Super ::= extends ClassType
     *</b>
     */
    export class Super extends Ast implements ISuper
    {
        private  _extends : AstToken;
        private  _ClassType : ClassType;

        public  getextends() : AstToken{ return this._extends; }
        public  setextends( _extends : AstToken) : void { this._extends = _extends; }
        public  getClassType() : ClassType{ return this._ClassType; }
        public  setClassType( _ClassType : ClassType) : void { this._ClassType = _ClassType; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _extends : AstToken,
                     _ClassType : ClassType)
        {
            super(leftIToken, rightIToken)

            this._extends = _extends;
            (<Ast> _extends).setParent(this);
            this._ClassType = _ClassType;
            (<Ast> _ClassType).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._extends)  list.add(this._extends);
            if(this._ClassType)  list.add(this._ClassType);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSuper(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSuper(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSuper(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSuper(this, o); }
    }

    /**
     *<b>
    *<li>Rule 91:  Interfaces ::= implements InterfaceTypeList
     *</b>
     */
    export class Interfaces extends Ast implements IInterfaces
    {
        private  _implements : AstToken;
        private  _InterfaceTypeList : IInterfaceTypeList;

        public  getimplements() : AstToken{ return this._implements; }
        public  setimplements( _implements : AstToken) : void { this._implements = _implements; }
        public  getInterfaceTypeList() : IInterfaceTypeList{ return this._InterfaceTypeList; }
        public  setInterfaceTypeList( _InterfaceTypeList : IInterfaceTypeList) : void { this._InterfaceTypeList = _InterfaceTypeList; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _implements : AstToken,
                     _InterfaceTypeList : IInterfaceTypeList)
        {
            super(leftIToken, rightIToken)

            this._implements = _implements;
            (<Ast> _implements).setParent(this);
            this._InterfaceTypeList = _InterfaceTypeList;
            (<Ast> _InterfaceTypeList).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._implements)  list.add(this._implements);
            if(this._InterfaceTypeList)  list.add(this._InterfaceTypeList);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaces(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaces(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaces(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaces(this, o); }
    }

    /**
     *<em>
    *<li>Rule 92:  InterfaceTypeList ::= InterfaceType
     *</em>
     *<p>
     *<b>
    *<li>Rule 93:  InterfaceTypeList ::= InterfaceTypeList , InterfaceType
     *</b>
     */
    export class InterfaceTypeList extends Ast implements IInterfaceTypeList
    {
        private  _InterfaceTypeList : IInterfaceTypeList;
        private  _COMMA : AstToken;
        private  _InterfaceType : InterfaceType;

        public  getInterfaceTypeList() : IInterfaceTypeList{ return this._InterfaceTypeList; }
        public  setInterfaceTypeList( _InterfaceTypeList : IInterfaceTypeList) : void { this._InterfaceTypeList = _InterfaceTypeList; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getInterfaceType() : InterfaceType{ return this._InterfaceType; }
        public  setInterfaceType( _InterfaceType : InterfaceType) : void { this._InterfaceType = _InterfaceType; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _InterfaceTypeList : IInterfaceTypeList,
                     _COMMA : AstToken,
                     _InterfaceType : InterfaceType)
        {
            super(leftIToken, rightIToken)

            this._InterfaceTypeList = _InterfaceTypeList;
            (<Ast> _InterfaceTypeList).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._InterfaceType = _InterfaceType;
            (<Ast> _InterfaceType).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._InterfaceTypeList)  list.add(this._InterfaceTypeList);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._InterfaceType)  list.add(this._InterfaceType);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceTypeList(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceTypeList(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceTypeList(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceTypeList(this, o); }
    }

    /**
     *<b>
    *<li>Rule 94:  ClassBody ::= { ClassBodyDeclarationsopt }
     *</b>
     */
    export class ClassBody extends Ast implements IClassBody
    {
        private  _LBRACE : AstToken;
        private  _ClassBodyDeclarationsopt : IClassBodyDeclarationsopt| null;
        private  _RBRACE : AstToken;

        public  getLBRACE() : AstToken{ return this._LBRACE; }
        public  setLBRACE( _LBRACE : AstToken) : void { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getClassBodyDeclarationsopt</b> may be <b>null</b>
         */
        public  getClassBodyDeclarationsopt() : IClassBodyDeclarationsopt | null { return this._ClassBodyDeclarationsopt; }
        public  setClassBodyDeclarationsopt( _ClassBodyDeclarationsopt : IClassBodyDeclarationsopt) : void { this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt; }
        public  getRBRACE() : AstToken{ return this._RBRACE; }
        public  setRBRACE( _RBRACE : AstToken) : void { this._RBRACE = _RBRACE; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACE : AstToken,
                     _ClassBodyDeclarationsopt : IClassBodyDeclarationsopt| null,
                     _RBRACE : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACE = _LBRACE;
            (<Ast> _LBRACE).setParent(this);
            this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt;
            if (_ClassBodyDeclarationsopt) (<Ast> _ClassBodyDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            (<Ast> _RBRACE).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACE)  list.add(this._LBRACE);
            if(this._ClassBodyDeclarationsopt)  list.add(this._ClassBodyDeclarationsopt);
            if(this._RBRACE)  list.add(this._RBRACE);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassBody(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassBody(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassBody(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassBody(this, o); }
    }

    /**
     *<em>
    *<li>Rule 95:  ClassBodyDeclarations ::= ClassBodyDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 96:  ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration
     *</b>
     */
    export class ClassBodyDeclarations extends Ast implements IClassBodyDeclarations
    {
        private  _ClassBodyDeclarations : IClassBodyDeclarations;
        private  _ClassBodyDeclaration : IClassBodyDeclaration;

        public  getClassBodyDeclarations() : IClassBodyDeclarations{ return this._ClassBodyDeclarations; }
        public  setClassBodyDeclarations( _ClassBodyDeclarations : IClassBodyDeclarations) : void { this._ClassBodyDeclarations = _ClassBodyDeclarations; }
        public  getClassBodyDeclaration() : IClassBodyDeclaration{ return this._ClassBodyDeclaration; }
        public  setClassBodyDeclaration( _ClassBodyDeclaration : IClassBodyDeclaration) : void { this._ClassBodyDeclaration = _ClassBodyDeclaration; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ClassBodyDeclarations : IClassBodyDeclarations,
                     _ClassBodyDeclaration : IClassBodyDeclaration)
        {
            super(leftIToken, rightIToken)

            this._ClassBodyDeclarations = _ClassBodyDeclarations;
            (<Ast> _ClassBodyDeclarations).setParent(this);
            this._ClassBodyDeclaration = _ClassBodyDeclaration;
            (<Ast> _ClassBodyDeclaration).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ClassBodyDeclarations)  list.add(this._ClassBodyDeclarations);
            if(this._ClassBodyDeclaration)  list.add(this._ClassBodyDeclaration);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassBodyDeclarations(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassBodyDeclarations(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassBodyDeclarations(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassBodyDeclarations(this, o); }
    }

    /**
     *<em>
    *<li>Rule 101:  ClassMemberDeclaration ::= FieldDeclaration
    *<li>Rule 102:  ClassMemberDeclaration ::= MethodDeclaration
    *<li>Rule 103:  ClassMemberDeclaration ::= ClassDeclaration
    *<li>Rule 104:  ClassMemberDeclaration ::= InterfaceDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 105:  ClassMemberDeclaration ::= ;
     *</b>
     */
    export class ClassMemberDeclaration extends AstToken implements IClassMemberDeclaration
    {
        public  getSEMICOLON() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassMemberDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassMemberDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassMemberDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassMemberDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 106:  FieldDeclaration ::= FieldModifiersopt Type VariableDeclarators ;
     *</b>
     */
    export class FieldDeclaration extends Ast implements IFieldDeclaration
    {
        private  _FieldModifiersopt : IFieldModifiersopt| null;
        private  _Type : IType;
        private  _VariableDeclarators : IVariableDeclarators;
        private  _SEMICOLON : AstToken;

        /**
         * The value returned by <b>getFieldModifiersopt</b> may be <b>null</b>
         */
        public  getFieldModifiersopt() : IFieldModifiersopt | null { return this._FieldModifiersopt; }
        public  setFieldModifiersopt( _FieldModifiersopt : IFieldModifiersopt) : void { this._FieldModifiersopt = _FieldModifiersopt; }
        public  getType() : IType{ return this._Type; }
        public  setType( _Type : IType) : void { this._Type = _Type; }
        public  getVariableDeclarators() : IVariableDeclarators{ return this._VariableDeclarators; }
        public  setVariableDeclarators( _VariableDeclarators : IVariableDeclarators) : void { this._VariableDeclarators = _VariableDeclarators; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _FieldModifiersopt : IFieldModifiersopt| null,
                     _Type : IType,
                     _VariableDeclarators : IVariableDeclarators,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._FieldModifiersopt = _FieldModifiersopt;
            if (_FieldModifiersopt) (<Ast> _FieldModifiersopt).setParent(this);
            this._Type = _Type;
            (<Ast> _Type).setParent(this);
            this._VariableDeclarators = _VariableDeclarators;
            (<Ast> _VariableDeclarators).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._FieldModifiersopt)  list.add(this._FieldModifiersopt);
            if(this._Type)  list.add(this._Type);
            if(this._VariableDeclarators)  list.add(this._VariableDeclarators);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldDeclaration(this, o); }
    }

    /**
     *<em>
    *<li>Rule 107:  VariableDeclarators ::= VariableDeclarator
     *</em>
     *<p>
     *<b>
    *<li>Rule 108:  VariableDeclarators ::= VariableDeclarators , VariableDeclarator
     *</b>
     */
    export class VariableDeclarators extends Ast implements IVariableDeclarators
    {
        private  _VariableDeclarators : IVariableDeclarators;
        private  _COMMA : AstToken;
        private  _VariableDeclarator : IVariableDeclarator;

        public  getVariableDeclarators() : IVariableDeclarators{ return this._VariableDeclarators; }
        public  setVariableDeclarators( _VariableDeclarators : IVariableDeclarators) : void { this._VariableDeclarators = _VariableDeclarators; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getVariableDeclarator() : IVariableDeclarator{ return this._VariableDeclarator; }
        public  setVariableDeclarator( _VariableDeclarator : IVariableDeclarator) : void { this._VariableDeclarator = _VariableDeclarator; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _VariableDeclarators : IVariableDeclarators,
                     _COMMA : AstToken,
                     _VariableDeclarator : IVariableDeclarator)
        {
            super(leftIToken, rightIToken)

            this._VariableDeclarators = _VariableDeclarators;
            (<Ast> _VariableDeclarators).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._VariableDeclarator = _VariableDeclarator;
            (<Ast> _VariableDeclarator).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._VariableDeclarators)  list.add(this._VariableDeclarators);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._VariableDeclarator)  list.add(this._VariableDeclarator);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitVariableDeclarators(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitVariableDeclarators(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitVariableDeclarators(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitVariableDeclarators(this, o); }
    }

    /**
     *<em>
    *<li>Rule 109:  VariableDeclarator ::= VariableDeclaratorId
     *</em>
     *<p>
     *<b>
    *<li>Rule 110:  VariableDeclarator ::= VariableDeclaratorId = VariableInitializer
     *</b>
     */
    export class VariableDeclarator extends Ast implements IVariableDeclarator
    {
        private  _VariableDeclaratorId : IVariableDeclaratorId;
        private  _EQUAL : AstToken;
        private  _VariableInitializer : IVariableInitializer;

        public  getVariableDeclaratorId() : IVariableDeclaratorId{ return this._VariableDeclaratorId; }
        public  setVariableDeclaratorId( _VariableDeclaratorId : IVariableDeclaratorId) : void { this._VariableDeclaratorId = _VariableDeclaratorId; }
        public  getEQUAL() : AstToken{ return this._EQUAL; }
        public  setEQUAL( _EQUAL : AstToken) : void { this._EQUAL = _EQUAL; }
        public  getVariableInitializer() : IVariableInitializer{ return this._VariableInitializer; }
        public  setVariableInitializer( _VariableInitializer : IVariableInitializer) : void { this._VariableInitializer = _VariableInitializer; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _VariableDeclaratorId : IVariableDeclaratorId,
                     _EQUAL : AstToken,
                     _VariableInitializer : IVariableInitializer)
        {
            super(leftIToken, rightIToken)

            this._VariableDeclaratorId = _VariableDeclaratorId;
            (<Ast> _VariableDeclaratorId).setParent(this);
            this._EQUAL = _EQUAL;
            (<Ast> _EQUAL).setParent(this);
            this._VariableInitializer = _VariableInitializer;
            (<Ast> _VariableInitializer).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._VariableDeclaratorId)  list.add(this._VariableDeclaratorId);
            if(this._EQUAL)  list.add(this._EQUAL);
            if(this._VariableInitializer)  list.add(this._VariableInitializer);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitVariableDeclarator(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitVariableDeclarator(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitVariableDeclarator(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitVariableDeclarator(this, o); }
    }

    /**
     *<em>
    *<li>Rule 111:  VariableDeclaratorId ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 112:  VariableDeclaratorId ::= VariableDeclaratorId [ ]
     *</b>
     */
    export class VariableDeclaratorId extends Ast implements IVariableDeclaratorId
    {
        private  _VariableDeclaratorId : IVariableDeclaratorId;
        private  _LBRACKET : AstToken;
        private  _RBRACKET : AstToken;

        public  getVariableDeclaratorId() : IVariableDeclaratorId{ return this._VariableDeclaratorId; }
        public  setVariableDeclaratorId( _VariableDeclaratorId : IVariableDeclaratorId) : void { this._VariableDeclaratorId = _VariableDeclaratorId; }
        public  getLBRACKET() : AstToken{ return this._LBRACKET; }
        public  setLBRACKET( _LBRACKET : AstToken) : void { this._LBRACKET = _LBRACKET; }
        public  getRBRACKET() : AstToken{ return this._RBRACKET; }
        public  setRBRACKET( _RBRACKET : AstToken) : void { this._RBRACKET = _RBRACKET; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _VariableDeclaratorId : IVariableDeclaratorId,
                     _LBRACKET : AstToken,
                     _RBRACKET : AstToken)
        {
            super(leftIToken, rightIToken)

            this._VariableDeclaratorId = _VariableDeclaratorId;
            (<Ast> _VariableDeclaratorId).setParent(this);
            this._LBRACKET = _LBRACKET;
            (<Ast> _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            (<Ast> _RBRACKET).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._VariableDeclaratorId)  list.add(this._VariableDeclaratorId);
            if(this._LBRACKET)  list.add(this._LBRACKET);
            if(this._RBRACKET)  list.add(this._RBRACKET);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitVariableDeclaratorId(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitVariableDeclaratorId(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitVariableDeclaratorId(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitVariableDeclaratorId(this, o); }
    }

    /**
     *<em>
    *<li>Rule 115:  FieldModifiers ::= FieldModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 116:  FieldModifiers ::= FieldModifiers FieldModifier
     *</b>
     */
    export class FieldModifiers extends Ast implements IFieldModifiers
    {
        private  _FieldModifiers : IFieldModifiers;
        private  _FieldModifier : IFieldModifier;

        public  getFieldModifiers() : IFieldModifiers{ return this._FieldModifiers; }
        public  setFieldModifiers( _FieldModifiers : IFieldModifiers) : void { this._FieldModifiers = _FieldModifiers; }
        public  getFieldModifier() : IFieldModifier{ return this._FieldModifier; }
        public  setFieldModifier( _FieldModifier : IFieldModifier) : void { this._FieldModifier = _FieldModifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _FieldModifiers : IFieldModifiers,
                     _FieldModifier : IFieldModifier)
        {
            super(leftIToken, rightIToken)

            this._FieldModifiers = _FieldModifiers;
            (<Ast> _FieldModifiers).setParent(this);
            this._FieldModifier = _FieldModifier;
            (<Ast> _FieldModifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._FieldModifiers)  list.add(this._FieldModifiers);
            if(this._FieldModifier)  list.add(this._FieldModifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldModifiers(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldModifiers(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldModifiers(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldModifiers(this, o); }
    }

    /**
     *<b>
    *<li>Rule 125:  MethodDeclaration ::= MethodHeader MethodBody
     *</b>
     */
    export class MethodDeclaration extends Ast implements IMethodDeclaration
    {
        private  _MethodHeader : MethodHeader;
        private  _MethodBody : IMethodBody;

        public  getMethodHeader() : MethodHeader{ return this._MethodHeader; }
        public  setMethodHeader( _MethodHeader : MethodHeader) : void { this._MethodHeader = _MethodHeader; }
        public  getMethodBody() : IMethodBody{ return this._MethodBody; }
        public  setMethodBody( _MethodBody : IMethodBody) : void { this._MethodBody = _MethodBody; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MethodHeader : MethodHeader,
                     _MethodBody : IMethodBody)
        {
            super(leftIToken, rightIToken)

            this._MethodHeader = _MethodHeader;
            (<Ast> _MethodHeader).setParent(this);
            this._MethodBody = _MethodBody;
            (<Ast> _MethodBody).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MethodHeader)  list.add(this._MethodHeader);
            if(this._MethodBody)  list.add(this._MethodBody);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 126:  MethodHeader ::= MethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt
     *</b>
     */
    export class MethodHeader extends Ast implements IMethodHeader
    {
        private  _MethodModifiersopt : IMethodModifiersopt| null;
        private  _TypeParametersopt : TypeParameters| null;
        private  _ResultType : IResultType;
        private  _MethodDeclarator : IMethodDeclarator;
        private  _Throwsopt : Throws| null;

        /**
         * The value returned by <b>getMethodModifiersopt</b> may be <b>null</b>
         */
        public  getMethodModifiersopt() : IMethodModifiersopt | null { return this._MethodModifiersopt; }
        public  setMethodModifiersopt( _MethodModifiersopt : IMethodModifiersopt) : void { this._MethodModifiersopt = _MethodModifiersopt; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public  getTypeParametersopt() : TypeParameters | null { return this._TypeParametersopt; }
        public  setTypeParametersopt( _TypeParametersopt : TypeParameters) : void { this._TypeParametersopt = _TypeParametersopt; }
        public  getResultType() : IResultType{ return this._ResultType; }
        public  setResultType( _ResultType : IResultType) : void { this._ResultType = _ResultType; }
        public  getMethodDeclarator() : IMethodDeclarator{ return this._MethodDeclarator; }
        public  setMethodDeclarator( _MethodDeclarator : IMethodDeclarator) : void { this._MethodDeclarator = _MethodDeclarator; }
        /**
         * The value returned by <b>getThrowsopt</b> may be <b>null</b>
         */
        public  getThrowsopt() : Throws | null { return this._Throwsopt; }
        public  setThrowsopt( _Throwsopt : Throws) : void { this._Throwsopt = _Throwsopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MethodModifiersopt : IMethodModifiersopt| null,
                     _TypeParametersopt : TypeParameters| null,
                     _ResultType : IResultType,
                     _MethodDeclarator : IMethodDeclarator,
                     _Throwsopt : Throws| null)
        {
            super(leftIToken, rightIToken)

            this._MethodModifiersopt = _MethodModifiersopt;
            if (_MethodModifiersopt) (<Ast> _MethodModifiersopt).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt) (<Ast> _TypeParametersopt).setParent(this);
            this._ResultType = _ResultType;
            (<Ast> _ResultType).setParent(this);
            this._MethodDeclarator = _MethodDeclarator;
            (<Ast> _MethodDeclarator).setParent(this);
            this._Throwsopt = _Throwsopt;
            if (_Throwsopt) (<Ast> _Throwsopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MethodModifiersopt)  list.add(this._MethodModifiersopt);
            if(this._TypeParametersopt)  list.add(this._TypeParametersopt);
            if(this._ResultType)  list.add(this._ResultType);
            if(this._MethodDeclarator)  list.add(this._MethodDeclarator);
            if(this._Throwsopt)  list.add(this._Throwsopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodHeader(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodHeader(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodHeader(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodHeader(this, o); }
    }

    /**
     *<em>
    *<li>Rule 127:  ResultType ::= Type
     *</em>
     *<p>
     *<b>
    *<li>Rule 128:  ResultType ::= void
     *</b>
     */
    export class ResultType extends AstToken implements IResultType
    {
        public  getvoid() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitResultType(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitResultType(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitResultType(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitResultType(this, o); }
    }

    /**
     *<em>
    *<li>Rule 131:  FormalParameterList ::= LastFormalParameter
     *</em>
     *<p>
     *<b>
    *<li>Rule 132:  FormalParameterList ::= FormalParameters , LastFormalParameter
     *</b>
     */
    export class FormalParameterList extends Ast implements IFormalParameterList
    {
        private  _FormalParameters : IFormalParameters;
        private  _COMMA : AstToken;
        private  _LastFormalParameter : LastFormalParameter;

        public  getFormalParameters() : IFormalParameters{ return this._FormalParameters; }
        public  setFormalParameters( _FormalParameters : IFormalParameters) : void { this._FormalParameters = _FormalParameters; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getLastFormalParameter() : LastFormalParameter{ return this._LastFormalParameter; }
        public  setLastFormalParameter( _LastFormalParameter : LastFormalParameter) : void { this._LastFormalParameter = _LastFormalParameter; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _FormalParameters : IFormalParameters,
                     _COMMA : AstToken,
                     _LastFormalParameter : LastFormalParameter)
        {
            super(leftIToken, rightIToken)

            this._FormalParameters = _FormalParameters;
            (<Ast> _FormalParameters).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._LastFormalParameter = _LastFormalParameter;
            (<Ast> _LastFormalParameter).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._FormalParameters)  list.add(this._FormalParameters);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._LastFormalParameter)  list.add(this._LastFormalParameter);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFormalParameterList(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFormalParameterList(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFormalParameterList(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFormalParameterList(this, o); }
    }

    /**
     *<em>
    *<li>Rule 133:  FormalParameters ::= FormalParameter
     *</em>
     *<p>
     *<b>
    *<li>Rule 134:  FormalParameters ::= FormalParameters , FormalParameter
     *</b>
     */
    export class FormalParameters extends Ast implements IFormalParameters
    {
        private  _FormalParameters : IFormalParameters;
        private  _COMMA : AstToken;
        private  _FormalParameter : FormalParameter;

        public  getFormalParameters() : IFormalParameters{ return this._FormalParameters; }
        public  setFormalParameters( _FormalParameters : IFormalParameters) : void { this._FormalParameters = _FormalParameters; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getFormalParameter() : FormalParameter{ return this._FormalParameter; }
        public  setFormalParameter( _FormalParameter : FormalParameter) : void { this._FormalParameter = _FormalParameter; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _FormalParameters : IFormalParameters,
                     _COMMA : AstToken,
                     _FormalParameter : FormalParameter)
        {
            super(leftIToken, rightIToken)

            this._FormalParameters = _FormalParameters;
            (<Ast> _FormalParameters).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._FormalParameter = _FormalParameter;
            (<Ast> _FormalParameter).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._FormalParameters)  list.add(this._FormalParameters);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._FormalParameter)  list.add(this._FormalParameter);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFormalParameters(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFormalParameters(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFormalParameters(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFormalParameters(this, o); }
    }

    /**
     *<b>
    *<li>Rule 135:  FormalParameter ::= VariableModifiersopt Type VariableDeclaratorId
     *</b>
     */
    export class FormalParameter extends Ast implements IFormalParameter
    {
        private  _VariableModifiersopt : IVariableModifiersopt| null;
        private  _Type : IType;
        private  _VariableDeclaratorId : IVariableDeclaratorId;

        /**
         * The value returned by <b>getVariableModifiersopt</b> may be <b>null</b>
         */
        public  getVariableModifiersopt() : IVariableModifiersopt | null { return this._VariableModifiersopt; }
        public  setVariableModifiersopt( _VariableModifiersopt : IVariableModifiersopt) : void { this._VariableModifiersopt = _VariableModifiersopt; }
        public  getType() : IType{ return this._Type; }
        public  setType( _Type : IType) : void { this._Type = _Type; }
        public  getVariableDeclaratorId() : IVariableDeclaratorId{ return this._VariableDeclaratorId; }
        public  setVariableDeclaratorId( _VariableDeclaratorId : IVariableDeclaratorId) : void { this._VariableDeclaratorId = _VariableDeclaratorId; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _VariableModifiersopt : IVariableModifiersopt| null,
                     _Type : IType,
                     _VariableDeclaratorId : IVariableDeclaratorId)
        {
            super(leftIToken, rightIToken)

            this._VariableModifiersopt = _VariableModifiersopt;
            if (_VariableModifiersopt) (<Ast> _VariableModifiersopt).setParent(this);
            this._Type = _Type;
            (<Ast> _Type).setParent(this);
            this._VariableDeclaratorId = _VariableDeclaratorId;
            (<Ast> _VariableDeclaratorId).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._VariableModifiersopt)  list.add(this._VariableModifiersopt);
            if(this._Type)  list.add(this._Type);
            if(this._VariableDeclaratorId)  list.add(this._VariableDeclaratorId);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFormalParameter(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFormalParameter(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFormalParameter(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFormalParameter(this, o); }
    }

    /**
     *<em>
    *<li>Rule 136:  VariableModifiers ::= VariableModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 137:  VariableModifiers ::= VariableModifiers VariableModifier
     *</b>
     */
    export class VariableModifiers extends Ast implements IVariableModifiers
    {
        private  _VariableModifiers : IVariableModifiers;
        private  _VariableModifier : IVariableModifier;

        public  getVariableModifiers() : IVariableModifiers{ return this._VariableModifiers; }
        public  setVariableModifiers( _VariableModifiers : IVariableModifiers) : void { this._VariableModifiers = _VariableModifiers; }
        public  getVariableModifier() : IVariableModifier{ return this._VariableModifier; }
        public  setVariableModifier( _VariableModifier : IVariableModifier) : void { this._VariableModifier = _VariableModifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _VariableModifiers : IVariableModifiers,
                     _VariableModifier : IVariableModifier)
        {
            super(leftIToken, rightIToken)

            this._VariableModifiers = _VariableModifiers;
            (<Ast> _VariableModifiers).setParent(this);
            this._VariableModifier = _VariableModifier;
            (<Ast> _VariableModifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._VariableModifiers)  list.add(this._VariableModifiers);
            if(this._VariableModifier)  list.add(this._VariableModifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitVariableModifiers(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitVariableModifiers(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitVariableModifiers(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitVariableModifiers(this, o); }
    }

    /**
     *<em>
    *<li>Rule 139:  VariableModifier ::= Annotations
     *</em>
     *<p>
     *<b>
    *<li>Rule 138:  VariableModifier ::= final
     *</b>
     */
    export class VariableModifier extends AstToken implements IVariableModifier
    {
        public  getfinal() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitVariableModifier(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitVariableModifier(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitVariableModifier(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitVariableModifier(this, o); }
    }

    /**
     *<b>
    *<li>Rule 140:  LastFormalParameter ::= VariableModifiersopt Type ...opt VariableDeclaratorId
     *</b>
     */
    export class LastFormalParameter extends Ast implements ILastFormalParameter
    {
        private  _VariableModifiersopt : IVariableModifiersopt| null;
        private  _Type : IType;
        private  _Ellipsisopt : Ellipsisopt| null;
        private  _VariableDeclaratorId : IVariableDeclaratorId;

        /**
         * The value returned by <b>getVariableModifiersopt</b> may be <b>null</b>
         */
        public  getVariableModifiersopt() : IVariableModifiersopt | null { return this._VariableModifiersopt; }
        public  setVariableModifiersopt( _VariableModifiersopt : IVariableModifiersopt) : void { this._VariableModifiersopt = _VariableModifiersopt; }
        public  getType() : IType{ return this._Type; }
        public  setType( _Type : IType) : void { this._Type = _Type; }
        /**
         * The value returned by <b>getEllipsisopt</b> may be <b>null</b>
         */
        public  getEllipsisopt() : Ellipsisopt | null { return this._Ellipsisopt; }
        public  setEllipsisopt( _Ellipsisopt : Ellipsisopt) : void { this._Ellipsisopt = _Ellipsisopt; }
        public  getVariableDeclaratorId() : IVariableDeclaratorId{ return this._VariableDeclaratorId; }
        public  setVariableDeclaratorId( _VariableDeclaratorId : IVariableDeclaratorId) : void { this._VariableDeclaratorId = _VariableDeclaratorId; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _VariableModifiersopt : IVariableModifiersopt| null,
                     _Type : IType,
                     _Ellipsisopt : Ellipsisopt| null,
                     _VariableDeclaratorId : IVariableDeclaratorId)
        {
            super(leftIToken, rightIToken)

            this._VariableModifiersopt = _VariableModifiersopt;
            if (_VariableModifiersopt) (<Ast> _VariableModifiersopt).setParent(this);
            this._Type = _Type;
            (<Ast> _Type).setParent(this);
            this._Ellipsisopt = _Ellipsisopt;
            if (_Ellipsisopt) (<Ast> _Ellipsisopt).setParent(this);
            this._VariableDeclaratorId = _VariableDeclaratorId;
            (<Ast> _VariableDeclaratorId).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._VariableModifiersopt)  list.add(this._VariableModifiersopt);
            if(this._Type)  list.add(this._Type);
            if(this._Ellipsisopt)  list.add(this._Ellipsisopt);
            if(this._VariableDeclaratorId)  list.add(this._VariableDeclaratorId);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLastFormalParameter(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLastFormalParameter(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLastFormalParameter(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLastFormalParameter(this, o); }
    }

    /**
     *<em>
    *<li>Rule 141:  MethodModifiers ::= MethodModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 142:  MethodModifiers ::= MethodModifiers MethodModifier
     *</b>
     */
    export class MethodModifiers extends Ast implements IMethodModifiers
    {
        private  _MethodModifiers : IMethodModifiers;
        private  _MethodModifier : IMethodModifier;

        public  getMethodModifiers() : IMethodModifiers{ return this._MethodModifiers; }
        public  setMethodModifiers( _MethodModifiers : IMethodModifiers) : void { this._MethodModifiers = _MethodModifiers; }
        public  getMethodModifier() : IMethodModifier{ return this._MethodModifier; }
        public  setMethodModifier( _MethodModifier : IMethodModifier) : void { this._MethodModifier = _MethodModifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MethodModifiers : IMethodModifiers,
                     _MethodModifier : IMethodModifier)
        {
            super(leftIToken, rightIToken)

            this._MethodModifiers = _MethodModifiers;
            (<Ast> _MethodModifiers).setParent(this);
            this._MethodModifier = _MethodModifier;
            (<Ast> _MethodModifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MethodModifiers)  list.add(this._MethodModifiers);
            if(this._MethodModifier)  list.add(this._MethodModifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifiers(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifiers(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifiers(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifiers(this, o); }
    }

    /**
     *<b>
    *<li>Rule 153:  Throws ::= throws ExceptionTypeList
     *</b>
     */
    export class Throws extends Ast implements IThrows
    {
        private  _throws : AstToken;
        private  _ExceptionTypeList : IExceptionTypeList;

        public  getthrows() : AstToken{ return this._throws; }
        public  setthrows( _throws : AstToken) : void { this._throws = _throws; }
        public  getExceptionTypeList() : IExceptionTypeList{ return this._ExceptionTypeList; }
        public  setExceptionTypeList( _ExceptionTypeList : IExceptionTypeList) : void { this._ExceptionTypeList = _ExceptionTypeList; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _throws : AstToken,
                     _ExceptionTypeList : IExceptionTypeList)
        {
            super(leftIToken, rightIToken)

            this._throws = _throws;
            (<Ast> _throws).setParent(this);
            this._ExceptionTypeList = _ExceptionTypeList;
            (<Ast> _ExceptionTypeList).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._throws)  list.add(this._throws);
            if(this._ExceptionTypeList)  list.add(this._ExceptionTypeList);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitThrows(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitThrows(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitThrows(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitThrows(this, o); }
    }

    /**
     *<em>
    *<li>Rule 154:  ExceptionTypeList ::= ExceptionType
     *</em>
     *<p>
     *<b>
    *<li>Rule 155:  ExceptionTypeList ::= ExceptionTypeList , ExceptionType
     *</b>
     */
    export class ExceptionTypeList extends Ast implements IExceptionTypeList
    {
        private  _ExceptionTypeList : IExceptionTypeList;
        private  _COMMA : AstToken;
        private  _ExceptionType : IExceptionType;

        public  getExceptionTypeList() : IExceptionTypeList{ return this._ExceptionTypeList; }
        public  setExceptionTypeList( _ExceptionTypeList : IExceptionTypeList) : void { this._ExceptionTypeList = _ExceptionTypeList; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getExceptionType() : IExceptionType{ return this._ExceptionType; }
        public  setExceptionType( _ExceptionType : IExceptionType) : void { this._ExceptionType = _ExceptionType; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ExceptionTypeList : IExceptionTypeList,
                     _COMMA : AstToken,
                     _ExceptionType : IExceptionType)
        {
            super(leftIToken, rightIToken)

            this._ExceptionTypeList = _ExceptionTypeList;
            (<Ast> _ExceptionTypeList).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._ExceptionType = _ExceptionType;
            (<Ast> _ExceptionType).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ExceptionTypeList)  list.add(this._ExceptionTypeList);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._ExceptionType)  list.add(this._ExceptionType);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitExceptionTypeList(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitExceptionTypeList(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitExceptionTypeList(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitExceptionTypeList(this, o); }
    }

    /**
     *<em>
    *<li>Rule 158:  MethodBody ::= Block
     *</em>
     *<p>
     *<b>
    *<li>Rule 159:  MethodBody ::= ;
     *</b>
     */
    export class MethodBody extends AstToken implements IMethodBody
    {
        public  getSEMICOLON() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodBody(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodBody(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodBody(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodBody(this, o); }
    }

    /**
     *<b>
    *<li>Rule 161:  StaticInitializer ::= static Block
     *</b>
     */
    export class StaticInitializer extends Ast implements IStaticInitializer
    {
        private  _static : AstToken;
        private  _Block : Block;

        public  getstatic() : AstToken{ return this._static; }
        public  setstatic( _static : AstToken) : void { this._static = _static; }
        public  getBlock() : Block{ return this._Block; }
        public  setBlock( _Block : Block) : void { this._Block = _Block; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _static : AstToken,
                     _Block : Block)
        {
            super(leftIToken, rightIToken)

            this._static = _static;
            (<Ast> _static).setParent(this);
            this._Block = _Block;
            (<Ast> _Block).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._static)  list.add(this._static);
            if(this._Block)  list.add(this._Block);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitStaticInitializer(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitStaticInitializer(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitStaticInitializer(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitStaticInitializer(this, o); }
    }

    /**
     *<b>
    *<li>Rule 162:  ConstructorDeclaration ::= ConstructorModifiersopt ConstructorDeclarator Throwsopt ConstructorBody
     *</b>
     */
    export class ConstructorDeclaration extends Ast implements IConstructorDeclaration
    {
        private  _ConstructorModifiersopt : IConstructorModifiersopt| null;
        private  _ConstructorDeclarator : ConstructorDeclarator;
        private  _Throwsopt : Throws| null;
        private  _ConstructorBody : ConstructorBody;

        /**
         * The value returned by <b>getConstructorModifiersopt</b> may be <b>null</b>
         */
        public  getConstructorModifiersopt() : IConstructorModifiersopt | null { return this._ConstructorModifiersopt; }
        public  setConstructorModifiersopt( _ConstructorModifiersopt : IConstructorModifiersopt) : void { this._ConstructorModifiersopt = _ConstructorModifiersopt; }
        public  getConstructorDeclarator() : ConstructorDeclarator{ return this._ConstructorDeclarator; }
        public  setConstructorDeclarator( _ConstructorDeclarator : ConstructorDeclarator) : void { this._ConstructorDeclarator = _ConstructorDeclarator; }
        /**
         * The value returned by <b>getThrowsopt</b> may be <b>null</b>
         */
        public  getThrowsopt() : Throws | null { return this._Throwsopt; }
        public  setThrowsopt( _Throwsopt : Throws) : void { this._Throwsopt = _Throwsopt; }
        public  getConstructorBody() : ConstructorBody{ return this._ConstructorBody; }
        public  setConstructorBody( _ConstructorBody : ConstructorBody) : void { this._ConstructorBody = _ConstructorBody; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ConstructorModifiersopt : IConstructorModifiersopt| null,
                     _ConstructorDeclarator : ConstructorDeclarator,
                     _Throwsopt : Throws| null,
                     _ConstructorBody : ConstructorBody)
        {
            super(leftIToken, rightIToken)

            this._ConstructorModifiersopt = _ConstructorModifiersopt;
            if (_ConstructorModifiersopt) (<Ast> _ConstructorModifiersopt).setParent(this);
            this._ConstructorDeclarator = _ConstructorDeclarator;
            (<Ast> _ConstructorDeclarator).setParent(this);
            this._Throwsopt = _Throwsopt;
            if (_Throwsopt) (<Ast> _Throwsopt).setParent(this);
            this._ConstructorBody = _ConstructorBody;
            (<Ast> _ConstructorBody).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ConstructorModifiersopt)  list.add(this._ConstructorModifiersopt);
            if(this._ConstructorDeclarator)  list.add(this._ConstructorDeclarator);
            if(this._Throwsopt)  list.add(this._Throwsopt);
            if(this._ConstructorBody)  list.add(this._ConstructorBody);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstructorDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstructorDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstructorDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstructorDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 163:  ConstructorDeclarator ::= TypeParametersopt SimpleTypeName ( FormalParameterListopt )
     *</b>
     */
    export class ConstructorDeclarator extends Ast implements IConstructorDeclarator
    {
        private  _TypeParametersopt : TypeParameters| null;
        private  _SimpleTypeName : identifier;
        private  _LPAREN : AstToken;
        private  _FormalParameterListopt : IFormalParameterListopt| null;
        private  _RPAREN : AstToken;

        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public  getTypeParametersopt() : TypeParameters | null { return this._TypeParametersopt; }
        public  setTypeParametersopt( _TypeParametersopt : TypeParameters) : void { this._TypeParametersopt = _TypeParametersopt; }
        public  getSimpleTypeName() : identifier{ return this._SimpleTypeName; }
        public  setSimpleTypeName( _SimpleTypeName : identifier) : void { this._SimpleTypeName = _SimpleTypeName; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getFormalParameterListopt</b> may be <b>null</b>
         */
        public  getFormalParameterListopt() : IFormalParameterListopt | null { return this._FormalParameterListopt; }
        public  setFormalParameterListopt( _FormalParameterListopt : IFormalParameterListopt) : void { this._FormalParameterListopt = _FormalParameterListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeParametersopt : TypeParameters| null,
                     _SimpleTypeName : identifier,
                     _LPAREN : AstToken,
                     _FormalParameterListopt : IFormalParameterListopt| null,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt) (<Ast> _TypeParametersopt).setParent(this);
            this._SimpleTypeName = _SimpleTypeName;
            (<Ast> _SimpleTypeName).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._FormalParameterListopt = _FormalParameterListopt;
            if (_FormalParameterListopt) (<Ast> _FormalParameterListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeParametersopt)  list.add(this._TypeParametersopt);
            if(this._SimpleTypeName)  list.add(this._SimpleTypeName);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._FormalParameterListopt)  list.add(this._FormalParameterListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstructorDeclarator(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstructorDeclarator(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstructorDeclarator(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstructorDeclarator(this, o); }
    }

    /**
     *<em>
    *<li>Rule 165:  ConstructorModifiers ::= ConstructorModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 166:  ConstructorModifiers ::= ConstructorModifiers ConstructorModifier
     *</b>
     */
    export class ConstructorModifiers extends Ast implements IConstructorModifiers
    {
        private  _ConstructorModifiers : IConstructorModifiers;
        private  _ConstructorModifier : IConstructorModifier;

        public  getConstructorModifiers() : IConstructorModifiers{ return this._ConstructorModifiers; }
        public  setConstructorModifiers( _ConstructorModifiers : IConstructorModifiers) : void { this._ConstructorModifiers = _ConstructorModifiers; }
        public  getConstructorModifier() : IConstructorModifier{ return this._ConstructorModifier; }
        public  setConstructorModifier( _ConstructorModifier : IConstructorModifier) : void { this._ConstructorModifier = _ConstructorModifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ConstructorModifiers : IConstructorModifiers,
                     _ConstructorModifier : IConstructorModifier)
        {
            super(leftIToken, rightIToken)

            this._ConstructorModifiers = _ConstructorModifiers;
            (<Ast> _ConstructorModifiers).setParent(this);
            this._ConstructorModifier = _ConstructorModifier;
            (<Ast> _ConstructorModifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ConstructorModifiers)  list.add(this._ConstructorModifiers);
            if(this._ConstructorModifier)  list.add(this._ConstructorModifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstructorModifiers(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstructorModifiers(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstructorModifiers(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstructorModifiers(this, o); }
    }

    /**
     *<b>
    *<li>Rule 171:  ConstructorBody ::= { ExplicitConstructorInvocationopt BlockStatementsopt }
     *</b>
     */
    export class ConstructorBody extends Ast implements IConstructorBody
    {
        private  _LBRACE : AstToken;
        private  _ExplicitConstructorInvocationopt : IExplicitConstructorInvocationopt| null;
        private  _BlockStatementsopt : IBlockStatementsopt| null;
        private  _RBRACE : AstToken;

        public  getLBRACE() : AstToken{ return this._LBRACE; }
        public  setLBRACE( _LBRACE : AstToken) : void { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getExplicitConstructorInvocationopt</b> may be <b>null</b>
         */
        public  getExplicitConstructorInvocationopt() : IExplicitConstructorInvocationopt | null { return this._ExplicitConstructorInvocationopt; }
        public  setExplicitConstructorInvocationopt( _ExplicitConstructorInvocationopt : IExplicitConstructorInvocationopt) : void { this._ExplicitConstructorInvocationopt = _ExplicitConstructorInvocationopt; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public  getBlockStatementsopt() : IBlockStatementsopt | null { return this._BlockStatementsopt; }
        public  setBlockStatementsopt( _BlockStatementsopt : IBlockStatementsopt) : void { this._BlockStatementsopt = _BlockStatementsopt; }
        public  getRBRACE() : AstToken{ return this._RBRACE; }
        public  setRBRACE( _RBRACE : AstToken) : void { this._RBRACE = _RBRACE; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACE : AstToken,
                     _ExplicitConstructorInvocationopt : IExplicitConstructorInvocationopt| null,
                     _BlockStatementsopt : IBlockStatementsopt| null,
                     _RBRACE : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACE = _LBRACE;
            (<Ast> _LBRACE).setParent(this);
            this._ExplicitConstructorInvocationopt = _ExplicitConstructorInvocationopt;
            if (_ExplicitConstructorInvocationopt) (<Ast> _ExplicitConstructorInvocationopt).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt) (<Ast> _BlockStatementsopt).setParent(this);
            this._RBRACE = _RBRACE;
            (<Ast> _RBRACE).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACE)  list.add(this._LBRACE);
            if(this._ExplicitConstructorInvocationopt)  list.add(this._ExplicitConstructorInvocationopt);
            if(this._BlockStatementsopt)  list.add(this._BlockStatementsopt);
            if(this._RBRACE)  list.add(this._RBRACE);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstructorBody(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstructorBody(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstructorBody(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstructorBody(this, o); }
    }

    /**
     *<b>
    *<li>Rule 175:  EnumDeclaration ::= ClassModifiersopt enum identifier Interfacesopt EnumBody
     *</b>
     */
    export class EnumDeclaration extends Ast implements IEnumDeclaration
    {
        private  _ClassModifiersopt : IClassModifiersopt| null;
        private  _enum : AstToken;
        private  _identifier : identifier;
        private  _Interfacesopt : Interfaces| null;
        private  _EnumBody : EnumBody;

        /**
         * The value returned by <b>getClassModifiersopt</b> may be <b>null</b>
         */
        public  getClassModifiersopt() : IClassModifiersopt | null { return this._ClassModifiersopt; }
        public  setClassModifiersopt( _ClassModifiersopt : IClassModifiersopt) : void { this._ClassModifiersopt = _ClassModifiersopt; }
        public  getenum() : AstToken{ return this._enum; }
        public  setenum( _enum : AstToken) : void { this._enum = _enum; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        /**
         * The value returned by <b>getInterfacesopt</b> may be <b>null</b>
         */
        public  getInterfacesopt() : Interfaces | null { return this._Interfacesopt; }
        public  setInterfacesopt( _Interfacesopt : Interfaces) : void { this._Interfacesopt = _Interfacesopt; }
        public  getEnumBody() : EnumBody{ return this._EnumBody; }
        public  setEnumBody( _EnumBody : EnumBody) : void { this._EnumBody = _EnumBody; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ClassModifiersopt : IClassModifiersopt| null,
                     _enum : AstToken,
                     _identifier : identifier,
                     _Interfacesopt : Interfaces| null,
                     _EnumBody : EnumBody)
        {
            super(leftIToken, rightIToken)

            this._ClassModifiersopt = _ClassModifiersopt;
            if (_ClassModifiersopt) (<Ast> _ClassModifiersopt).setParent(this);
            this._enum = _enum;
            (<Ast> _enum).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._Interfacesopt = _Interfacesopt;
            if (_Interfacesopt) (<Ast> _Interfacesopt).setParent(this);
            this._EnumBody = _EnumBody;
            (<Ast> _EnumBody).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ClassModifiersopt)  list.add(this._ClassModifiersopt);
            if(this._enum)  list.add(this._enum);
            if(this._identifier)  list.add(this._identifier);
            if(this._Interfacesopt)  list.add(this._Interfacesopt);
            if(this._EnumBody)  list.add(this._EnumBody);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEnumDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEnumDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEnumDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEnumDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 176:  EnumBody ::= { EnumConstantsopt ,opt EnumBodyDeclarationsopt }
     *</b>
     */
    export class EnumBody extends Ast implements IEnumBody
    {
        private  _LBRACE : AstToken;
        private  _EnumConstantsopt : IEnumConstantsopt| null;
        private  _Commaopt : Commaopt| null;
        private  _EnumBodyDeclarationsopt : EnumBodyDeclarations| null;
        private  _RBRACE : AstToken;

        public  getLBRACE() : AstToken{ return this._LBRACE; }
        public  setLBRACE( _LBRACE : AstToken) : void { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getEnumConstantsopt</b> may be <b>null</b>
         */
        public  getEnumConstantsopt() : IEnumConstantsopt | null { return this._EnumConstantsopt; }
        public  setEnumConstantsopt( _EnumConstantsopt : IEnumConstantsopt) : void { this._EnumConstantsopt = _EnumConstantsopt; }
        /**
         * The value returned by <b>getCommaopt</b> may be <b>null</b>
         */
        public  getCommaopt() : Commaopt | null { return this._Commaopt; }
        public  setCommaopt( _Commaopt : Commaopt) : void { this._Commaopt = _Commaopt; }
        /**
         * The value returned by <b>getEnumBodyDeclarationsopt</b> may be <b>null</b>
         */
        public  getEnumBodyDeclarationsopt() : EnumBodyDeclarations | null { return this._EnumBodyDeclarationsopt; }
        public  setEnumBodyDeclarationsopt( _EnumBodyDeclarationsopt : EnumBodyDeclarations) : void { this._EnumBodyDeclarationsopt = _EnumBodyDeclarationsopt; }
        public  getRBRACE() : AstToken{ return this._RBRACE; }
        public  setRBRACE( _RBRACE : AstToken) : void { this._RBRACE = _RBRACE; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACE : AstToken,
                     _EnumConstantsopt : IEnumConstantsopt| null,
                     _Commaopt : Commaopt| null,
                     _EnumBodyDeclarationsopt : EnumBodyDeclarations| null,
                     _RBRACE : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACE = _LBRACE;
            (<Ast> _LBRACE).setParent(this);
            this._EnumConstantsopt = _EnumConstantsopt;
            if (_EnumConstantsopt) (<Ast> _EnumConstantsopt).setParent(this);
            this._Commaopt = _Commaopt;
            if (_Commaopt) (<Ast> _Commaopt).setParent(this);
            this._EnumBodyDeclarationsopt = _EnumBodyDeclarationsopt;
            if (_EnumBodyDeclarationsopt) (<Ast> _EnumBodyDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            (<Ast> _RBRACE).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACE)  list.add(this._LBRACE);
            if(this._EnumConstantsopt)  list.add(this._EnumConstantsopt);
            if(this._Commaopt)  list.add(this._Commaopt);
            if(this._EnumBodyDeclarationsopt)  list.add(this._EnumBodyDeclarationsopt);
            if(this._RBRACE)  list.add(this._RBRACE);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEnumBody(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEnumBody(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEnumBody(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEnumBody(this, o); }
    }

    /**
     *<em>
    *<li>Rule 177:  EnumConstants ::= EnumConstant
     *</em>
     *<p>
     *<b>
    *<li>Rule 178:  EnumConstants ::= EnumConstants , EnumConstant
     *</b>
     */
    export class EnumConstants extends Ast implements IEnumConstants
    {
        private  _EnumConstants : IEnumConstants;
        private  _COMMA : AstToken;
        private  _EnumConstant : IEnumConstant;

        public  getEnumConstants() : IEnumConstants{ return this._EnumConstants; }
        public  setEnumConstants( _EnumConstants : IEnumConstants) : void { this._EnumConstants = _EnumConstants; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getEnumConstant() : IEnumConstant{ return this._EnumConstant; }
        public  setEnumConstant( _EnumConstant : IEnumConstant) : void { this._EnumConstant = _EnumConstant; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _EnumConstants : IEnumConstants,
                     _COMMA : AstToken,
                     _EnumConstant : IEnumConstant)
        {
            super(leftIToken, rightIToken)

            this._EnumConstants = _EnumConstants;
            (<Ast> _EnumConstants).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._EnumConstant = _EnumConstant;
            (<Ast> _EnumConstant).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._EnumConstants)  list.add(this._EnumConstants);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._EnumConstant)  list.add(this._EnumConstant);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEnumConstants(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEnumConstants(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEnumConstants(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEnumConstants(this, o); }
    }

    /**
     *<em>
    *<li>Rule 307:  EnumConstant ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 179:  EnumConstant ::= Annotationsopt identifier Argumentsopt ClassBodyopt
     *</b>
     */
    export class EnumConstant extends Ast implements IEnumConstant
    {
        private  _Annotationsopt : IAnnotationsopt| null;
        private  _identifier : identifier;
        private  _Argumentsopt : Arguments| null;
        private  _ClassBodyopt : ClassBody| null;

        /**
         * The value returned by <b>getAnnotationsopt</b> may be <b>null</b>
         */
        public  getAnnotationsopt() : IAnnotationsopt | null { return this._Annotationsopt; }
        public  setAnnotationsopt( _Annotationsopt : IAnnotationsopt) : void { this._Annotationsopt = _Annotationsopt; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        /**
         * The value returned by <b>getArgumentsopt</b> may be <b>null</b>
         */
        public  getArgumentsopt() : Arguments | null { return this._Argumentsopt; }
        public  setArgumentsopt( _Argumentsopt : Arguments) : void { this._Argumentsopt = _Argumentsopt; }
        /**
         * The value returned by <b>getClassBodyopt</b> may be <b>null</b>
         */
        public  getClassBodyopt() : ClassBody | null { return this._ClassBodyopt; }
        public  setClassBodyopt( _ClassBodyopt : ClassBody) : void { this._ClassBodyopt = _ClassBodyopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Annotationsopt : IAnnotationsopt| null,
                     _identifier : identifier,
                     _Argumentsopt : Arguments| null,
                     _ClassBodyopt : ClassBody| null)
        {
            super(leftIToken, rightIToken)

            this._Annotationsopt = _Annotationsopt;
            if (_Annotationsopt) (<Ast> _Annotationsopt).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._Argumentsopt = _Argumentsopt;
            if (_Argumentsopt) (<Ast> _Argumentsopt).setParent(this);
            this._ClassBodyopt = _ClassBodyopt;
            if (_ClassBodyopt) (<Ast> _ClassBodyopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Annotationsopt)  list.add(this._Annotationsopt);
            if(this._identifier)  list.add(this._identifier);
            if(this._Argumentsopt)  list.add(this._Argumentsopt);
            if(this._ClassBodyopt)  list.add(this._ClassBodyopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEnumConstant(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEnumConstant(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEnumConstant(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEnumConstant(this, o); }
    }

    /**
     *<b>
    *<li>Rule 180:  Arguments ::= ( ArgumentListopt )
     *</b>
     */
    export class Arguments extends Ast implements IArguments
    {
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;

        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArguments(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArguments(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArguments(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArguments(this, o); }
    }

    /**
     *<b>
    *<li>Rule 181:  EnumBodyDeclarations ::= ; ClassBodyDeclarationsopt
     *</b>
     */
    export class EnumBodyDeclarations extends Ast implements IEnumBodyDeclarations
    {
        private  _SEMICOLON : AstToken;
        private  _ClassBodyDeclarationsopt : IClassBodyDeclarationsopt| null;

        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }
        /**
         * The value returned by <b>getClassBodyDeclarationsopt</b> may be <b>null</b>
         */
        public  getClassBodyDeclarationsopt() : IClassBodyDeclarationsopt | null { return this._ClassBodyDeclarationsopt; }
        public  setClassBodyDeclarationsopt( _ClassBodyDeclarationsopt : IClassBodyDeclarationsopt) : void { this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _SEMICOLON : AstToken,
                     _ClassBodyDeclarationsopt : IClassBodyDeclarationsopt| null)
        {
            super(leftIToken, rightIToken)

            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt;
            if (_ClassBodyDeclarationsopt) (<Ast> _ClassBodyDeclarationsopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            if(this._ClassBodyDeclarationsopt)  list.add(this._ClassBodyDeclarationsopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEnumBodyDeclarations(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEnumBodyDeclarations(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEnumBodyDeclarations(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEnumBodyDeclarations(this, o); }
    }

    /**
     *<b>
    *<li>Rule 184:  NormalInterfaceDeclaration ::= InterfaceModifiersopt interface identifier TypeParametersopt ExtendsInterfacesopt InterfaceBody
     *</b>
     */
    export class NormalInterfaceDeclaration extends Ast implements INormalInterfaceDeclaration
    {
        private  _InterfaceModifiersopt : IInterfaceModifiersopt| null;
        private  _interface : AstToken;
        private  _identifier : identifier;
        private  _TypeParametersopt : TypeParameters| null;
        private  _ExtendsInterfacesopt : IExtendsInterfacesopt| null;
        private  _InterfaceBody : InterfaceBody;

        /**
         * The value returned by <b>getInterfaceModifiersopt</b> may be <b>null</b>
         */
        public  getInterfaceModifiersopt() : IInterfaceModifiersopt | null { return this._InterfaceModifiersopt; }
        public  setInterfaceModifiersopt( _InterfaceModifiersopt : IInterfaceModifiersopt) : void { this._InterfaceModifiersopt = _InterfaceModifiersopt; }
        public  getinterface() : AstToken{ return this._interface; }
        public  setinterface( _interface : AstToken) : void { this._interface = _interface; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public  getTypeParametersopt() : TypeParameters | null { return this._TypeParametersopt; }
        public  setTypeParametersopt( _TypeParametersopt : TypeParameters) : void { this._TypeParametersopt = _TypeParametersopt; }
        /**
         * The value returned by <b>getExtendsInterfacesopt</b> may be <b>null</b>
         */
        public  getExtendsInterfacesopt() : IExtendsInterfacesopt | null { return this._ExtendsInterfacesopt; }
        public  setExtendsInterfacesopt( _ExtendsInterfacesopt : IExtendsInterfacesopt) : void { this._ExtendsInterfacesopt = _ExtendsInterfacesopt; }
        public  getInterfaceBody() : InterfaceBody{ return this._InterfaceBody; }
        public  setInterfaceBody( _InterfaceBody : InterfaceBody) : void { this._InterfaceBody = _InterfaceBody; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _InterfaceModifiersopt : IInterfaceModifiersopt| null,
                     _interface : AstToken,
                     _identifier : identifier,
                     _TypeParametersopt : TypeParameters| null,
                     _ExtendsInterfacesopt : IExtendsInterfacesopt| null,
                     _InterfaceBody : InterfaceBody)
        {
            super(leftIToken, rightIToken)

            this._InterfaceModifiersopt = _InterfaceModifiersopt;
            if (_InterfaceModifiersopt) (<Ast> _InterfaceModifiersopt).setParent(this);
            this._interface = _interface;
            (<Ast> _interface).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt) (<Ast> _TypeParametersopt).setParent(this);
            this._ExtendsInterfacesopt = _ExtendsInterfacesopt;
            if (_ExtendsInterfacesopt) (<Ast> _ExtendsInterfacesopt).setParent(this);
            this._InterfaceBody = _InterfaceBody;
            (<Ast> _InterfaceBody).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._InterfaceModifiersopt)  list.add(this._InterfaceModifiersopt);
            if(this._interface)  list.add(this._interface);
            if(this._identifier)  list.add(this._identifier);
            if(this._TypeParametersopt)  list.add(this._TypeParametersopt);
            if(this._ExtendsInterfacesopt)  list.add(this._ExtendsInterfacesopt);
            if(this._InterfaceBody)  list.add(this._InterfaceBody);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitNormalInterfaceDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitNormalInterfaceDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitNormalInterfaceDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitNormalInterfaceDeclaration(this, o); }
    }

    /**
     *<em>
    *<li>Rule 185:  InterfaceModifiers ::= InterfaceModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 186:  InterfaceModifiers ::= InterfaceModifiers InterfaceModifier
     *</b>
     */
    export class InterfaceModifiers extends Ast implements IInterfaceModifiers
    {
        private  _InterfaceModifiers : IInterfaceModifiers;
        private  _InterfaceModifier : IInterfaceModifier;

        public  getInterfaceModifiers() : IInterfaceModifiers{ return this._InterfaceModifiers; }
        public  setInterfaceModifiers( _InterfaceModifiers : IInterfaceModifiers) : void { this._InterfaceModifiers = _InterfaceModifiers; }
        public  getInterfaceModifier() : IInterfaceModifier{ return this._InterfaceModifier; }
        public  setInterfaceModifier( _InterfaceModifier : IInterfaceModifier) : void { this._InterfaceModifier = _InterfaceModifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _InterfaceModifiers : IInterfaceModifiers,
                     _InterfaceModifier : IInterfaceModifier)
        {
            super(leftIToken, rightIToken)

            this._InterfaceModifiers = _InterfaceModifiers;
            (<Ast> _InterfaceModifiers).setParent(this);
            this._InterfaceModifier = _InterfaceModifier;
            (<Ast> _InterfaceModifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._InterfaceModifiers)  list.add(this._InterfaceModifiers);
            if(this._InterfaceModifier)  list.add(this._InterfaceModifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceModifiers(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceModifiers(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceModifiers(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceModifiers(this, o); }
    }

    /**
     *<b>
    *<li>Rule 196:  InterfaceBody ::= { InterfaceMemberDeclarationsopt }
     *</b>
     */
    export class InterfaceBody extends Ast implements IInterfaceBody
    {
        private  _LBRACE : AstToken;
        private  _InterfaceMemberDeclarationsopt : IInterfaceMemberDeclarationsopt| null;
        private  _RBRACE : AstToken;

        public  getLBRACE() : AstToken{ return this._LBRACE; }
        public  setLBRACE( _LBRACE : AstToken) : void { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getInterfaceMemberDeclarationsopt</b> may be <b>null</b>
         */
        public  getInterfaceMemberDeclarationsopt() : IInterfaceMemberDeclarationsopt | null { return this._InterfaceMemberDeclarationsopt; }
        public  setInterfaceMemberDeclarationsopt( _InterfaceMemberDeclarationsopt : IInterfaceMemberDeclarationsopt) : void { this._InterfaceMemberDeclarationsopt = _InterfaceMemberDeclarationsopt; }
        public  getRBRACE() : AstToken{ return this._RBRACE; }
        public  setRBRACE( _RBRACE : AstToken) : void { this._RBRACE = _RBRACE; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACE : AstToken,
                     _InterfaceMemberDeclarationsopt : IInterfaceMemberDeclarationsopt| null,
                     _RBRACE : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACE = _LBRACE;
            (<Ast> _LBRACE).setParent(this);
            this._InterfaceMemberDeclarationsopt = _InterfaceMemberDeclarationsopt;
            if (_InterfaceMemberDeclarationsopt) (<Ast> _InterfaceMemberDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            (<Ast> _RBRACE).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACE)  list.add(this._LBRACE);
            if(this._InterfaceMemberDeclarationsopt)  list.add(this._InterfaceMemberDeclarationsopt);
            if(this._RBRACE)  list.add(this._RBRACE);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceBody(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceBody(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceBody(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceBody(this, o); }
    }

    /**
     *<em>
    *<li>Rule 197:  InterfaceMemberDeclarations ::= InterfaceMemberDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 198:  InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration
     *</b>
     */
    export class InterfaceMemberDeclarations extends Ast implements IInterfaceMemberDeclarations
    {
        private  _InterfaceMemberDeclarations : IInterfaceMemberDeclarations;
        private  _InterfaceMemberDeclaration : IInterfaceMemberDeclaration;

        public  getInterfaceMemberDeclarations() : IInterfaceMemberDeclarations{ return this._InterfaceMemberDeclarations; }
        public  setInterfaceMemberDeclarations( _InterfaceMemberDeclarations : IInterfaceMemberDeclarations) : void { this._InterfaceMemberDeclarations = _InterfaceMemberDeclarations; }
        public  getInterfaceMemberDeclaration() : IInterfaceMemberDeclaration{ return this._InterfaceMemberDeclaration; }
        public  setInterfaceMemberDeclaration( _InterfaceMemberDeclaration : IInterfaceMemberDeclaration) : void { this._InterfaceMemberDeclaration = _InterfaceMemberDeclaration; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _InterfaceMemberDeclarations : IInterfaceMemberDeclarations,
                     _InterfaceMemberDeclaration : IInterfaceMemberDeclaration)
        {
            super(leftIToken, rightIToken)

            this._InterfaceMemberDeclarations = _InterfaceMemberDeclarations;
            (<Ast> _InterfaceMemberDeclarations).setParent(this);
            this._InterfaceMemberDeclaration = _InterfaceMemberDeclaration;
            (<Ast> _InterfaceMemberDeclaration).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._InterfaceMemberDeclarations)  list.add(this._InterfaceMemberDeclarations);
            if(this._InterfaceMemberDeclaration)  list.add(this._InterfaceMemberDeclaration);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceMemberDeclarations(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceMemberDeclarations(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceMemberDeclarations(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceMemberDeclarations(this, o); }
    }

    /**
     *<em>
    *<li>Rule 199:  InterfaceMemberDeclaration ::= ConstantDeclaration
    *<li>Rule 200:  InterfaceMemberDeclaration ::= AbstractMethodDeclaration
    *<li>Rule 201:  InterfaceMemberDeclaration ::= ClassDeclaration
    *<li>Rule 202:  InterfaceMemberDeclaration ::= InterfaceDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 203:  InterfaceMemberDeclaration ::= ;
     *</b>
     */
    export class InterfaceMemberDeclaration extends AstToken implements IInterfaceMemberDeclaration
    {
        public  getSEMICOLON() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceMemberDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceMemberDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceMemberDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceMemberDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 204:  ConstantDeclaration ::= ConstantModifiersopt Type VariableDeclarators
     *</b>
     */
    export class ConstantDeclaration extends Ast implements IConstantDeclaration
    {
        private  _ConstantModifiersopt : IConstantModifiersopt| null;
        private  _Type : IType;
        private  _VariableDeclarators : IVariableDeclarators;

        /**
         * The value returned by <b>getConstantModifiersopt</b> may be <b>null</b>
         */
        public  getConstantModifiersopt() : IConstantModifiersopt | null { return this._ConstantModifiersopt; }
        public  setConstantModifiersopt( _ConstantModifiersopt : IConstantModifiersopt) : void { this._ConstantModifiersopt = _ConstantModifiersopt; }
        public  getType() : IType{ return this._Type; }
        public  setType( _Type : IType) : void { this._Type = _Type; }
        public  getVariableDeclarators() : IVariableDeclarators{ return this._VariableDeclarators; }
        public  setVariableDeclarators( _VariableDeclarators : IVariableDeclarators) : void { this._VariableDeclarators = _VariableDeclarators; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ConstantModifiersopt : IConstantModifiersopt| null,
                     _Type : IType,
                     _VariableDeclarators : IVariableDeclarators)
        {
            super(leftIToken, rightIToken)

            this._ConstantModifiersopt = _ConstantModifiersopt;
            if (_ConstantModifiersopt) (<Ast> _ConstantModifiersopt).setParent(this);
            this._Type = _Type;
            (<Ast> _Type).setParent(this);
            this._VariableDeclarators = _VariableDeclarators;
            (<Ast> _VariableDeclarators).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ConstantModifiersopt)  list.add(this._ConstantModifiersopt);
            if(this._Type)  list.add(this._Type);
            if(this._VariableDeclarators)  list.add(this._VariableDeclarators);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstantDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstantDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstantDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstantDeclaration(this, o); }
    }

    /**
     *<em>
    *<li>Rule 205:  ConstantModifiers ::= ConstantModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 206:  ConstantModifiers ::= ConstantModifiers ConstantModifier
     *</b>
     */
    export class ConstantModifiers extends Ast implements IConstantModifiers
    {
        private  _ConstantModifiers : IConstantModifiers;
        private  _ConstantModifier : IConstantModifier;

        public  getConstantModifiers() : IConstantModifiers{ return this._ConstantModifiers; }
        public  setConstantModifiers( _ConstantModifiers : IConstantModifiers) : void { this._ConstantModifiers = _ConstantModifiers; }
        public  getConstantModifier() : IConstantModifier{ return this._ConstantModifier; }
        public  setConstantModifier( _ConstantModifier : IConstantModifier) : void { this._ConstantModifier = _ConstantModifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ConstantModifiers : IConstantModifiers,
                     _ConstantModifier : IConstantModifier)
        {
            super(leftIToken, rightIToken)

            this._ConstantModifiers = _ConstantModifiers;
            (<Ast> _ConstantModifiers).setParent(this);
            this._ConstantModifier = _ConstantModifier;
            (<Ast> _ConstantModifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ConstantModifiers)  list.add(this._ConstantModifiers);
            if(this._ConstantModifier)  list.add(this._ConstantModifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstantModifiers(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstantModifiers(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstantModifiers(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstantModifiers(this, o); }
    }

    /**
     *<b>
    *<li>Rule 211:  AbstractMethodDeclaration ::= AbstractMethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt ;
     *</b>
     */
    export class AbstractMethodDeclaration extends Ast implements IAbstractMethodDeclaration
    {
        private  _AbstractMethodModifiersopt : IAbstractMethodModifiersopt| null;
        private  _TypeParametersopt : TypeParameters| null;
        private  _ResultType : IResultType;
        private  _MethodDeclarator : IMethodDeclarator;
        private  _Throwsopt : Throws| null;
        private  _SEMICOLON : AstToken;

        /**
         * The value returned by <b>getAbstractMethodModifiersopt</b> may be <b>null</b>
         */
        public  getAbstractMethodModifiersopt() : IAbstractMethodModifiersopt | null { return this._AbstractMethodModifiersopt; }
        public  setAbstractMethodModifiersopt( _AbstractMethodModifiersopt : IAbstractMethodModifiersopt) : void { this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public  getTypeParametersopt() : TypeParameters | null { return this._TypeParametersopt; }
        public  setTypeParametersopt( _TypeParametersopt : TypeParameters) : void { this._TypeParametersopt = _TypeParametersopt; }
        public  getResultType() : IResultType{ return this._ResultType; }
        public  setResultType( _ResultType : IResultType) : void { this._ResultType = _ResultType; }
        public  getMethodDeclarator() : IMethodDeclarator{ return this._MethodDeclarator; }
        public  setMethodDeclarator( _MethodDeclarator : IMethodDeclarator) : void { this._MethodDeclarator = _MethodDeclarator; }
        /**
         * The value returned by <b>getThrowsopt</b> may be <b>null</b>
         */
        public  getThrowsopt() : Throws | null { return this._Throwsopt; }
        public  setThrowsopt( _Throwsopt : Throws) : void { this._Throwsopt = _Throwsopt; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AbstractMethodModifiersopt : IAbstractMethodModifiersopt| null,
                     _TypeParametersopt : TypeParameters| null,
                     _ResultType : IResultType,
                     _MethodDeclarator : IMethodDeclarator,
                     _Throwsopt : Throws| null,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt;
            if (_AbstractMethodModifiersopt) (<Ast> _AbstractMethodModifiersopt).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt) (<Ast> _TypeParametersopt).setParent(this);
            this._ResultType = _ResultType;
            (<Ast> _ResultType).setParent(this);
            this._MethodDeclarator = _MethodDeclarator;
            (<Ast> _MethodDeclarator).setParent(this);
            this._Throwsopt = _Throwsopt;
            if (_Throwsopt) (<Ast> _Throwsopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AbstractMethodModifiersopt)  list.add(this._AbstractMethodModifiersopt);
            if(this._TypeParametersopt)  list.add(this._TypeParametersopt);
            if(this._ResultType)  list.add(this._ResultType);
            if(this._MethodDeclarator)  list.add(this._MethodDeclarator);
            if(this._Throwsopt)  list.add(this._Throwsopt);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAbstractMethodDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAbstractMethodDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAbstractMethodDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAbstractMethodDeclaration(this, o); }
    }

    /**
     *<em>
    *<li>Rule 212:  AbstractMethodModifiers ::= AbstractMethodModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 213:  AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier
     *</b>
     */
    export class AbstractMethodModifiers extends Ast implements IAbstractMethodModifiers
    {
        private  _AbstractMethodModifiers : IAbstractMethodModifiers;
        private  _AbstractMethodModifier : IAbstractMethodModifier;

        public  getAbstractMethodModifiers() : IAbstractMethodModifiers{ return this._AbstractMethodModifiers; }
        public  setAbstractMethodModifiers( _AbstractMethodModifiers : IAbstractMethodModifiers) : void { this._AbstractMethodModifiers = _AbstractMethodModifiers; }
        public  getAbstractMethodModifier() : IAbstractMethodModifier{ return this._AbstractMethodModifier; }
        public  setAbstractMethodModifier( _AbstractMethodModifier : IAbstractMethodModifier) : void { this._AbstractMethodModifier = _AbstractMethodModifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AbstractMethodModifiers : IAbstractMethodModifiers,
                     _AbstractMethodModifier : IAbstractMethodModifier)
        {
            super(leftIToken, rightIToken)

            this._AbstractMethodModifiers = _AbstractMethodModifiers;
            (<Ast> _AbstractMethodModifiers).setParent(this);
            this._AbstractMethodModifier = _AbstractMethodModifier;
            (<Ast> _AbstractMethodModifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AbstractMethodModifiers)  list.add(this._AbstractMethodModifiers);
            if(this._AbstractMethodModifier)  list.add(this._AbstractMethodModifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAbstractMethodModifiers(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAbstractMethodModifiers(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAbstractMethodModifiers(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAbstractMethodModifiers(this, o); }
    }

    /**
     *<b>
    *<li>Rule 217:  AnnotationTypeDeclaration ::= InterfaceModifiersopt @ interface identifier AnnotationTypeBody
     *</b>
     */
    export class AnnotationTypeDeclaration extends Ast implements IAnnotationTypeDeclaration
    {
        private  _InterfaceModifiersopt : IInterfaceModifiersopt| null;
        private  _AT : AstToken;
        private  _interface : AstToken;
        private  _identifier : identifier;
        private  _AnnotationTypeBody : AnnotationTypeBody;

        /**
         * The value returned by <b>getInterfaceModifiersopt</b> may be <b>null</b>
         */
        public  getInterfaceModifiersopt() : IInterfaceModifiersopt | null { return this._InterfaceModifiersopt; }
        public  setInterfaceModifiersopt( _InterfaceModifiersopt : IInterfaceModifiersopt) : void { this._InterfaceModifiersopt = _InterfaceModifiersopt; }
        public  getAT() : AstToken{ return this._AT; }
        public  setAT( _AT : AstToken) : void { this._AT = _AT; }
        public  getinterface() : AstToken{ return this._interface; }
        public  setinterface( _interface : AstToken) : void { this._interface = _interface; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getAnnotationTypeBody() : AnnotationTypeBody{ return this._AnnotationTypeBody; }
        public  setAnnotationTypeBody( _AnnotationTypeBody : AnnotationTypeBody) : void { this._AnnotationTypeBody = _AnnotationTypeBody; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _InterfaceModifiersopt : IInterfaceModifiersopt| null,
                     _AT : AstToken,
                     _interface : AstToken,
                     _identifier : identifier,
                     _AnnotationTypeBody : AnnotationTypeBody)
        {
            super(leftIToken, rightIToken)

            this._InterfaceModifiersopt = _InterfaceModifiersopt;
            if (_InterfaceModifiersopt) (<Ast> _InterfaceModifiersopt).setParent(this);
            this._AT = _AT;
            (<Ast> _AT).setParent(this);
            this._interface = _interface;
            (<Ast> _interface).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._AnnotationTypeBody = _AnnotationTypeBody;
            (<Ast> _AnnotationTypeBody).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._InterfaceModifiersopt)  list.add(this._InterfaceModifiersopt);
            if(this._AT)  list.add(this._AT);
            if(this._interface)  list.add(this._interface);
            if(this._identifier)  list.add(this._identifier);
            if(this._AnnotationTypeBody)  list.add(this._AnnotationTypeBody);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAnnotationTypeDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAnnotationTypeDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAnnotationTypeDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAnnotationTypeDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 218:  AnnotationTypeBody ::= { AnnotationTypeElementDeclarationsopt }
     *</b>
     */
    export class AnnotationTypeBody extends Ast implements IAnnotationTypeBody
    {
        private  _LBRACE : AstToken;
        private  _AnnotationTypeElementDeclarationsopt : IAnnotationTypeElementDeclarationsopt| null;
        private  _RBRACE : AstToken;

        public  getLBRACE() : AstToken{ return this._LBRACE; }
        public  setLBRACE( _LBRACE : AstToken) : void { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getAnnotationTypeElementDeclarationsopt</b> may be <b>null</b>
         */
        public  getAnnotationTypeElementDeclarationsopt() : IAnnotationTypeElementDeclarationsopt | null { return this._AnnotationTypeElementDeclarationsopt; }
        public  setAnnotationTypeElementDeclarationsopt( _AnnotationTypeElementDeclarationsopt : IAnnotationTypeElementDeclarationsopt) : void { this._AnnotationTypeElementDeclarationsopt = _AnnotationTypeElementDeclarationsopt; }
        public  getRBRACE() : AstToken{ return this._RBRACE; }
        public  setRBRACE( _RBRACE : AstToken) : void { this._RBRACE = _RBRACE; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACE : AstToken,
                     _AnnotationTypeElementDeclarationsopt : IAnnotationTypeElementDeclarationsopt| null,
                     _RBRACE : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACE = _LBRACE;
            (<Ast> _LBRACE).setParent(this);
            this._AnnotationTypeElementDeclarationsopt = _AnnotationTypeElementDeclarationsopt;
            if (_AnnotationTypeElementDeclarationsopt) (<Ast> _AnnotationTypeElementDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            (<Ast> _RBRACE).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACE)  list.add(this._LBRACE);
            if(this._AnnotationTypeElementDeclarationsopt)  list.add(this._AnnotationTypeElementDeclarationsopt);
            if(this._RBRACE)  list.add(this._RBRACE);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAnnotationTypeBody(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAnnotationTypeBody(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAnnotationTypeBody(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAnnotationTypeBody(this, o); }
    }

    /**
     *<em>
    *<li>Rule 219:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 220:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration
     *</b>
     */
    export class AnnotationTypeElementDeclarations extends Ast implements IAnnotationTypeElementDeclarations
    {
        private  _AnnotationTypeElementDeclarations : IAnnotationTypeElementDeclarations;
        private  _AnnotationTypeElementDeclaration : IAnnotationTypeElementDeclaration;

        public  getAnnotationTypeElementDeclarations() : IAnnotationTypeElementDeclarations{ return this._AnnotationTypeElementDeclarations; }
        public  setAnnotationTypeElementDeclarations( _AnnotationTypeElementDeclarations : IAnnotationTypeElementDeclarations) : void { this._AnnotationTypeElementDeclarations = _AnnotationTypeElementDeclarations; }
        public  getAnnotationTypeElementDeclaration() : IAnnotationTypeElementDeclaration{ return this._AnnotationTypeElementDeclaration; }
        public  setAnnotationTypeElementDeclaration( _AnnotationTypeElementDeclaration : IAnnotationTypeElementDeclaration) : void { this._AnnotationTypeElementDeclaration = _AnnotationTypeElementDeclaration; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AnnotationTypeElementDeclarations : IAnnotationTypeElementDeclarations,
                     _AnnotationTypeElementDeclaration : IAnnotationTypeElementDeclaration)
        {
            super(leftIToken, rightIToken)

            this._AnnotationTypeElementDeclarations = _AnnotationTypeElementDeclarations;
            (<Ast> _AnnotationTypeElementDeclarations).setParent(this);
            this._AnnotationTypeElementDeclaration = _AnnotationTypeElementDeclaration;
            (<Ast> _AnnotationTypeElementDeclaration).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AnnotationTypeElementDeclarations)  list.add(this._AnnotationTypeElementDeclarations);
            if(this._AnnotationTypeElementDeclaration)  list.add(this._AnnotationTypeElementDeclaration);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAnnotationTypeElementDeclarations(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAnnotationTypeElementDeclarations(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAnnotationTypeElementDeclarations(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAnnotationTypeElementDeclarations(this, o); }
    }

    /**
     *<b>
    *<li>Rule 228:  DefaultValue ::= default ElementValue
     *</b>
     */
    export class DefaultValue extends Ast implements IDefaultValue
    {
        private  _default : AstToken;
        private  _ElementValue : IElementValue;

        public  getdefault() : AstToken{ return this._default; }
        public  setdefault( _default : AstToken) : void { this._default = _default; }
        public  getElementValue() : IElementValue{ return this._ElementValue; }
        public  setElementValue( _ElementValue : IElementValue) : void { this._ElementValue = _ElementValue; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _default : AstToken,
                     _ElementValue : IElementValue)
        {
            super(leftIToken, rightIToken)

            this._default = _default;
            (<Ast> _default).setParent(this);
            this._ElementValue = _ElementValue;
            (<Ast> _ElementValue).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._default)  list.add(this._default);
            if(this._ElementValue)  list.add(this._ElementValue);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitDefaultValue(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitDefaultValue(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitDefaultValue(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitDefaultValue(this, o); }
    }

    /**
     *<em>
    *<li>Rule 229:  Annotations ::= Annotation
     *</em>
     *<p>
     *<b>
    *<li>Rule 230:  Annotations ::= Annotations Annotation
     *</b>
     */
    export class Annotations extends Ast implements IAnnotations
    {
        private  _Annotations : IAnnotations;
        private  _Annotation : IAnnotation;

        public  getAnnotations() : IAnnotations{ return this._Annotations; }
        public  setAnnotations( _Annotations : IAnnotations) : void { this._Annotations = _Annotations; }
        public  getAnnotation() : IAnnotation{ return this._Annotation; }
        public  setAnnotation( _Annotation : IAnnotation) : void { this._Annotation = _Annotation; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Annotations : IAnnotations,
                     _Annotation : IAnnotation)
        {
            super(leftIToken, rightIToken)

            this._Annotations = _Annotations;
            (<Ast> _Annotations).setParent(this);
            this._Annotation = _Annotation;
            (<Ast> _Annotation).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Annotations)  list.add(this._Annotations);
            if(this._Annotation)  list.add(this._Annotation);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAnnotations(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAnnotations(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAnnotations(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAnnotations(this, o); }
    }

    /**
     *<b>
    *<li>Rule 234:  NormalAnnotation ::= @ TypeName ( ElementValuePairsopt )
     *</b>
     */
    export class NormalAnnotation extends Ast implements INormalAnnotation
    {
        private  _AT : AstToken;
        private  _TypeName : ITypeName;
        private  _LPAREN : AstToken;
        private  _ElementValuePairsopt : IElementValuePairsopt| null;
        private  _RPAREN : AstToken;

        public  getAT() : AstToken{ return this._AT; }
        public  setAT( _AT : AstToken) : void { this._AT = _AT; }
        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getElementValuePairsopt</b> may be <b>null</b>
         */
        public  getElementValuePairsopt() : IElementValuePairsopt | null { return this._ElementValuePairsopt; }
        public  setElementValuePairsopt( _ElementValuePairsopt : IElementValuePairsopt) : void { this._ElementValuePairsopt = _ElementValuePairsopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AT : AstToken,
                     _TypeName : ITypeName,
                     _LPAREN : AstToken,
                     _ElementValuePairsopt : IElementValuePairsopt| null,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._AT = _AT;
            (<Ast> _AT).setParent(this);
            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ElementValuePairsopt = _ElementValuePairsopt;
            if (_ElementValuePairsopt) (<Ast> _ElementValuePairsopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AT)  list.add(this._AT);
            if(this._TypeName)  list.add(this._TypeName);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ElementValuePairsopt)  list.add(this._ElementValuePairsopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitNormalAnnotation(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitNormalAnnotation(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitNormalAnnotation(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitNormalAnnotation(this, o); }
    }

    /**
     *<em>
    *<li>Rule 235:  ElementValuePairs ::= ElementValuePair
     *</em>
     *<p>
     *<b>
    *<li>Rule 236:  ElementValuePairs ::= ElementValuePairs , ElementValuePair
     *</b>
     */
    export class ElementValuePairs extends Ast implements IElementValuePairs
    {
        private  _ElementValuePairs : IElementValuePairs;
        private  _COMMA : AstToken;
        private  _ElementValuePair : ElementValuePair;

        public  getElementValuePairs() : IElementValuePairs{ return this._ElementValuePairs; }
        public  setElementValuePairs( _ElementValuePairs : IElementValuePairs) : void { this._ElementValuePairs = _ElementValuePairs; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getElementValuePair() : ElementValuePair{ return this._ElementValuePair; }
        public  setElementValuePair( _ElementValuePair : ElementValuePair) : void { this._ElementValuePair = _ElementValuePair; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ElementValuePairs : IElementValuePairs,
                     _COMMA : AstToken,
                     _ElementValuePair : ElementValuePair)
        {
            super(leftIToken, rightIToken)

            this._ElementValuePairs = _ElementValuePairs;
            (<Ast> _ElementValuePairs).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._ElementValuePair = _ElementValuePair;
            (<Ast> _ElementValuePair).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ElementValuePairs)  list.add(this._ElementValuePairs);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._ElementValuePair)  list.add(this._ElementValuePair);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitElementValuePairs(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitElementValuePairs(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitElementValuePairs(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitElementValuePairs(this, o); }
    }

    /**
     *<b>
    *<li>Rule 237:  ElementValuePair ::= SimpleName = ElementValue
     *</b>
     */
    export class ElementValuePair extends Ast implements IElementValuePair
    {
        private  _SimpleName : identifier;
        private  _EQUAL : AstToken;
        private  _ElementValue : IElementValue;

        public  getSimpleName() : identifier{ return this._SimpleName; }
        public  setSimpleName( _SimpleName : identifier) : void { this._SimpleName = _SimpleName; }
        public  getEQUAL() : AstToken{ return this._EQUAL; }
        public  setEQUAL( _EQUAL : AstToken) : void { this._EQUAL = _EQUAL; }
        public  getElementValue() : IElementValue{ return this._ElementValue; }
        public  setElementValue( _ElementValue : IElementValue) : void { this._ElementValue = _ElementValue; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _SimpleName : identifier,
                     _EQUAL : AstToken,
                     _ElementValue : IElementValue)
        {
            super(leftIToken, rightIToken)

            this._SimpleName = _SimpleName;
            (<Ast> _SimpleName).setParent(this);
            this._EQUAL = _EQUAL;
            (<Ast> _EQUAL).setParent(this);
            this._ElementValue = _ElementValue;
            (<Ast> _ElementValue).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._SimpleName)  list.add(this._SimpleName);
            if(this._EQUAL)  list.add(this._EQUAL);
            if(this._ElementValue)  list.add(this._ElementValue);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitElementValuePair(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitElementValuePair(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitElementValuePair(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitElementValuePair(this, o); }
    }

    /**
     *<b>
    *<li>Rule 242:  ElementValueArrayInitializer ::= { ElementValuesopt ,opt }
     *</b>
     */
    export class ElementValueArrayInitializer extends Ast implements IElementValueArrayInitializer
    {
        private  _LBRACE : AstToken;
        private  _ElementValuesopt : IElementValuesopt| null;
        private  _Commaopt : Commaopt| null;
        private  _RBRACE : AstToken;

        public  getLBRACE() : AstToken{ return this._LBRACE; }
        public  setLBRACE( _LBRACE : AstToken) : void { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getElementValuesopt</b> may be <b>null</b>
         */
        public  getElementValuesopt() : IElementValuesopt | null { return this._ElementValuesopt; }
        public  setElementValuesopt( _ElementValuesopt : IElementValuesopt) : void { this._ElementValuesopt = _ElementValuesopt; }
        /**
         * The value returned by <b>getCommaopt</b> may be <b>null</b>
         */
        public  getCommaopt() : Commaopt | null { return this._Commaopt; }
        public  setCommaopt( _Commaopt : Commaopt) : void { this._Commaopt = _Commaopt; }
        public  getRBRACE() : AstToken{ return this._RBRACE; }
        public  setRBRACE( _RBRACE : AstToken) : void { this._RBRACE = _RBRACE; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACE : AstToken,
                     _ElementValuesopt : IElementValuesopt| null,
                     _Commaopt : Commaopt| null,
                     _RBRACE : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACE = _LBRACE;
            (<Ast> _LBRACE).setParent(this);
            this._ElementValuesopt = _ElementValuesopt;
            if (_ElementValuesopt) (<Ast> _ElementValuesopt).setParent(this);
            this._Commaopt = _Commaopt;
            if (_Commaopt) (<Ast> _Commaopt).setParent(this);
            this._RBRACE = _RBRACE;
            (<Ast> _RBRACE).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACE)  list.add(this._LBRACE);
            if(this._ElementValuesopt)  list.add(this._ElementValuesopt);
            if(this._Commaopt)  list.add(this._Commaopt);
            if(this._RBRACE)  list.add(this._RBRACE);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitElementValueArrayInitializer(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitElementValueArrayInitializer(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitElementValueArrayInitializer(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitElementValueArrayInitializer(this, o); }
    }

    /**
     *<em>
    *<li>Rule 243:  ElementValues ::= ElementValue
     *</em>
     *<p>
     *<b>
    *<li>Rule 244:  ElementValues ::= ElementValues , ElementValue
     *</b>
     */
    export class ElementValues extends Ast implements IElementValues
    {
        private  _ElementValues : IElementValues;
        private  _COMMA : AstToken;
        private  _ElementValue : IElementValue;

        public  getElementValues() : IElementValues{ return this._ElementValues; }
        public  setElementValues( _ElementValues : IElementValues) : void { this._ElementValues = _ElementValues; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getElementValue() : IElementValue{ return this._ElementValue; }
        public  setElementValue( _ElementValue : IElementValue) : void { this._ElementValue = _ElementValue; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ElementValues : IElementValues,
                     _COMMA : AstToken,
                     _ElementValue : IElementValue)
        {
            super(leftIToken, rightIToken)

            this._ElementValues = _ElementValues;
            (<Ast> _ElementValues).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._ElementValue = _ElementValue;
            (<Ast> _ElementValue).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ElementValues)  list.add(this._ElementValues);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._ElementValue)  list.add(this._ElementValue);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitElementValues(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitElementValues(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitElementValues(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitElementValues(this, o); }
    }

    /**
     *<b>
    *<li>Rule 245:  MarkerAnnotation ::= @ TypeName
     *</b>
     */
    export class MarkerAnnotation extends Ast implements IMarkerAnnotation
    {
        private  _AT : AstToken;
        private  _TypeName : ITypeName;

        public  getAT() : AstToken{ return this._AT; }
        public  setAT( _AT : AstToken) : void { this._AT = _AT; }
        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AT : AstToken,
                     _TypeName : ITypeName)
        {
            super(leftIToken, rightIToken)

            this._AT = _AT;
            (<Ast> _AT).setParent(this);
            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AT)  list.add(this._AT);
            if(this._TypeName)  list.add(this._TypeName);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMarkerAnnotation(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMarkerAnnotation(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMarkerAnnotation(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMarkerAnnotation(this, o); }
    }

    /**
     *<b>
    *<li>Rule 246:  SingleElementAnnotation ::= @ TypeName ( ElementValue )
     *</b>
     */
    export class SingleElementAnnotation extends Ast implements ISingleElementAnnotation
    {
        private  _AT : AstToken;
        private  _TypeName : ITypeName;
        private  _LPAREN : AstToken;
        private  _ElementValue : IElementValue;
        private  _RPAREN : AstToken;

        public  getAT() : AstToken{ return this._AT; }
        public  setAT( _AT : AstToken) : void { this._AT = _AT; }
        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getElementValue() : IElementValue{ return this._ElementValue; }
        public  setElementValue( _ElementValue : IElementValue) : void { this._ElementValue = _ElementValue; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AT : AstToken,
                     _TypeName : ITypeName,
                     _LPAREN : AstToken,
                     _ElementValue : IElementValue,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._AT = _AT;
            (<Ast> _AT).setParent(this);
            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ElementValue = _ElementValue;
            (<Ast> _ElementValue).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AT)  list.add(this._AT);
            if(this._TypeName)  list.add(this._TypeName);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ElementValue)  list.add(this._ElementValue);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSingleElementAnnotation(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSingleElementAnnotation(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSingleElementAnnotation(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSingleElementAnnotation(this, o); }
    }

    /**
     *<b>
    *<li>Rule 247:  ArrayInitializer ::= { VariableInitializersopt ,opt }
     *</b>
     */
    export class ArrayInitializer extends Ast implements IArrayInitializer
    {
        private  _LBRACE : AstToken;
        private  _VariableInitializersopt : IVariableInitializersopt| null;
        private  _Commaopt : Commaopt| null;
        private  _RBRACE : AstToken;

        public  getLBRACE() : AstToken{ return this._LBRACE; }
        public  setLBRACE( _LBRACE : AstToken) : void { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getVariableInitializersopt</b> may be <b>null</b>
         */
        public  getVariableInitializersopt() : IVariableInitializersopt | null { return this._VariableInitializersopt; }
        public  setVariableInitializersopt( _VariableInitializersopt : IVariableInitializersopt) : void { this._VariableInitializersopt = _VariableInitializersopt; }
        /**
         * The value returned by <b>getCommaopt</b> may be <b>null</b>
         */
        public  getCommaopt() : Commaopt | null { return this._Commaopt; }
        public  setCommaopt( _Commaopt : Commaopt) : void { this._Commaopt = _Commaopt; }
        public  getRBRACE() : AstToken{ return this._RBRACE; }
        public  setRBRACE( _RBRACE : AstToken) : void { this._RBRACE = _RBRACE; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACE : AstToken,
                     _VariableInitializersopt : IVariableInitializersopt| null,
                     _Commaopt : Commaopt| null,
                     _RBRACE : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACE = _LBRACE;
            (<Ast> _LBRACE).setParent(this);
            this._VariableInitializersopt = _VariableInitializersopt;
            if (_VariableInitializersopt) (<Ast> _VariableInitializersopt).setParent(this);
            this._Commaopt = _Commaopt;
            if (_Commaopt) (<Ast> _Commaopt).setParent(this);
            this._RBRACE = _RBRACE;
            (<Ast> _RBRACE).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACE)  list.add(this._LBRACE);
            if(this._VariableInitializersopt)  list.add(this._VariableInitializersopt);
            if(this._Commaopt)  list.add(this._Commaopt);
            if(this._RBRACE)  list.add(this._RBRACE);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArrayInitializer(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArrayInitializer(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArrayInitializer(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArrayInitializer(this, o); }
    }

    /**
     *<em>
    *<li>Rule 248:  VariableInitializers ::= VariableInitializer
     *</em>
     *<p>
     *<b>
    *<li>Rule 249:  VariableInitializers ::= VariableInitializers , VariableInitializer
     *</b>
     */
    export class VariableInitializers extends Ast implements IVariableInitializers
    {
        private  _VariableInitializers : IVariableInitializers;
        private  _COMMA : AstToken;
        private  _VariableInitializer : IVariableInitializer;

        public  getVariableInitializers() : IVariableInitializers{ return this._VariableInitializers; }
        public  setVariableInitializers( _VariableInitializers : IVariableInitializers) : void { this._VariableInitializers = _VariableInitializers; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getVariableInitializer() : IVariableInitializer{ return this._VariableInitializer; }
        public  setVariableInitializer( _VariableInitializer : IVariableInitializer) : void { this._VariableInitializer = _VariableInitializer; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _VariableInitializers : IVariableInitializers,
                     _COMMA : AstToken,
                     _VariableInitializer : IVariableInitializer)
        {
            super(leftIToken, rightIToken)

            this._VariableInitializers = _VariableInitializers;
            (<Ast> _VariableInitializers).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._VariableInitializer = _VariableInitializer;
            (<Ast> _VariableInitializer).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._VariableInitializers)  list.add(this._VariableInitializers);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._VariableInitializer)  list.add(this._VariableInitializer);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitVariableInitializers(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitVariableInitializers(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitVariableInitializers(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitVariableInitializers(this, o); }
    }

    /**
     *<b>
    *<li>Rule 250:  Block ::= { BlockStatementsopt }
     *</b>
     */
    export class Block extends Ast implements IBlock
    {
        private  _LBRACE : AstToken;
        private  _BlockStatementsopt : IBlockStatementsopt| null;
        private  _RBRACE : AstToken;

        public  getLBRACE() : AstToken{ return this._LBRACE; }
        public  setLBRACE( _LBRACE : AstToken) : void { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public  getBlockStatementsopt() : IBlockStatementsopt | null { return this._BlockStatementsopt; }
        public  setBlockStatementsopt( _BlockStatementsopt : IBlockStatementsopt) : void { this._BlockStatementsopt = _BlockStatementsopt; }
        public  getRBRACE() : AstToken{ return this._RBRACE; }
        public  setRBRACE( _RBRACE : AstToken) : void { this._RBRACE = _RBRACE; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACE : AstToken,
                     _BlockStatementsopt : IBlockStatementsopt| null,
                     _RBRACE : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACE = _LBRACE;
            (<Ast> _LBRACE).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt) (<Ast> _BlockStatementsopt).setParent(this);
            this._RBRACE = _RBRACE;
            (<Ast> _RBRACE).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACE)  list.add(this._LBRACE);
            if(this._BlockStatementsopt)  list.add(this._BlockStatementsopt);
            if(this._RBRACE)  list.add(this._RBRACE);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitBlock(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitBlock(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitBlock(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitBlock(this, o); }
    }

    /**
     *<em>
    *<li>Rule 251:  BlockStatements ::= BlockStatement
     *</em>
     *<p>
     *<b>
    *<li>Rule 252:  BlockStatements ::= BlockStatements BlockStatement
     *</b>
     */
    export class BlockStatements extends Ast implements IBlockStatements
    {
        private  _BlockStatements : IBlockStatements;
        private  _BlockStatement : IBlockStatement;

        public  getBlockStatements() : IBlockStatements{ return this._BlockStatements; }
        public  setBlockStatements( _BlockStatements : IBlockStatements) : void { this._BlockStatements = _BlockStatements; }
        public  getBlockStatement() : IBlockStatement{ return this._BlockStatement; }
        public  setBlockStatement( _BlockStatement : IBlockStatement) : void { this._BlockStatement = _BlockStatement; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _BlockStatements : IBlockStatements,
                     _BlockStatement : IBlockStatement)
        {
            super(leftIToken, rightIToken)

            this._BlockStatements = _BlockStatements;
            (<Ast> _BlockStatements).setParent(this);
            this._BlockStatement = _BlockStatement;
            (<Ast> _BlockStatement).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._BlockStatements)  list.add(this._BlockStatements);
            if(this._BlockStatement)  list.add(this._BlockStatement);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitBlockStatements(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitBlockStatements(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitBlockStatements(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitBlockStatements(this, o); }
    }

    /**
     *<b>
    *<li>Rule 256:  LocalVariableDeclarationStatement ::= LocalVariableDeclaration ;
     *</b>
     */
    export class LocalVariableDeclarationStatement extends Ast implements ILocalVariableDeclarationStatement
    {
        private  _LocalVariableDeclaration : LocalVariableDeclaration;
        private  _SEMICOLON : AstToken;

        public  getLocalVariableDeclaration() : LocalVariableDeclaration{ return this._LocalVariableDeclaration; }
        public  setLocalVariableDeclaration( _LocalVariableDeclaration : LocalVariableDeclaration) : void { this._LocalVariableDeclaration = _LocalVariableDeclaration; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LocalVariableDeclaration : LocalVariableDeclaration,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LocalVariableDeclaration = _LocalVariableDeclaration;
            (<Ast> _LocalVariableDeclaration).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LocalVariableDeclaration)  list.add(this._LocalVariableDeclaration);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLocalVariableDeclarationStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLocalVariableDeclarationStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLocalVariableDeclarationStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLocalVariableDeclarationStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 257:  LocalVariableDeclaration ::= VariableModifiersopt Type VariableDeclarators
     *</b>
     */
    export class LocalVariableDeclaration extends Ast implements ILocalVariableDeclaration
    {
        private  _VariableModifiersopt : IVariableModifiersopt| null;
        private  _Type : IType;
        private  _VariableDeclarators : IVariableDeclarators;

        /**
         * The value returned by <b>getVariableModifiersopt</b> may be <b>null</b>
         */
        public  getVariableModifiersopt() : IVariableModifiersopt | null { return this._VariableModifiersopt; }
        public  setVariableModifiersopt( _VariableModifiersopt : IVariableModifiersopt) : void { this._VariableModifiersopt = _VariableModifiersopt; }
        public  getType() : IType{ return this._Type; }
        public  setType( _Type : IType) : void { this._Type = _Type; }
        public  getVariableDeclarators() : IVariableDeclarators{ return this._VariableDeclarators; }
        public  setVariableDeclarators( _VariableDeclarators : IVariableDeclarators) : void { this._VariableDeclarators = _VariableDeclarators; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _VariableModifiersopt : IVariableModifiersopt| null,
                     _Type : IType,
                     _VariableDeclarators : IVariableDeclarators)
        {
            super(leftIToken, rightIToken)

            this._VariableModifiersopt = _VariableModifiersopt;
            if (_VariableModifiersopt) (<Ast> _VariableModifiersopt).setParent(this);
            this._Type = _Type;
            (<Ast> _Type).setParent(this);
            this._VariableDeclarators = _VariableDeclarators;
            (<Ast> _VariableDeclarators).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._VariableModifiersopt)  list.add(this._VariableModifiersopt);
            if(this._Type)  list.add(this._Type);
            if(this._VariableDeclarators)  list.add(this._VariableDeclarators);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLocalVariableDeclaration(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLocalVariableDeclaration(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLocalVariableDeclaration(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLocalVariableDeclaration(this, o); }
    }

    /**
     *<b>
    *<li>Rule 281:  IfThenStatement ::= if ( Expression ) Statement
     *</b>
     */
    export class IfThenStatement extends Ast implements IIfThenStatement
    {
        private  _if : AstToken;
        private  _LPAREN : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;
        private  _Statement : IStatement;

        public  getif() : AstToken{ return this._if; }
        public  setif( _if : AstToken) : void { this._if = _if; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getStatement() : IStatement{ return this._Statement; }
        public  setStatement( _Statement : IStatement) : void { this._Statement = _Statement; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _if : AstToken,
                     _LPAREN : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken,
                     _Statement : IStatement)
        {
            super(leftIToken, rightIToken)

            this._if = _if;
            (<Ast> _if).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._Statement = _Statement;
            (<Ast> _Statement).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._if)  list.add(this._if);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._Statement)  list.add(this._Statement);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitIfThenStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitIfThenStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitIfThenStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitIfThenStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 282:  IfThenElseStatement ::= if ( Expression ) StatementNoShortIf else Statement
     *</b>
     */
    export class IfThenElseStatement extends Ast implements IIfThenElseStatement
    {
        private  _if : AstToken;
        private  _LPAREN : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;
        private  _StatementNoShortIf : IStatementNoShortIf;
        private  _else : AstToken;
        private  _Statement : IStatement;

        public  getif() : AstToken{ return this._if; }
        public  setif( _if : AstToken) : void { this._if = _if; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getStatementNoShortIf() : IStatementNoShortIf{ return this._StatementNoShortIf; }
        public  setStatementNoShortIf( _StatementNoShortIf : IStatementNoShortIf) : void { this._StatementNoShortIf = _StatementNoShortIf; }
        public  getelse() : AstToken{ return this._else; }
        public  setelse( _else : AstToken) : void { this._else = _else; }
        public  getStatement() : IStatement{ return this._Statement; }
        public  setStatement( _Statement : IStatement) : void { this._Statement = _Statement; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _if : AstToken,
                     _LPAREN : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken,
                     _StatementNoShortIf : IStatementNoShortIf,
                     _else : AstToken,
                     _Statement : IStatement)
        {
            super(leftIToken, rightIToken)

            this._if = _if;
            (<Ast> _if).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            (<Ast> _StatementNoShortIf).setParent(this);
            this._else = _else;
            (<Ast> _else).setParent(this);
            this._Statement = _Statement;
            (<Ast> _Statement).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._if)  list.add(this._if);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._StatementNoShortIf)  list.add(this._StatementNoShortIf);
            if(this._else)  list.add(this._else);
            if(this._Statement)  list.add(this._Statement);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitIfThenElseStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitIfThenElseStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitIfThenElseStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitIfThenElseStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 283:  IfThenElseStatementNoShortIf ::= if ( Expression ) StatementNoShortIf else StatementNoShortIf
     *</b>
     */
    export class IfThenElseStatementNoShortIf extends Ast implements IIfThenElseStatementNoShortIf
    {
        private  _if : AstToken;
        private  _LPAREN : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;
        private  _StatementNoShortIf : IStatementNoShortIf;
        private  _else : AstToken;
        private  _StatementNoShortIf7 : IStatementNoShortIf;

        public  getif() : AstToken{ return this._if; }
        public  setif( _if : AstToken) : void { this._if = _if; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getStatementNoShortIf() : IStatementNoShortIf{ return this._StatementNoShortIf; }
        public  setStatementNoShortIf( _StatementNoShortIf : IStatementNoShortIf) : void { this._StatementNoShortIf = _StatementNoShortIf; }
        public  getelse() : AstToken{ return this._else; }
        public  setelse( _else : AstToken) : void { this._else = _else; }
        public  getStatementNoShortIf7() : IStatementNoShortIf{ return this._StatementNoShortIf7; }
        public  setStatementNoShortIf7( _StatementNoShortIf7 : IStatementNoShortIf) : void { this._StatementNoShortIf7 = _StatementNoShortIf7; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _if : AstToken,
                     _LPAREN : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken,
                     _StatementNoShortIf : IStatementNoShortIf,
                     _else : AstToken,
                     _StatementNoShortIf7 : IStatementNoShortIf)
        {
            super(leftIToken, rightIToken)

            this._if = _if;
            (<Ast> _if).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            (<Ast> _StatementNoShortIf).setParent(this);
            this._else = _else;
            (<Ast> _else).setParent(this);
            this._StatementNoShortIf7 = _StatementNoShortIf7;
            (<Ast> _StatementNoShortIf7).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._if)  list.add(this._if);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._StatementNoShortIf)  list.add(this._StatementNoShortIf);
            if(this._else)  list.add(this._else);
            if(this._StatementNoShortIf7)  list.add(this._StatementNoShortIf7);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitIfThenElseStatementNoShortIf(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitIfThenElseStatementNoShortIf(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitIfThenElseStatementNoShortIf(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitIfThenElseStatementNoShortIf(this, o); }
    }

    /**
     *<b>
    *<li>Rule 284:  EmptyStatement ::= ;
     *</b>
     */
    export class EmptyStatement extends AstToken implements IEmptyStatement
    {
        public  getSEMICOLON() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEmptyStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEmptyStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEmptyStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEmptyStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 285:  LabeledStatement ::= identifier : Statement
     *</b>
     */
    export class LabeledStatement extends Ast implements ILabeledStatement
    {
        private  _identifier : identifier;
        private  _COLON : AstToken;
        private  _Statement : IStatement;

        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getCOLON() : AstToken{ return this._COLON; }
        public  setCOLON( _COLON : AstToken) : void { this._COLON = _COLON; }
        public  getStatement() : IStatement{ return this._Statement; }
        public  setStatement( _Statement : IStatement) : void { this._Statement = _Statement; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _identifier : identifier,
                     _COLON : AstToken,
                     _Statement : IStatement)
        {
            super(leftIToken, rightIToken)

            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._COLON = _COLON;
            (<Ast> _COLON).setParent(this);
            this._Statement = _Statement;
            (<Ast> _Statement).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._identifier)  list.add(this._identifier);
            if(this._COLON)  list.add(this._COLON);
            if(this._Statement)  list.add(this._Statement);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLabeledStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLabeledStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLabeledStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLabeledStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 286:  LabeledStatementNoShortIf ::= identifier : StatementNoShortIf
     *</b>
     */
    export class LabeledStatementNoShortIf extends Ast implements ILabeledStatementNoShortIf
    {
        private  _identifier : identifier;
        private  _COLON : AstToken;
        private  _StatementNoShortIf : IStatementNoShortIf;

        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getCOLON() : AstToken{ return this._COLON; }
        public  setCOLON( _COLON : AstToken) : void { this._COLON = _COLON; }
        public  getStatementNoShortIf() : IStatementNoShortIf{ return this._StatementNoShortIf; }
        public  setStatementNoShortIf( _StatementNoShortIf : IStatementNoShortIf) : void { this._StatementNoShortIf = _StatementNoShortIf; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _identifier : identifier,
                     _COLON : AstToken,
                     _StatementNoShortIf : IStatementNoShortIf)
        {
            super(leftIToken, rightIToken)

            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._COLON = _COLON;
            (<Ast> _COLON).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            (<Ast> _StatementNoShortIf).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._identifier)  list.add(this._identifier);
            if(this._COLON)  list.add(this._COLON);
            if(this._StatementNoShortIf)  list.add(this._StatementNoShortIf);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLabeledStatementNoShortIf(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLabeledStatementNoShortIf(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLabeledStatementNoShortIf(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLabeledStatementNoShortIf(this, o); }
    }

    /**
     *<b>
    *<li>Rule 287:  ExpressionStatement ::= StatementExpression ;
     *</b>
     */
    export class ExpressionStatement extends Ast implements IExpressionStatement
    {
        private  _StatementExpression : IStatementExpression;
        private  _SEMICOLON : AstToken;

        public  getStatementExpression() : IStatementExpression{ return this._StatementExpression; }
        public  setStatementExpression( _StatementExpression : IStatementExpression) : void { this._StatementExpression = _StatementExpression; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _StatementExpression : IStatementExpression,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._StatementExpression = _StatementExpression;
            (<Ast> _StatementExpression).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._StatementExpression)  list.add(this._StatementExpression);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitExpressionStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitExpressionStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitExpressionStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitExpressionStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 297:  SwitchStatement ::= switch ( Expression ) SwitchBlock
     *</b>
     */
    export class SwitchStatement extends Ast implements ISwitchStatement
    {
        private  _switch : AstToken;
        private  _LPAREN : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;
        private  _SwitchBlock : SwitchBlock;

        public  getswitch() : AstToken{ return this._switch; }
        public  setswitch( _switch : AstToken) : void { this._switch = _switch; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getSwitchBlock() : SwitchBlock{ return this._SwitchBlock; }
        public  setSwitchBlock( _SwitchBlock : SwitchBlock) : void { this._SwitchBlock = _SwitchBlock; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _switch : AstToken,
                     _LPAREN : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken,
                     _SwitchBlock : SwitchBlock)
        {
            super(leftIToken, rightIToken)

            this._switch = _switch;
            (<Ast> _switch).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._SwitchBlock = _SwitchBlock;
            (<Ast> _SwitchBlock).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._switch)  list.add(this._switch);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._SwitchBlock)  list.add(this._SwitchBlock);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSwitchStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSwitchStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSwitchStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSwitchStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 298:  SwitchBlock ::= { SwitchBlockStatementGroupsopt SwitchLabelsopt }
     *</b>
     */
    export class SwitchBlock extends Ast implements ISwitchBlock
    {
        private  _LBRACE : AstToken;
        private  _SwitchBlockStatementGroupsopt : ISwitchBlockStatementGroupsopt| null;
        private  _SwitchLabelsopt : ISwitchLabelsopt| null;
        private  _RBRACE : AstToken;

        public  getLBRACE() : AstToken{ return this._LBRACE; }
        public  setLBRACE( _LBRACE : AstToken) : void { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getSwitchBlockStatementGroupsopt</b> may be <b>null</b>
         */
        public  getSwitchBlockStatementGroupsopt() : ISwitchBlockStatementGroupsopt | null { return this._SwitchBlockStatementGroupsopt; }
        public  setSwitchBlockStatementGroupsopt( _SwitchBlockStatementGroupsopt : ISwitchBlockStatementGroupsopt) : void { this._SwitchBlockStatementGroupsopt = _SwitchBlockStatementGroupsopt; }
        /**
         * The value returned by <b>getSwitchLabelsopt</b> may be <b>null</b>
         */
        public  getSwitchLabelsopt() : ISwitchLabelsopt | null { return this._SwitchLabelsopt; }
        public  setSwitchLabelsopt( _SwitchLabelsopt : ISwitchLabelsopt) : void { this._SwitchLabelsopt = _SwitchLabelsopt; }
        public  getRBRACE() : AstToken{ return this._RBRACE; }
        public  setRBRACE( _RBRACE : AstToken) : void { this._RBRACE = _RBRACE; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACE : AstToken,
                     _SwitchBlockStatementGroupsopt : ISwitchBlockStatementGroupsopt| null,
                     _SwitchLabelsopt : ISwitchLabelsopt| null,
                     _RBRACE : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACE = _LBRACE;
            (<Ast> _LBRACE).setParent(this);
            this._SwitchBlockStatementGroupsopt = _SwitchBlockStatementGroupsopt;
            if (_SwitchBlockStatementGroupsopt) (<Ast> _SwitchBlockStatementGroupsopt).setParent(this);
            this._SwitchLabelsopt = _SwitchLabelsopt;
            if (_SwitchLabelsopt) (<Ast> _SwitchLabelsopt).setParent(this);
            this._RBRACE = _RBRACE;
            (<Ast> _RBRACE).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACE)  list.add(this._LBRACE);
            if(this._SwitchBlockStatementGroupsopt)  list.add(this._SwitchBlockStatementGroupsopt);
            if(this._SwitchLabelsopt)  list.add(this._SwitchLabelsopt);
            if(this._RBRACE)  list.add(this._RBRACE);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSwitchBlock(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSwitchBlock(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSwitchBlock(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSwitchBlock(this, o); }
    }

    /**
     *<em>
    *<li>Rule 299:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroup
     *</em>
     *<p>
     *<b>
    *<li>Rule 300:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup
     *</b>
     */
    export class SwitchBlockStatementGroups extends Ast implements ISwitchBlockStatementGroups
    {
        private  _SwitchBlockStatementGroups : ISwitchBlockStatementGroups;
        private  _SwitchBlockStatementGroup : SwitchBlockStatementGroup;

        public  getSwitchBlockStatementGroups() : ISwitchBlockStatementGroups{ return this._SwitchBlockStatementGroups; }
        public  setSwitchBlockStatementGroups( _SwitchBlockStatementGroups : ISwitchBlockStatementGroups) : void { this._SwitchBlockStatementGroups = _SwitchBlockStatementGroups; }
        public  getSwitchBlockStatementGroup() : SwitchBlockStatementGroup{ return this._SwitchBlockStatementGroup; }
        public  setSwitchBlockStatementGroup( _SwitchBlockStatementGroup : SwitchBlockStatementGroup) : void { this._SwitchBlockStatementGroup = _SwitchBlockStatementGroup; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _SwitchBlockStatementGroups : ISwitchBlockStatementGroups,
                     _SwitchBlockStatementGroup : SwitchBlockStatementGroup)
        {
            super(leftIToken, rightIToken)

            this._SwitchBlockStatementGroups = _SwitchBlockStatementGroups;
            (<Ast> _SwitchBlockStatementGroups).setParent(this);
            this._SwitchBlockStatementGroup = _SwitchBlockStatementGroup;
            (<Ast> _SwitchBlockStatementGroup).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._SwitchBlockStatementGroups)  list.add(this._SwitchBlockStatementGroups);
            if(this._SwitchBlockStatementGroup)  list.add(this._SwitchBlockStatementGroup);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSwitchBlockStatementGroups(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSwitchBlockStatementGroups(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSwitchBlockStatementGroups(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSwitchBlockStatementGroups(this, o); }
    }

    /**
     *<b>
    *<li>Rule 301:  SwitchBlockStatementGroup ::= SwitchLabels BlockStatements
     *</b>
     */
    export class SwitchBlockStatementGroup extends Ast implements ISwitchBlockStatementGroup
    {
        private  _SwitchLabels : ISwitchLabels;
        private  _BlockStatements : IBlockStatements;

        public  getSwitchLabels() : ISwitchLabels{ return this._SwitchLabels; }
        public  setSwitchLabels( _SwitchLabels : ISwitchLabels) : void { this._SwitchLabels = _SwitchLabels; }
        public  getBlockStatements() : IBlockStatements{ return this._BlockStatements; }
        public  setBlockStatements( _BlockStatements : IBlockStatements) : void { this._BlockStatements = _BlockStatements; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _SwitchLabels : ISwitchLabels,
                     _BlockStatements : IBlockStatements)
        {
            super(leftIToken, rightIToken)

            this._SwitchLabels = _SwitchLabels;
            (<Ast> _SwitchLabels).setParent(this);
            this._BlockStatements = _BlockStatements;
            (<Ast> _BlockStatements).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._SwitchLabels)  list.add(this._SwitchLabels);
            if(this._BlockStatements)  list.add(this._BlockStatements);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSwitchBlockStatementGroup(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSwitchBlockStatementGroup(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSwitchBlockStatementGroup(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSwitchBlockStatementGroup(this, o); }
    }

    /**
     *<em>
    *<li>Rule 302:  SwitchLabels ::= SwitchLabel
     *</em>
     *<p>
     *<b>
    *<li>Rule 303:  SwitchLabels ::= SwitchLabels SwitchLabel
     *</b>
     */
    export class SwitchLabels extends Ast implements ISwitchLabels
    {
        private  _SwitchLabels : ISwitchLabels;
        private  _SwitchLabel : ISwitchLabel;

        public  getSwitchLabels() : ISwitchLabels{ return this._SwitchLabels; }
        public  setSwitchLabels( _SwitchLabels : ISwitchLabels) : void { this._SwitchLabels = _SwitchLabels; }
        public  getSwitchLabel() : ISwitchLabel{ return this._SwitchLabel; }
        public  setSwitchLabel( _SwitchLabel : ISwitchLabel) : void { this._SwitchLabel = _SwitchLabel; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _SwitchLabels : ISwitchLabels,
                     _SwitchLabel : ISwitchLabel)
        {
            super(leftIToken, rightIToken)

            this._SwitchLabels = _SwitchLabels;
            (<Ast> _SwitchLabels).setParent(this);
            this._SwitchLabel = _SwitchLabel;
            (<Ast> _SwitchLabel).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._SwitchLabels)  list.add(this._SwitchLabels);
            if(this._SwitchLabel)  list.add(this._SwitchLabel);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSwitchLabels(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSwitchLabels(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSwitchLabels(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSwitchLabels(this, o); }
    }

    /**
     *<b>
    *<li>Rule 308:  WhileStatement ::= while ( Expression ) Statement
     *</b>
     */
    export class WhileStatement extends Ast implements IWhileStatement
    {
        private  _while : AstToken;
        private  _LPAREN : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;
        private  _Statement : IStatement;

        public  getwhile() : AstToken{ return this._while; }
        public  setwhile( _while : AstToken) : void { this._while = _while; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getStatement() : IStatement{ return this._Statement; }
        public  setStatement( _Statement : IStatement) : void { this._Statement = _Statement; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _while : AstToken,
                     _LPAREN : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken,
                     _Statement : IStatement)
        {
            super(leftIToken, rightIToken)

            this._while = _while;
            (<Ast> _while).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._Statement = _Statement;
            (<Ast> _Statement).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._while)  list.add(this._while);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._Statement)  list.add(this._Statement);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitWhileStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitWhileStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitWhileStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitWhileStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 309:  WhileStatementNoShortIf ::= while ( Expression ) StatementNoShortIf
     *</b>
     */
    export class WhileStatementNoShortIf extends Ast implements IWhileStatementNoShortIf
    {
        private  _while : AstToken;
        private  _LPAREN : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;
        private  _StatementNoShortIf : IStatementNoShortIf;

        public  getwhile() : AstToken{ return this._while; }
        public  setwhile( _while : AstToken) : void { this._while = _while; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getStatementNoShortIf() : IStatementNoShortIf{ return this._StatementNoShortIf; }
        public  setStatementNoShortIf( _StatementNoShortIf : IStatementNoShortIf) : void { this._StatementNoShortIf = _StatementNoShortIf; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _while : AstToken,
                     _LPAREN : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken,
                     _StatementNoShortIf : IStatementNoShortIf)
        {
            super(leftIToken, rightIToken)

            this._while = _while;
            (<Ast> _while).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            (<Ast> _StatementNoShortIf).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._while)  list.add(this._while);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._StatementNoShortIf)  list.add(this._StatementNoShortIf);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitWhileStatementNoShortIf(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitWhileStatementNoShortIf(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitWhileStatementNoShortIf(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitWhileStatementNoShortIf(this, o); }
    }

    /**
     *<b>
    *<li>Rule 310:  DoStatement ::= do Statement while ( Expression ) ;
     *</b>
     */
    export class DoStatement extends Ast implements IDoStatement
    {
        private  _do : AstToken;
        private  _Statement : IStatement;
        private  _while : AstToken;
        private  _LPAREN : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;
        private  _SEMICOLON : AstToken;

        public  getdo() : AstToken{ return this._do; }
        public  setdo( _do : AstToken) : void { this._do = _do; }
        public  getStatement() : IStatement{ return this._Statement; }
        public  setStatement( _Statement : IStatement) : void { this._Statement = _Statement; }
        public  getwhile() : AstToken{ return this._while; }
        public  setwhile( _while : AstToken) : void { this._while = _while; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _do : AstToken,
                     _Statement : IStatement,
                     _while : AstToken,
                     _LPAREN : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._do = _do;
            (<Ast> _do).setParent(this);
            this._Statement = _Statement;
            (<Ast> _Statement).setParent(this);
            this._while = _while;
            (<Ast> _while).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._do)  list.add(this._do);
            if(this._Statement)  list.add(this._Statement);
            if(this._while)  list.add(this._while);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitDoStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitDoStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitDoStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitDoStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 313:  BasicForStatement ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) Statement
     *</b>
     */
    export class BasicForStatement extends Ast implements IBasicForStatement
    {
        private  _for : AstToken;
        private  _LPAREN : AstToken;
        private  _ForInitopt : IForInitopt| null;
        private  _SEMICOLON : AstToken;
        private  _Expressionopt : IExpressionopt| null;
        private  _SEMICOLON6 : AstToken;
        private  _ForUpdateopt : IForUpdateopt| null;
        private  _RPAREN : AstToken;
        private  _Statement : IStatement;

        public  getfor() : AstToken{ return this._for; }
        public  setfor( _for : AstToken) : void { this._for = _for; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getForInitopt</b> may be <b>null</b>
         */
        public  getForInitopt() : IForInitopt | null { return this._ForInitopt; }
        public  setForInitopt( _ForInitopt : IForInitopt) : void { this._ForInitopt = _ForInitopt; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }
        /**
         * The value returned by <b>getExpressionopt</b> may be <b>null</b>
         */
        public  getExpressionopt() : IExpressionopt | null { return this._Expressionopt; }
        public  setExpressionopt( _Expressionopt : IExpressionopt) : void { this._Expressionopt = _Expressionopt; }
        public  getSEMICOLON6() : AstToken{ return this._SEMICOLON6; }
        public  setSEMICOLON6( _SEMICOLON6 : AstToken) : void { this._SEMICOLON6 = _SEMICOLON6; }
        /**
         * The value returned by <b>getForUpdateopt</b> may be <b>null</b>
         */
        public  getForUpdateopt() : IForUpdateopt | null { return this._ForUpdateopt; }
        public  setForUpdateopt( _ForUpdateopt : IForUpdateopt) : void { this._ForUpdateopt = _ForUpdateopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getStatement() : IStatement{ return this._Statement; }
        public  setStatement( _Statement : IStatement) : void { this._Statement = _Statement; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _for : AstToken,
                     _LPAREN : AstToken,
                     _ForInitopt : IForInitopt| null,
                     _SEMICOLON : AstToken,
                     _Expressionopt : IExpressionopt| null,
                     _SEMICOLON6 : AstToken,
                     _ForUpdateopt : IForUpdateopt| null,
                     _RPAREN : AstToken,
                     _Statement : IStatement)
        {
            super(leftIToken, rightIToken)

            this._for = _for;
            (<Ast> _for).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ForInitopt = _ForInitopt;
            if (_ForInitopt) (<Ast> _ForInitopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this._Expressionopt = _Expressionopt;
            if (_Expressionopt) (<Ast> _Expressionopt).setParent(this);
            this._SEMICOLON6 = _SEMICOLON6;
            (<Ast> _SEMICOLON6).setParent(this);
            this._ForUpdateopt = _ForUpdateopt;
            if (_ForUpdateopt) (<Ast> _ForUpdateopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._Statement = _Statement;
            (<Ast> _Statement).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._for)  list.add(this._for);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ForInitopt)  list.add(this._ForInitopt);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            if(this._Expressionopt)  list.add(this._Expressionopt);
            if(this._SEMICOLON6)  list.add(this._SEMICOLON6);
            if(this._ForUpdateopt)  list.add(this._ForUpdateopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._Statement)  list.add(this._Statement);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitBasicForStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitBasicForStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitBasicForStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitBasicForStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 314:  ForStatementNoShortIf ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) StatementNoShortIf
     *</b>
     */
    export class ForStatementNoShortIf extends Ast implements IForStatementNoShortIf
    {
        private  _for : AstToken;
        private  _LPAREN : AstToken;
        private  _ForInitopt : IForInitopt| null;
        private  _SEMICOLON : AstToken;
        private  _Expressionopt : IExpressionopt| null;
        private  _SEMICOLON6 : AstToken;
        private  _ForUpdateopt : IForUpdateopt| null;
        private  _RPAREN : AstToken;
        private  _StatementNoShortIf : IStatementNoShortIf;

        public  getfor() : AstToken{ return this._for; }
        public  setfor( _for : AstToken) : void { this._for = _for; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getForInitopt</b> may be <b>null</b>
         */
        public  getForInitopt() : IForInitopt | null { return this._ForInitopt; }
        public  setForInitopt( _ForInitopt : IForInitopt) : void { this._ForInitopt = _ForInitopt; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }
        /**
         * The value returned by <b>getExpressionopt</b> may be <b>null</b>
         */
        public  getExpressionopt() : IExpressionopt | null { return this._Expressionopt; }
        public  setExpressionopt( _Expressionopt : IExpressionopt) : void { this._Expressionopt = _Expressionopt; }
        public  getSEMICOLON6() : AstToken{ return this._SEMICOLON6; }
        public  setSEMICOLON6( _SEMICOLON6 : AstToken) : void { this._SEMICOLON6 = _SEMICOLON6; }
        /**
         * The value returned by <b>getForUpdateopt</b> may be <b>null</b>
         */
        public  getForUpdateopt() : IForUpdateopt | null { return this._ForUpdateopt; }
        public  setForUpdateopt( _ForUpdateopt : IForUpdateopt) : void { this._ForUpdateopt = _ForUpdateopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getStatementNoShortIf() : IStatementNoShortIf{ return this._StatementNoShortIf; }
        public  setStatementNoShortIf( _StatementNoShortIf : IStatementNoShortIf) : void { this._StatementNoShortIf = _StatementNoShortIf; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _for : AstToken,
                     _LPAREN : AstToken,
                     _ForInitopt : IForInitopt| null,
                     _SEMICOLON : AstToken,
                     _Expressionopt : IExpressionopt| null,
                     _SEMICOLON6 : AstToken,
                     _ForUpdateopt : IForUpdateopt| null,
                     _RPAREN : AstToken,
                     _StatementNoShortIf : IStatementNoShortIf)
        {
            super(leftIToken, rightIToken)

            this._for = _for;
            (<Ast> _for).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ForInitopt = _ForInitopt;
            if (_ForInitopt) (<Ast> _ForInitopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this._Expressionopt = _Expressionopt;
            if (_Expressionopt) (<Ast> _Expressionopt).setParent(this);
            this._SEMICOLON6 = _SEMICOLON6;
            (<Ast> _SEMICOLON6).setParent(this);
            this._ForUpdateopt = _ForUpdateopt;
            if (_ForUpdateopt) (<Ast> _ForUpdateopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            (<Ast> _StatementNoShortIf).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._for)  list.add(this._for);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ForInitopt)  list.add(this._ForInitopt);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            if(this._Expressionopt)  list.add(this._Expressionopt);
            if(this._SEMICOLON6)  list.add(this._SEMICOLON6);
            if(this._ForUpdateopt)  list.add(this._ForUpdateopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._StatementNoShortIf)  list.add(this._StatementNoShortIf);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitForStatementNoShortIf(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitForStatementNoShortIf(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitForStatementNoShortIf(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitForStatementNoShortIf(this, o); }
    }

    /**
     *<em>
    *<li>Rule 318:  StatementExpressionList ::= StatementExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 319:  StatementExpressionList ::= StatementExpressionList , StatementExpression
     *</b>
     */
    export class StatementExpressionList extends Ast implements IStatementExpressionList
    {
        private  _StatementExpressionList : IStatementExpressionList;
        private  _COMMA : AstToken;
        private  _StatementExpression : IStatementExpression;

        public  getStatementExpressionList() : IStatementExpressionList{ return this._StatementExpressionList; }
        public  setStatementExpressionList( _StatementExpressionList : IStatementExpressionList) : void { this._StatementExpressionList = _StatementExpressionList; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getStatementExpression() : IStatementExpression{ return this._StatementExpression; }
        public  setStatementExpression( _StatementExpression : IStatementExpression) : void { this._StatementExpression = _StatementExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _StatementExpressionList : IStatementExpressionList,
                     _COMMA : AstToken,
                     _StatementExpression : IStatementExpression)
        {
            super(leftIToken, rightIToken)

            this._StatementExpressionList = _StatementExpressionList;
            (<Ast> _StatementExpressionList).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._StatementExpression = _StatementExpression;
            (<Ast> _StatementExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._StatementExpressionList)  list.add(this._StatementExpressionList);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._StatementExpression)  list.add(this._StatementExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitStatementExpressionList(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitStatementExpressionList(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitStatementExpressionList(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitStatementExpressionList(this, o); }
    }

    /**
     *<b>
    *<li>Rule 320:  EnhancedForStatement ::= for ( FormalParameter : Expression ) Statement
     *</b>
     */
    export class EnhancedForStatement extends Ast implements IEnhancedForStatement
    {
        private  _for : AstToken;
        private  _LPAREN : AstToken;
        private  _FormalParameter : FormalParameter;
        private  _COLON : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;
        private  _Statement : IStatement;

        public  getfor() : AstToken{ return this._for; }
        public  setfor( _for : AstToken) : void { this._for = _for; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getFormalParameter() : FormalParameter{ return this._FormalParameter; }
        public  setFormalParameter( _FormalParameter : FormalParameter) : void { this._FormalParameter = _FormalParameter; }
        public  getCOLON() : AstToken{ return this._COLON; }
        public  setCOLON( _COLON : AstToken) : void { this._COLON = _COLON; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getStatement() : IStatement{ return this._Statement; }
        public  setStatement( _Statement : IStatement) : void { this._Statement = _Statement; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _for : AstToken,
                     _LPAREN : AstToken,
                     _FormalParameter : FormalParameter,
                     _COLON : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken,
                     _Statement : IStatement)
        {
            super(leftIToken, rightIToken)

            this._for = _for;
            (<Ast> _for).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._FormalParameter = _FormalParameter;
            (<Ast> _FormalParameter).setParent(this);
            this._COLON = _COLON;
            (<Ast> _COLON).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._Statement = _Statement;
            (<Ast> _Statement).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._for)  list.add(this._for);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._FormalParameter)  list.add(this._FormalParameter);
            if(this._COLON)  list.add(this._COLON);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._Statement)  list.add(this._Statement);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEnhancedForStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEnhancedForStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEnhancedForStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEnhancedForStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 321:  BreakStatement ::= break identifieropt ;
     *</b>
     */
    export class BreakStatement extends Ast implements IBreakStatement
    {
        private  _break : AstToken;
        private  _identifieropt : identifier| null;
        private  _SEMICOLON : AstToken;

        public  getbreak() : AstToken{ return this._break; }
        public  setbreak( _break : AstToken) : void { this._break = _break; }
        /**
         * The value returned by <b>getidentifieropt</b> may be <b>null</b>
         */
        public  getidentifieropt() : identifier | null { return this._identifieropt; }
        public  setidentifieropt( _identifieropt : identifier) : void { this._identifieropt = _identifieropt; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _break : AstToken,
                     _identifieropt : identifier| null,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._break = _break;
            (<Ast> _break).setParent(this);
            this._identifieropt = _identifieropt;
            if (_identifieropt) (<Ast> _identifieropt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._break)  list.add(this._break);
            if(this._identifieropt)  list.add(this._identifieropt);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitBreakStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitBreakStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitBreakStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitBreakStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 322:  ContinueStatement ::= continue identifieropt ;
     *</b>
     */
    export class ContinueStatement extends Ast implements IContinueStatement
    {
        private  _continue : AstToken;
        private  _identifieropt : identifier| null;
        private  _SEMICOLON : AstToken;

        public  getcontinue() : AstToken{ return this._continue; }
        public  setcontinue( _continue : AstToken) : void { this._continue = _continue; }
        /**
         * The value returned by <b>getidentifieropt</b> may be <b>null</b>
         */
        public  getidentifieropt() : identifier | null { return this._identifieropt; }
        public  setidentifieropt( _identifieropt : identifier) : void { this._identifieropt = _identifieropt; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _continue : AstToken,
                     _identifieropt : identifier| null,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._continue = _continue;
            (<Ast> _continue).setParent(this);
            this._identifieropt = _identifieropt;
            if (_identifieropt) (<Ast> _identifieropt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._continue)  list.add(this._continue);
            if(this._identifieropt)  list.add(this._identifieropt);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitContinueStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitContinueStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitContinueStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitContinueStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 323:  ReturnStatement ::= return Expressionopt ;
     *</b>
     */
    export class ReturnStatement extends Ast implements IReturnStatement
    {
        private  _return : AstToken;
        private  _Expressionopt : IExpressionopt| null;
        private  _SEMICOLON : AstToken;

        public  getreturn() : AstToken{ return this._return; }
        public  setreturn( _return : AstToken) : void { this._return = _return; }
        /**
         * The value returned by <b>getExpressionopt</b> may be <b>null</b>
         */
        public  getExpressionopt() : IExpressionopt | null { return this._Expressionopt; }
        public  setExpressionopt( _Expressionopt : IExpressionopt) : void { this._Expressionopt = _Expressionopt; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _return : AstToken,
                     _Expressionopt : IExpressionopt| null,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._return = _return;
            (<Ast> _return).setParent(this);
            this._Expressionopt = _Expressionopt;
            if (_Expressionopt) (<Ast> _Expressionopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._return)  list.add(this._return);
            if(this._Expressionopt)  list.add(this._Expressionopt);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitReturnStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitReturnStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitReturnStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitReturnStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 324:  ThrowStatement ::= throw Expression ;
     *</b>
     */
    export class ThrowStatement extends Ast implements IThrowStatement
    {
        private  _throw : AstToken;
        private  _Expression : IExpression;
        private  _SEMICOLON : AstToken;

        public  getthrow() : AstToken{ return this._throw; }
        public  setthrow( _throw : AstToken) : void { this._throw = _throw; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _throw : AstToken,
                     _Expression : IExpression,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._throw = _throw;
            (<Ast> _throw).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._throw)  list.add(this._throw);
            if(this._Expression)  list.add(this._Expression);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitThrowStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitThrowStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitThrowStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitThrowStatement(this, o); }
    }

    /**
     *<b>
    *<li>Rule 325:  SynchronizedStatement ::= synchronized ( Expression ) Block
     *</b>
     */
    export class SynchronizedStatement extends Ast implements ISynchronizedStatement
    {
        private  _synchronized : AstToken;
        private  _LPAREN : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;
        private  _Block : Block;

        public  getsynchronized() : AstToken{ return this._synchronized; }
        public  setsynchronized( _synchronized : AstToken) : void { this._synchronized = _synchronized; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getBlock() : Block{ return this._Block; }
        public  setBlock( _Block : Block) : void { this._Block = _Block; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _synchronized : AstToken,
                     _LPAREN : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken,
                     _Block : Block)
        {
            super(leftIToken, rightIToken)

            this._synchronized = _synchronized;
            (<Ast> _synchronized).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._Block = _Block;
            (<Ast> _Block).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._synchronized)  list.add(this._synchronized);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._Block)  list.add(this._Block);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSynchronizedStatement(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSynchronizedStatement(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSynchronizedStatement(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSynchronizedStatement(this, o); }
    }

    /**
     *<em>
    *<li>Rule 328:  Catches ::= CatchClause
     *</em>
     *<p>
     *<b>
    *<li>Rule 329:  Catches ::= Catches CatchClause
     *</b>
     */
    export class Catches extends Ast implements ICatches
    {
        private  _Catches : ICatches;
        private  _CatchClause : CatchClause;

        public  getCatches() : ICatches{ return this._Catches; }
        public  setCatches( _Catches : ICatches) : void { this._Catches = _Catches; }
        public  getCatchClause() : CatchClause{ return this._CatchClause; }
        public  setCatchClause( _CatchClause : CatchClause) : void { this._CatchClause = _CatchClause; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Catches : ICatches,
                     _CatchClause : CatchClause)
        {
            super(leftIToken, rightIToken)

            this._Catches = _Catches;
            (<Ast> _Catches).setParent(this);
            this._CatchClause = _CatchClause;
            (<Ast> _CatchClause).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Catches)  list.add(this._Catches);
            if(this._CatchClause)  list.add(this._CatchClause);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitCatches(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitCatches(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitCatches(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitCatches(this, o); }
    }

    /**
     *<b>
    *<li>Rule 330:  CatchClause ::= catch ( FormalParameter ) Block
     *</b>
     */
    export class CatchClause extends Ast implements ICatchClause
    {
        private  _catch : AstToken;
        private  _LPAREN : AstToken;
        private  _FormalParameter : FormalParameter;
        private  _RPAREN : AstToken;
        private  _Block : Block;

        public  getcatch() : AstToken{ return this._catch; }
        public  setcatch( _catch : AstToken) : void { this._catch = _catch; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getFormalParameter() : FormalParameter{ return this._FormalParameter; }
        public  setFormalParameter( _FormalParameter : FormalParameter) : void { this._FormalParameter = _FormalParameter; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getBlock() : Block{ return this._Block; }
        public  setBlock( _Block : Block) : void { this._Block = _Block; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _catch : AstToken,
                     _LPAREN : AstToken,
                     _FormalParameter : FormalParameter,
                     _RPAREN : AstToken,
                     _Block : Block)
        {
            super(leftIToken, rightIToken)

            this._catch = _catch;
            (<Ast> _catch).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._FormalParameter = _FormalParameter;
            (<Ast> _FormalParameter).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._Block = _Block;
            (<Ast> _Block).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._catch)  list.add(this._catch);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._FormalParameter)  list.add(this._FormalParameter);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._Block)  list.add(this._Block);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitCatchClause(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitCatchClause(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitCatchClause(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitCatchClause(this, o); }
    }

    /**
     *<b>
    *<li>Rule 331:  Finally ::= finally Block
     *</b>
     */
    export class Finally extends Ast implements IFinally
    {
        private  _finally : AstToken;
        private  _Block : Block;

        public  getfinally() : AstToken{ return this._finally; }
        public  setfinally( _finally : AstToken) : void { this._finally = _finally; }
        public  getBlock() : Block{ return this._Block; }
        public  setBlock( _Block : Block) : void { this._Block = _Block; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _finally : AstToken,
                     _Block : Block)
        {
            super(leftIToken, rightIToken)

            this._finally = _finally;
            (<Ast> _finally).setParent(this);
            this._Block = _Block;
            (<Ast> _Block).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._finally)  list.add(this._finally);
            if(this._Block)  list.add(this._Block);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFinally(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFinally(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFinally(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFinally(this, o); }
    }

    /**
     *<em>
    *<li>Rule 356:  ArgumentList ::= Expression
     *</em>
     *<p>
     *<b>
    *<li>Rule 357:  ArgumentList ::= ArgumentList , Expression
     *</b>
     */
    export class ArgumentList extends Ast implements IArgumentList
    {
        private  _ArgumentList : IArgumentList;
        private  _COMMA : AstToken;
        private  _Expression : IExpression;

        public  getArgumentList() : IArgumentList{ return this._ArgumentList; }
        public  setArgumentList( _ArgumentList : IArgumentList) : void { this._ArgumentList = _ArgumentList; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ArgumentList : IArgumentList,
                     _COMMA : AstToken,
                     _Expression : IExpression)
        {
            super(leftIToken, rightIToken)

            this._ArgumentList = _ArgumentList;
            (<Ast> _ArgumentList).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ArgumentList)  list.add(this._ArgumentList);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._Expression)  list.add(this._Expression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArgumentList(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArgumentList(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArgumentList(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArgumentList(this, o); }
    }

    /**
     *<em>
    *<li>Rule 362:  DimExprs ::= DimExpr
     *</em>
     *<p>
     *<b>
    *<li>Rule 363:  DimExprs ::= DimExprs DimExpr
     *</b>
     */
    export class DimExprs extends Ast implements IDimExprs
    {
        private  _DimExprs : IDimExprs;
        private  _DimExpr : DimExpr;

        public  getDimExprs() : IDimExprs{ return this._DimExprs; }
        public  setDimExprs( _DimExprs : IDimExprs) : void { this._DimExprs = _DimExprs; }
        public  getDimExpr() : DimExpr{ return this._DimExpr; }
        public  setDimExpr( _DimExpr : DimExpr) : void { this._DimExpr = _DimExpr; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _DimExprs : IDimExprs,
                     _DimExpr : DimExpr)
        {
            super(leftIToken, rightIToken)

            this._DimExprs = _DimExprs;
            (<Ast> _DimExprs).setParent(this);
            this._DimExpr = _DimExpr;
            (<Ast> _DimExpr).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._DimExprs)  list.add(this._DimExprs);
            if(this._DimExpr)  list.add(this._DimExpr);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitDimExprs(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitDimExprs(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitDimExprs(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitDimExprs(this, o); }
    }

    /**
     *<b>
    *<li>Rule 364:  DimExpr ::= [ Expression ]
     *</b>
     */
    export class DimExpr extends Ast implements IDimExpr
    {
        private  _LBRACKET : AstToken;
        private  _Expression : IExpression;
        private  _RBRACKET : AstToken;

        public  getLBRACKET() : AstToken{ return this._LBRACKET; }
        public  setLBRACKET( _LBRACKET : AstToken) : void { this._LBRACKET = _LBRACKET; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRBRACKET() : AstToken{ return this._RBRACKET; }
        public  setRBRACKET( _RBRACKET : AstToken) : void { this._RBRACKET = _RBRACKET; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACKET : AstToken,
                     _Expression : IExpression,
                     _RBRACKET : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACKET = _LBRACKET;
            (<Ast> _LBRACKET).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RBRACKET = _RBRACKET;
            (<Ast> _RBRACKET).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACKET)  list.add(this._LBRACKET);
            if(this._Expression)  list.add(this._Expression);
            if(this._RBRACKET)  list.add(this._RBRACKET);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitDimExpr(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitDimExpr(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitDimExpr(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitDimExpr(this, o); }
    }

    /**
     *<b>
    *<li>Rule 381:  PostIncrementExpression ::= PostfixExpression ++
     *</b>
     */
    export class PostIncrementExpression extends Ast implements IPostIncrementExpression
    {
        private  _PostfixExpression : IPostfixExpression;
        private  _PLUS_PLUS : AstToken;

        public  getPostfixExpression() : IPostfixExpression{ return this._PostfixExpression; }
        public  setPostfixExpression( _PostfixExpression : IPostfixExpression) : void { this._PostfixExpression = _PostfixExpression; }
        public  getPLUS_PLUS() : AstToken{ return this._PLUS_PLUS; }
        public  setPLUS_PLUS( _PLUS_PLUS : AstToken) : void { this._PLUS_PLUS = _PLUS_PLUS; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _PostfixExpression : IPostfixExpression,
                     _PLUS_PLUS : AstToken)
        {
            super(leftIToken, rightIToken)

            this._PostfixExpression = _PostfixExpression;
            (<Ast> _PostfixExpression).setParent(this);
            this._PLUS_PLUS = _PLUS_PLUS;
            (<Ast> _PLUS_PLUS).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._PostfixExpression)  list.add(this._PostfixExpression);
            if(this._PLUS_PLUS)  list.add(this._PLUS_PLUS);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPostIncrementExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPostIncrementExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPostIncrementExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPostIncrementExpression(this, o); }
    }

    /**
     *<b>
    *<li>Rule 382:  PostDecrementExpression ::= PostfixExpression --
     *</b>
     */
    export class PostDecrementExpression extends Ast implements IPostDecrementExpression
    {
        private  _PostfixExpression : IPostfixExpression;
        private  _MINUS_MINUS : AstToken;

        public  getPostfixExpression() : IPostfixExpression{ return this._PostfixExpression; }
        public  setPostfixExpression( _PostfixExpression : IPostfixExpression) : void { this._PostfixExpression = _PostfixExpression; }
        public  getMINUS_MINUS() : AstToken{ return this._MINUS_MINUS; }
        public  setMINUS_MINUS( _MINUS_MINUS : AstToken) : void { this._MINUS_MINUS = _MINUS_MINUS; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _PostfixExpression : IPostfixExpression,
                     _MINUS_MINUS : AstToken)
        {
            super(leftIToken, rightIToken)

            this._PostfixExpression = _PostfixExpression;
            (<Ast> _PostfixExpression).setParent(this);
            this._MINUS_MINUS = _MINUS_MINUS;
            (<Ast> _MINUS_MINUS).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._PostfixExpression)  list.add(this._PostfixExpression);
            if(this._MINUS_MINUS)  list.add(this._MINUS_MINUS);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPostDecrementExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPostDecrementExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPostDecrementExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPostDecrementExpression(this, o); }
    }

    /**
     *<b>
    *<li>Rule 388:  PreIncrementExpression ::= ++ UnaryExpression
     *</b>
     */
    export class PreIncrementExpression extends Ast implements IPreIncrementExpression
    {
        private  _PLUS_PLUS : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getPLUS_PLUS() : AstToken{ return this._PLUS_PLUS; }
        public  setPLUS_PLUS( _PLUS_PLUS : AstToken) : void { this._PLUS_PLUS = _PLUS_PLUS; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _PLUS_PLUS : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._PLUS_PLUS = _PLUS_PLUS;
            (<Ast> _PLUS_PLUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._PLUS_PLUS)  list.add(this._PLUS_PLUS);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPreIncrementExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPreIncrementExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPreIncrementExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPreIncrementExpression(this, o); }
    }

    /**
     *<b>
    *<li>Rule 389:  PreDecrementExpression ::= -- UnaryExpression
     *</b>
     */
    export class PreDecrementExpression extends Ast implements IPreDecrementExpression
    {
        private  _MINUS_MINUS : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getMINUS_MINUS() : AstToken{ return this._MINUS_MINUS; }
        public  setMINUS_MINUS( _MINUS_MINUS : AstToken) : void { this._MINUS_MINUS = _MINUS_MINUS; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MINUS_MINUS : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._MINUS_MINUS = _MINUS_MINUS;
            (<Ast> _MINUS_MINUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MINUS_MINUS)  list.add(this._MINUS_MINUS);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPreDecrementExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPreDecrementExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPreDecrementExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPreDecrementExpression(this, o); }
    }

    /**
     *<em>
    *<li>Rule 416:  AndExpression ::= EqualityExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 417:  AndExpression ::= AndExpression & EqualityExpression
     *</b>
     */
    export class AndExpression extends Ast implements IAndExpression
    {
        private  _AndExpression : IAndExpression;
        private  _AND : AstToken;
        private  _EqualityExpression : IEqualityExpression;

        public  getAndExpression() : IAndExpression{ return this._AndExpression; }
        public  setAndExpression( _AndExpression : IAndExpression) : void { this._AndExpression = _AndExpression; }
        public  getAND() : AstToken{ return this._AND; }
        public  setAND( _AND : AstToken) : void { this._AND = _AND; }
        public  getEqualityExpression() : IEqualityExpression{ return this._EqualityExpression; }
        public  setEqualityExpression( _EqualityExpression : IEqualityExpression) : void { this._EqualityExpression = _EqualityExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AndExpression : IAndExpression,
                     _AND : AstToken,
                     _EqualityExpression : IEqualityExpression)
        {
            super(leftIToken, rightIToken)

            this._AndExpression = _AndExpression;
            (<Ast> _AndExpression).setParent(this);
            this._AND = _AND;
            (<Ast> _AND).setParent(this);
            this._EqualityExpression = _EqualityExpression;
            (<Ast> _EqualityExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AndExpression)  list.add(this._AndExpression);
            if(this._AND)  list.add(this._AND);
            if(this._EqualityExpression)  list.add(this._EqualityExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAndExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAndExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAndExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAndExpression(this, o); }
    }

    /**
     *<em>
    *<li>Rule 418:  ExclusiveOrExpression ::= AndExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 419:  ExclusiveOrExpression ::= ExclusiveOrExpression ^ AndExpression
     *</b>
     */
    export class ExclusiveOrExpression extends Ast implements IExclusiveOrExpression
    {
        private  _ExclusiveOrExpression : IExclusiveOrExpression;
        private  _XOR : AstToken;
        private  _AndExpression : IAndExpression;

        public  getExclusiveOrExpression() : IExclusiveOrExpression{ return this._ExclusiveOrExpression; }
        public  setExclusiveOrExpression( _ExclusiveOrExpression : IExclusiveOrExpression) : void { this._ExclusiveOrExpression = _ExclusiveOrExpression; }
        public  getXOR() : AstToken{ return this._XOR; }
        public  setXOR( _XOR : AstToken) : void { this._XOR = _XOR; }
        public  getAndExpression() : IAndExpression{ return this._AndExpression; }
        public  setAndExpression( _AndExpression : IAndExpression) : void { this._AndExpression = _AndExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ExclusiveOrExpression : IExclusiveOrExpression,
                     _XOR : AstToken,
                     _AndExpression : IAndExpression)
        {
            super(leftIToken, rightIToken)

            this._ExclusiveOrExpression = _ExclusiveOrExpression;
            (<Ast> _ExclusiveOrExpression).setParent(this);
            this._XOR = _XOR;
            (<Ast> _XOR).setParent(this);
            this._AndExpression = _AndExpression;
            (<Ast> _AndExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ExclusiveOrExpression)  list.add(this._ExclusiveOrExpression);
            if(this._XOR)  list.add(this._XOR);
            if(this._AndExpression)  list.add(this._AndExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitExclusiveOrExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitExclusiveOrExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitExclusiveOrExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitExclusiveOrExpression(this, o); }
    }

    /**
     *<em>
    *<li>Rule 420:  InclusiveOrExpression ::= ExclusiveOrExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 421:  InclusiveOrExpression ::= InclusiveOrExpression | ExclusiveOrExpression
     *</b>
     */
    export class InclusiveOrExpression extends Ast implements IInclusiveOrExpression
    {
        private  _InclusiveOrExpression : IInclusiveOrExpression;
        private  _OR : AstToken;
        private  _ExclusiveOrExpression : IExclusiveOrExpression;

        public  getInclusiveOrExpression() : IInclusiveOrExpression{ return this._InclusiveOrExpression; }
        public  setInclusiveOrExpression( _InclusiveOrExpression : IInclusiveOrExpression) : void { this._InclusiveOrExpression = _InclusiveOrExpression; }
        public  getOR() : AstToken{ return this._OR; }
        public  setOR( _OR : AstToken) : void { this._OR = _OR; }
        public  getExclusiveOrExpression() : IExclusiveOrExpression{ return this._ExclusiveOrExpression; }
        public  setExclusiveOrExpression( _ExclusiveOrExpression : IExclusiveOrExpression) : void { this._ExclusiveOrExpression = _ExclusiveOrExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _InclusiveOrExpression : IInclusiveOrExpression,
                     _OR : AstToken,
                     _ExclusiveOrExpression : IExclusiveOrExpression)
        {
            super(leftIToken, rightIToken)

            this._InclusiveOrExpression = _InclusiveOrExpression;
            (<Ast> _InclusiveOrExpression).setParent(this);
            this._OR = _OR;
            (<Ast> _OR).setParent(this);
            this._ExclusiveOrExpression = _ExclusiveOrExpression;
            (<Ast> _ExclusiveOrExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._InclusiveOrExpression)  list.add(this._InclusiveOrExpression);
            if(this._OR)  list.add(this._OR);
            if(this._ExclusiveOrExpression)  list.add(this._ExclusiveOrExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInclusiveOrExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInclusiveOrExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInclusiveOrExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInclusiveOrExpression(this, o); }
    }

    /**
     *<em>
    *<li>Rule 422:  ConditionalAndExpression ::= InclusiveOrExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 423:  ConditionalAndExpression ::= ConditionalAndExpression && InclusiveOrExpression
     *</b>
     */
    export class ConditionalAndExpression extends Ast implements IConditionalAndExpression
    {
        private  _ConditionalAndExpression : IConditionalAndExpression;
        private  _AND_AND : AstToken;
        private  _InclusiveOrExpression : IInclusiveOrExpression;

        public  getConditionalAndExpression() : IConditionalAndExpression{ return this._ConditionalAndExpression; }
        public  setConditionalAndExpression( _ConditionalAndExpression : IConditionalAndExpression) : void { this._ConditionalAndExpression = _ConditionalAndExpression; }
        public  getAND_AND() : AstToken{ return this._AND_AND; }
        public  setAND_AND( _AND_AND : AstToken) : void { this._AND_AND = _AND_AND; }
        public  getInclusiveOrExpression() : IInclusiveOrExpression{ return this._InclusiveOrExpression; }
        public  setInclusiveOrExpression( _InclusiveOrExpression : IInclusiveOrExpression) : void { this._InclusiveOrExpression = _InclusiveOrExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ConditionalAndExpression : IConditionalAndExpression,
                     _AND_AND : AstToken,
                     _InclusiveOrExpression : IInclusiveOrExpression)
        {
            super(leftIToken, rightIToken)

            this._ConditionalAndExpression = _ConditionalAndExpression;
            (<Ast> _ConditionalAndExpression).setParent(this);
            this._AND_AND = _AND_AND;
            (<Ast> _AND_AND).setParent(this);
            this._InclusiveOrExpression = _InclusiveOrExpression;
            (<Ast> _InclusiveOrExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ConditionalAndExpression)  list.add(this._ConditionalAndExpression);
            if(this._AND_AND)  list.add(this._AND_AND);
            if(this._InclusiveOrExpression)  list.add(this._InclusiveOrExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConditionalAndExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConditionalAndExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConditionalAndExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConditionalAndExpression(this, o); }
    }

    /**
     *<em>
    *<li>Rule 424:  ConditionalOrExpression ::= ConditionalAndExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 425:  ConditionalOrExpression ::= ConditionalOrExpression || ConditionalAndExpression
     *</b>
     */
    export class ConditionalOrExpression extends Ast implements IConditionalOrExpression
    {
        private  _ConditionalOrExpression : IConditionalOrExpression;
        private  _OR_OR : AstToken;
        private  _ConditionalAndExpression : IConditionalAndExpression;

        public  getConditionalOrExpression() : IConditionalOrExpression{ return this._ConditionalOrExpression; }
        public  setConditionalOrExpression( _ConditionalOrExpression : IConditionalOrExpression) : void { this._ConditionalOrExpression = _ConditionalOrExpression; }
        public  getOR_OR() : AstToken{ return this._OR_OR; }
        public  setOR_OR( _OR_OR : AstToken) : void { this._OR_OR = _OR_OR; }
        public  getConditionalAndExpression() : IConditionalAndExpression{ return this._ConditionalAndExpression; }
        public  setConditionalAndExpression( _ConditionalAndExpression : IConditionalAndExpression) : void { this._ConditionalAndExpression = _ConditionalAndExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ConditionalOrExpression : IConditionalOrExpression,
                     _OR_OR : AstToken,
                     _ConditionalAndExpression : IConditionalAndExpression)
        {
            super(leftIToken, rightIToken)

            this._ConditionalOrExpression = _ConditionalOrExpression;
            (<Ast> _ConditionalOrExpression).setParent(this);
            this._OR_OR = _OR_OR;
            (<Ast> _OR_OR).setParent(this);
            this._ConditionalAndExpression = _ConditionalAndExpression;
            (<Ast> _ConditionalAndExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ConditionalOrExpression)  list.add(this._ConditionalOrExpression);
            if(this._OR_OR)  list.add(this._OR_OR);
            if(this._ConditionalAndExpression)  list.add(this._ConditionalAndExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConditionalOrExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConditionalOrExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConditionalOrExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConditionalOrExpression(this, o); }
    }

    /**
     *<em>
    *<li>Rule 426:  ConditionalExpression ::= ConditionalOrExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 427:  ConditionalExpression ::= ConditionalOrExpression ? Expression : ConditionalExpression
     *</b>
     */
    export class ConditionalExpression extends Ast implements IConditionalExpression
    {
        private  _ConditionalOrExpression : IConditionalOrExpression;
        private  _QUESTION : AstToken;
        private  _Expression : IExpression;
        private  _COLON : AstToken;
        private  _ConditionalExpression : IConditionalExpression;

        public  getConditionalOrExpression() : IConditionalOrExpression{ return this._ConditionalOrExpression; }
        public  setConditionalOrExpression( _ConditionalOrExpression : IConditionalOrExpression) : void { this._ConditionalOrExpression = _ConditionalOrExpression; }
        public  getQUESTION() : AstToken{ return this._QUESTION; }
        public  setQUESTION( _QUESTION : AstToken) : void { this._QUESTION = _QUESTION; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getCOLON() : AstToken{ return this._COLON; }
        public  setCOLON( _COLON : AstToken) : void { this._COLON = _COLON; }
        public  getConditionalExpression() : IConditionalExpression{ return this._ConditionalExpression; }
        public  setConditionalExpression( _ConditionalExpression : IConditionalExpression) : void { this._ConditionalExpression = _ConditionalExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ConditionalOrExpression : IConditionalOrExpression,
                     _QUESTION : AstToken,
                     _Expression : IExpression,
                     _COLON : AstToken,
                     _ConditionalExpression : IConditionalExpression)
        {
            super(leftIToken, rightIToken)

            this._ConditionalOrExpression = _ConditionalOrExpression;
            (<Ast> _ConditionalOrExpression).setParent(this);
            this._QUESTION = _QUESTION;
            (<Ast> _QUESTION).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._COLON = _COLON;
            (<Ast> _COLON).setParent(this);
            this._ConditionalExpression = _ConditionalExpression;
            (<Ast> _ConditionalExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ConditionalOrExpression)  list.add(this._ConditionalOrExpression);
            if(this._QUESTION)  list.add(this._QUESTION);
            if(this._Expression)  list.add(this._Expression);
            if(this._COLON)  list.add(this._COLON);
            if(this._ConditionalExpression)  list.add(this._ConditionalExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConditionalExpression(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConditionalExpression(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConditionalExpression(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConditionalExpression(this, o); }
    }

    /**
     *<b>
    *<li>Rule 430:  Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression
     *</b>
     */
    export class Assignment extends Ast implements IAssignment
    {
        private  _LeftHandSide : ILeftHandSide;
        private  _AssignmentOperator : IAssignmentOperator;
        private  _AssignmentExpression : IAssignmentExpression;

        public  getLeftHandSide() : ILeftHandSide{ return this._LeftHandSide; }
        public  setLeftHandSide( _LeftHandSide : ILeftHandSide) : void { this._LeftHandSide = _LeftHandSide; }
        public  getAssignmentOperator() : IAssignmentOperator{ return this._AssignmentOperator; }
        public  setAssignmentOperator( _AssignmentOperator : IAssignmentOperator) : void { this._AssignmentOperator = _AssignmentOperator; }
        public  getAssignmentExpression() : IAssignmentExpression{ return this._AssignmentExpression; }
        public  setAssignmentExpression( _AssignmentExpression : IAssignmentExpression) : void { this._AssignmentExpression = _AssignmentExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LeftHandSide : ILeftHandSide,
                     _AssignmentOperator : IAssignmentOperator,
                     _AssignmentExpression : IAssignmentExpression)
        {
            super(leftIToken, rightIToken)

            this._LeftHandSide = _LeftHandSide;
            (<Ast> _LeftHandSide).setParent(this);
            this._AssignmentOperator = _AssignmentOperator;
            (<Ast> _AssignmentOperator).setParent(this);
            this._AssignmentExpression = _AssignmentExpression;
            (<Ast> _AssignmentExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LeftHandSide)  list.add(this._LeftHandSide);
            if(this._AssignmentOperator)  list.add(this._AssignmentOperator);
            if(this._AssignmentExpression)  list.add(this._AssignmentExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignment(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignment(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignment(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignment(this, o); }
    }

    /**
     *<em>
    *<li>Rule 492:  ,opt ::= %Empty
     *</em>
     *<p>
     *<b>
    *<li>Rule 493:  ,opt ::= ,
     *</b>
     */
    export class Commaopt extends AstToken implements ICommaopt
    {
        public  getCOMMA() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitCommaopt(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitCommaopt(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitCommaopt(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitCommaopt(this, o); }
    }

    /**
     *<em>
    *<li>Rule 504:  ...opt ::= %Empty
     *</em>
     *<p>
     *<b>
    *<li>Rule 505:  ...opt ::= ...
     *</b>
     */
    export class Ellipsisopt extends AstToken implements IEllipsisopt
    {
        public  getELLIPSIS() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEllipsisopt(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEllipsisopt(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEllipsisopt(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEllipsisopt(this, o); }
    }

    /**
     *<b>
    *<li>Rule 5:  LPGUserAction ::= %BeginAction BlockStatementsopt %EndAction
     *</b>
     */
    export class LPGUserAction0 extends Ast implements ILPGUserAction
    {
        private  _BeginAction : AstToken;
        private  _BlockStatementsopt : IBlockStatementsopt| null;
        private  _EndAction : AstToken;

        public  getBeginAction() : AstToken{ return this._BeginAction; }
        public  setBeginAction( _BeginAction : AstToken) : void { this._BeginAction = _BeginAction; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public  getBlockStatementsopt() : IBlockStatementsopt | null { return this._BlockStatementsopt; }
        public  setBlockStatementsopt( _BlockStatementsopt : IBlockStatementsopt) : void { this._BlockStatementsopt = _BlockStatementsopt; }
        public  getEndAction() : AstToken{ return this._EndAction; }
        public  setEndAction( _EndAction : AstToken) : void { this._EndAction = _EndAction; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _BeginAction : AstToken,
                     _BlockStatementsopt : IBlockStatementsopt| null,
                     _EndAction : AstToken)
        {
            super(leftIToken, rightIToken)

            this._BeginAction = _BeginAction;
            (<Ast> _BeginAction).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt) (<Ast> _BlockStatementsopt).setParent(this);
            this._EndAction = _EndAction;
            (<Ast> _EndAction).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._BeginAction)  list.add(this._BeginAction);
            if(this._BlockStatementsopt)  list.add(this._BlockStatementsopt);
            if(this._EndAction)  list.add(this._EndAction);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLPGUserAction0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLPGUserAction0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLPGUserAction0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLPGUserAction0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 6:  LPGUserAction ::= $BeginJava BlockStatementsopt $EndJava
     *</b>
     */
    export class LPGUserAction1 extends Ast implements ILPGUserAction
    {
        private  _BeginJava : AstToken;
        private  _BlockStatementsopt : IBlockStatementsopt| null;
        private  _EndJava : AstToken;

        public  getBeginJava() : AstToken{ return this._BeginJava; }
        public  setBeginJava( _BeginJava : AstToken) : void { this._BeginJava = _BeginJava; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public  getBlockStatementsopt() : IBlockStatementsopt | null { return this._BlockStatementsopt; }
        public  setBlockStatementsopt( _BlockStatementsopt : IBlockStatementsopt) : void { this._BlockStatementsopt = _BlockStatementsopt; }
        public  getEndJava() : AstToken{ return this._EndJava; }
        public  setEndJava( _EndJava : AstToken) : void { this._EndJava = _EndJava; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _BeginJava : AstToken,
                     _BlockStatementsopt : IBlockStatementsopt| null,
                     _EndJava : AstToken)
        {
            super(leftIToken, rightIToken)

            this._BeginJava = _BeginJava;
            (<Ast> _BeginJava).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt) (<Ast> _BlockStatementsopt).setParent(this);
            this._EndJava = _EndJava;
            (<Ast> _EndJava).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._BeginJava)  list.add(this._BeginJava);
            if(this._BlockStatementsopt)  list.add(this._BlockStatementsopt);
            if(this._EndJava)  list.add(this._EndJava);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLPGUserAction1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLPGUserAction1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLPGUserAction1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLPGUserAction1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 7:  LPGUserAction ::= $NoAction
     *</b>
     */
    export class LPGUserAction2 extends AstToken implements ILPGUserAction
    {
        public  getNoAction() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLPGUserAction2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLPGUserAction2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLPGUserAction2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLPGUserAction2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 8:  LPGUserAction ::= $NullAction
     *</b>
     */
    export class LPGUserAction3 extends AstToken implements ILPGUserAction
    {
        public  getNullAction() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLPGUserAction3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLPGUserAction3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLPGUserAction3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLPGUserAction3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 9:  LPGUserAction ::= $BadAction
     *</b>
     */
    export class LPGUserAction4 extends AstToken implements ILPGUserAction
    {
        public  getBadAction() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLPGUserAction4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLPGUserAction4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLPGUserAction4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLPGUserAction4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 16:  IntegralType ::= byte
     *</b>
     */
    export class IntegralType0 extends AstToken implements IIntegralType
    {
        public  getbyte() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitIntegralType0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitIntegralType0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitIntegralType0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitIntegralType0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 17:  IntegralType ::= short
     *</b>
     */
    export class IntegralType1 extends AstToken implements IIntegralType
    {
        public  getshort() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitIntegralType1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitIntegralType1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitIntegralType1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitIntegralType1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 18:  IntegralType ::= int
     *</b>
     */
    export class IntegralType2 extends AstToken implements IIntegralType
    {
        public  getint() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitIntegralType2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitIntegralType2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitIntegralType2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitIntegralType2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 19:  IntegralType ::= long
     *</b>
     */
    export class IntegralType3 extends AstToken implements IIntegralType
    {
        public  getlong() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitIntegralType3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitIntegralType3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitIntegralType3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitIntegralType3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 20:  IntegralType ::= char
     *</b>
     */
    export class IntegralType4 extends AstToken implements IIntegralType
    {
        public  getchar() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitIntegralType4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitIntegralType4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitIntegralType4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitIntegralType4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 21:  FloatingPointType ::= float
     *</b>
     */
    export class FloatingPointType0 extends AstToken implements IFloatingPointType
    {
        public  getfloat() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFloatingPointType0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFloatingPointType0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFloatingPointType0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFloatingPointType0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 22:  FloatingPointType ::= double
     *</b>
     */
    export class FloatingPointType1 extends AstToken implements IFloatingPointType
    {
        public  getdouble() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFloatingPointType1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFloatingPointType1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFloatingPointType1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFloatingPointType1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 45:  WildcardBounds ::= extends ReferenceType
     *</b>
     */
    export class WildcardBounds0 extends Ast implements IWildcardBounds
    {
        private  _extends : AstToken;
        private  _ReferenceType : IReferenceType;

        public  getextends() : AstToken{ return this._extends; }
        public  setextends( _extends : AstToken) : void { this._extends = _extends; }
        public  getReferenceType() : IReferenceType{ return this._ReferenceType; }
        public  setReferenceType( _ReferenceType : IReferenceType) : void { this._ReferenceType = _ReferenceType; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _extends : AstToken,
                     _ReferenceType : IReferenceType)
        {
            super(leftIToken, rightIToken)

            this._extends = _extends;
            (<Ast> _extends).setParent(this);
            this._ReferenceType = _ReferenceType;
            (<Ast> _ReferenceType).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._extends)  list.add(this._extends);
            if(this._ReferenceType)  list.add(this._ReferenceType);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitWildcardBounds0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitWildcardBounds0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitWildcardBounds0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitWildcardBounds0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 46:  WildcardBounds ::= super ReferenceType
     *</b>
     */
    export class WildcardBounds1 extends Ast implements IWildcardBounds
    {
        private  _super : AstToken;
        private  _ReferenceType : IReferenceType;

        public  getsuper() : AstToken{ return this._super; }
        public  setsuper( _super : AstToken) : void { this._super = _super; }
        public  getReferenceType() : IReferenceType{ return this._ReferenceType; }
        public  setReferenceType( _ReferenceType : IReferenceType) : void { this._ReferenceType = _ReferenceType; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _super : AstToken,
                     _ReferenceType : IReferenceType)
        {
            super(leftIToken, rightIToken)

            this._super = _super;
            (<Ast> _super).setParent(this);
            this._ReferenceType = _ReferenceType;
            (<Ast> _ReferenceType).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._super)  list.add(this._super);
            if(this._ReferenceType)  list.add(this._ReferenceType);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitWildcardBounds1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitWildcardBounds1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitWildcardBounds1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitWildcardBounds1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 80:  ClassModifier ::= public
     *</b>
     */
    export class ClassModifier0 extends AstToken implements IClassModifier
    {
        public  getpublic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassModifier0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassModifier0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassModifier0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassModifier0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 81:  ClassModifier ::= protected
     *</b>
     */
    export class ClassModifier1 extends AstToken implements IClassModifier
    {
        public  getprotected() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassModifier1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassModifier1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassModifier1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassModifier1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 82:  ClassModifier ::= private
     *</b>
     */
    export class ClassModifier2 extends AstToken implements IClassModifier
    {
        public  getprivate() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassModifier2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassModifier2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassModifier2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassModifier2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 83:  ClassModifier ::= abstract
     *</b>
     */
    export class ClassModifier3 extends AstToken implements IClassModifier
    {
        public  getabstract() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassModifier3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassModifier3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassModifier3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassModifier3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 84:  ClassModifier ::= static
     *</b>
     */
    export class ClassModifier4 extends AstToken implements IClassModifier
    {
        public  getstatic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassModifier4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassModifier4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassModifier4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassModifier4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 85:  ClassModifier ::= final
     *</b>
     */
    export class ClassModifier5 extends AstToken implements IClassModifier
    {
        public  getfinal() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassModifier5(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassModifier5(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassModifier5(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassModifier5(this, o); }
    }

    /**
     *<b>
    *<li>Rule 86:  ClassModifier ::= strictfp
     *</b>
     */
    export class ClassModifier6 extends AstToken implements IClassModifier
    {
        public  getstrictfp() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassModifier6(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassModifier6(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassModifier6(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassModifier6(this, o); }
    }

    /**
     *<b>
    *<li>Rule 118:  FieldModifier ::= public
     *</b>
     */
    export class FieldModifier0 extends AstToken implements IFieldModifier
    {
        public  getpublic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldModifier0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldModifier0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldModifier0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldModifier0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 119:  FieldModifier ::= protected
     *</b>
     */
    export class FieldModifier1 extends AstToken implements IFieldModifier
    {
        public  getprotected() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldModifier1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldModifier1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldModifier1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldModifier1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 120:  FieldModifier ::= private
     *</b>
     */
    export class FieldModifier2 extends AstToken implements IFieldModifier
    {
        public  getprivate() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldModifier2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldModifier2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldModifier2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldModifier2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 121:  FieldModifier ::= static
     *</b>
     */
    export class FieldModifier3 extends AstToken implements IFieldModifier
    {
        public  getstatic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldModifier3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldModifier3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldModifier3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldModifier3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 122:  FieldModifier ::= final
     *</b>
     */
    export class FieldModifier4 extends AstToken implements IFieldModifier
    {
        public  getfinal() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldModifier4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldModifier4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldModifier4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldModifier4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 123:  FieldModifier ::= transient
     *</b>
     */
    export class FieldModifier5 extends AstToken implements IFieldModifier
    {
        public  gettransient() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldModifier5(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldModifier5(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldModifier5(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldModifier5(this, o); }
    }

    /**
     *<b>
    *<li>Rule 124:  FieldModifier ::= volatile
     *</b>
     */
    export class FieldModifier6 extends AstToken implements IFieldModifier
    {
        public  getvolatile() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldModifier6(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldModifier6(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldModifier6(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldModifier6(this, o); }
    }

    /**
     *<b>
    *<li>Rule 129:  MethodDeclarator ::= identifier ( FormalParameterListopt )
     *</b>
     */
    export class MethodDeclarator0 extends Ast implements IMethodDeclarator
    {
        private  _identifier : identifier;
        private  _LPAREN : AstToken;
        private  _FormalParameterListopt : IFormalParameterListopt| null;
        private  _RPAREN : AstToken;

        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getFormalParameterListopt</b> may be <b>null</b>
         */
        public  getFormalParameterListopt() : IFormalParameterListopt | null { return this._FormalParameterListopt; }
        public  setFormalParameterListopt( _FormalParameterListopt : IFormalParameterListopt) : void { this._FormalParameterListopt = _FormalParameterListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _identifier : identifier,
                     _LPAREN : AstToken,
                     _FormalParameterListopt : IFormalParameterListopt| null,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._FormalParameterListopt = _FormalParameterListopt;
            if (_FormalParameterListopt) (<Ast> _FormalParameterListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._identifier)  list.add(this._identifier);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._FormalParameterListopt)  list.add(this._FormalParameterListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodDeclarator0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodDeclarator0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodDeclarator0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodDeclarator0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 130:  MethodDeclarator ::= MethodDeclarator [ ]
     *</b>
     */
    export class MethodDeclarator1 extends Ast implements IMethodDeclarator
    {
        private  _MethodDeclarator : IMethodDeclarator;
        private  _LBRACKET : AstToken;
        private  _RBRACKET : AstToken;

        public  getMethodDeclarator() : IMethodDeclarator{ return this._MethodDeclarator; }
        public  setMethodDeclarator( _MethodDeclarator : IMethodDeclarator) : void { this._MethodDeclarator = _MethodDeclarator; }
        public  getLBRACKET() : AstToken{ return this._LBRACKET; }
        public  setLBRACKET( _LBRACKET : AstToken) : void { this._LBRACKET = _LBRACKET; }
        public  getRBRACKET() : AstToken{ return this._RBRACKET; }
        public  setRBRACKET( _RBRACKET : AstToken) : void { this._RBRACKET = _RBRACKET; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MethodDeclarator : IMethodDeclarator,
                     _LBRACKET : AstToken,
                     _RBRACKET : AstToken)
        {
            super(leftIToken, rightIToken)

            this._MethodDeclarator = _MethodDeclarator;
            (<Ast> _MethodDeclarator).setParent(this);
            this._LBRACKET = _LBRACKET;
            (<Ast> _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            (<Ast> _RBRACKET).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MethodDeclarator)  list.add(this._MethodDeclarator);
            if(this._LBRACKET)  list.add(this._LBRACKET);
            if(this._RBRACKET)  list.add(this._RBRACKET);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodDeclarator1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodDeclarator1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodDeclarator1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodDeclarator1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 144:  MethodModifier ::= public
     *</b>
     */
    export class MethodModifier0 extends AstToken implements IMethodModifier
    {
        public  getpublic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifier0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifier0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifier0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifier0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 145:  MethodModifier ::= protected
     *</b>
     */
    export class MethodModifier1 extends AstToken implements IMethodModifier
    {
        public  getprotected() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifier1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifier1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifier1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifier1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 146:  MethodModifier ::= private
     *</b>
     */
    export class MethodModifier2 extends AstToken implements IMethodModifier
    {
        public  getprivate() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifier2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifier2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifier2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifier2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 147:  MethodModifier ::= abstract
     *</b>
     */
    export class MethodModifier3 extends AstToken implements IMethodModifier
    {
        public  getabstract() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifier3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifier3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifier3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifier3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 148:  MethodModifier ::= static
     *</b>
     */
    export class MethodModifier4 extends AstToken implements IMethodModifier
    {
        public  getstatic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifier4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifier4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifier4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifier4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 149:  MethodModifier ::= final
     *</b>
     */
    export class MethodModifier5 extends AstToken implements IMethodModifier
    {
        public  getfinal() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifier5(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifier5(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifier5(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifier5(this, o); }
    }

    /**
     *<b>
    *<li>Rule 150:  MethodModifier ::= synchronized
     *</b>
     */
    export class MethodModifier6 extends AstToken implements IMethodModifier
    {
        public  getsynchronized() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifier6(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifier6(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifier6(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifier6(this, o); }
    }

    /**
     *<b>
    *<li>Rule 151:  MethodModifier ::= native
     *</b>
     */
    export class MethodModifier7 extends AstToken implements IMethodModifier
    {
        public  getnative() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifier7(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifier7(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifier7(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifier7(this, o); }
    }

    /**
     *<b>
    *<li>Rule 152:  MethodModifier ::= strictfp
     *</b>
     */
    export class MethodModifier8 extends AstToken implements IMethodModifier
    {
        public  getstrictfp() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodModifier8(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodModifier8(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodModifier8(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodModifier8(this, o); }
    }

    /**
     *<b>
    *<li>Rule 168:  ConstructorModifier ::= public
     *</b>
     */
    export class ConstructorModifier0 extends AstToken implements IConstructorModifier
    {
        public  getpublic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstructorModifier0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstructorModifier0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstructorModifier0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstructorModifier0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 169:  ConstructorModifier ::= protected
     *</b>
     */
    export class ConstructorModifier1 extends AstToken implements IConstructorModifier
    {
        public  getprotected() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstructorModifier1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstructorModifier1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstructorModifier1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstructorModifier1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 170:  ConstructorModifier ::= private
     *</b>
     */
    export class ConstructorModifier2 extends AstToken implements IConstructorModifier
    {
        public  getprivate() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstructorModifier2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstructorModifier2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstructorModifier2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstructorModifier2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 172:  ExplicitConstructorInvocation ::= TypeArgumentsopt this ( ArgumentListopt ) ;
     *</b>
     */
    export class ExplicitConstructorInvocation0 extends Ast implements IExplicitConstructorInvocation
    {
        private  _TypeArgumentsopt : TypeArguments| null;
        private  _this : AstToken;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;
        private  _SEMICOLON : AstToken;

        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public  getthis() : AstToken{ return this._this; }
        public  setthis( _this : AstToken) : void { this._this = _this; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeArgumentsopt : TypeArguments| null,
                     _this : AstToken,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this._this = _this;
            (<Ast> _this).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            if(this._this)  list.add(this._this);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitExplicitConstructorInvocation0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitExplicitConstructorInvocation0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitExplicitConstructorInvocation0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitExplicitConstructorInvocation0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 173:  ExplicitConstructorInvocation ::= TypeArgumentsopt super ( ArgumentListopt ) ;
     *</b>
     */
    export class ExplicitConstructorInvocation1 extends Ast implements IExplicitConstructorInvocation
    {
        private  _TypeArgumentsopt : TypeArguments| null;
        private  _super : AstToken;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;
        private  _SEMICOLON : AstToken;

        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public  getsuper() : AstToken{ return this._super; }
        public  setsuper( _super : AstToken) : void { this._super = _super; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeArgumentsopt : TypeArguments| null,
                     _super : AstToken,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this._super = _super;
            (<Ast> _super).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            if(this._super)  list.add(this._super);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitExplicitConstructorInvocation1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitExplicitConstructorInvocation1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitExplicitConstructorInvocation1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitExplicitConstructorInvocation1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 174:  ExplicitConstructorInvocation ::= Primary . TypeArgumentsopt super ( ArgumentListopt ) ;
     *</b>
     */
    export class ExplicitConstructorInvocation2 extends Ast implements IExplicitConstructorInvocation
    {
        private  _Primary : IPrimary;
        private  _DOT : AstToken;
        private  _TypeArgumentsopt : TypeArguments| null;
        private  _super : AstToken;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;
        private  _SEMICOLON : AstToken;

        public  getPrimary() : IPrimary{ return this._Primary; }
        public  setPrimary( _Primary : IPrimary) : void { this._Primary = _Primary; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public  getsuper() : AstToken{ return this._super; }
        public  setsuper( _super : AstToken) : void { this._super = _super; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Primary : IPrimary,
                     _DOT : AstToken,
                     _TypeArgumentsopt : TypeArguments| null,
                     _super : AstToken,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._Primary = _Primary;
            (<Ast> _Primary).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this._super = _super;
            (<Ast> _super).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Primary)  list.add(this._Primary);
            if(this._DOT)  list.add(this._DOT);
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            if(this._super)  list.add(this._super);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitExplicitConstructorInvocation2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitExplicitConstructorInvocation2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitExplicitConstructorInvocation2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitExplicitConstructorInvocation2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 188:  InterfaceModifier ::= public
     *</b>
     */
    export class InterfaceModifier0 extends AstToken implements IInterfaceModifier
    {
        public  getpublic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceModifier0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceModifier0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceModifier0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceModifier0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 189:  InterfaceModifier ::= protected
     *</b>
     */
    export class InterfaceModifier1 extends AstToken implements IInterfaceModifier
    {
        public  getprotected() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceModifier1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceModifier1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceModifier1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceModifier1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 190:  InterfaceModifier ::= private
     *</b>
     */
    export class InterfaceModifier2 extends AstToken implements IInterfaceModifier
    {
        public  getprivate() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceModifier2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceModifier2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceModifier2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceModifier2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 191:  InterfaceModifier ::= abstract
     *</b>
     */
    export class InterfaceModifier3 extends AstToken implements IInterfaceModifier
    {
        public  getabstract() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceModifier3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceModifier3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceModifier3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceModifier3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 192:  InterfaceModifier ::= static
     *</b>
     */
    export class InterfaceModifier4 extends AstToken implements IInterfaceModifier
    {
        public  getstatic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceModifier4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceModifier4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceModifier4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceModifier4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 193:  InterfaceModifier ::= strictfp
     *</b>
     */
    export class InterfaceModifier5 extends AstToken implements IInterfaceModifier
    {
        public  getstrictfp() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitInterfaceModifier5(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitInterfaceModifier5(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitInterfaceModifier5(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitInterfaceModifier5(this, o); }
    }

    /**
     *<b>
    *<li>Rule 194:  ExtendsInterfaces ::= extends InterfaceType
     *</b>
     */
    export class ExtendsInterfaces0 extends Ast implements IExtendsInterfaces
    {
        private  _extends : AstToken;
        private  _InterfaceType : InterfaceType;

        public  getextends() : AstToken{ return this._extends; }
        public  setextends( _extends : AstToken) : void { this._extends = _extends; }
        public  getInterfaceType() : InterfaceType{ return this._InterfaceType; }
        public  setInterfaceType( _InterfaceType : InterfaceType) : void { this._InterfaceType = _InterfaceType; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _extends : AstToken,
                     _InterfaceType : InterfaceType)
        {
            super(leftIToken, rightIToken)

            this._extends = _extends;
            (<Ast> _extends).setParent(this);
            this._InterfaceType = _InterfaceType;
            (<Ast> _InterfaceType).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._extends)  list.add(this._extends);
            if(this._InterfaceType)  list.add(this._InterfaceType);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitExtendsInterfaces0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitExtendsInterfaces0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitExtendsInterfaces0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitExtendsInterfaces0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 195:  ExtendsInterfaces ::= ExtendsInterfaces , InterfaceType
     *</b>
     */
    export class ExtendsInterfaces1 extends Ast implements IExtendsInterfaces
    {
        private  _ExtendsInterfaces : IExtendsInterfaces;
        private  _COMMA : AstToken;
        private  _InterfaceType : InterfaceType;

        public  getExtendsInterfaces() : IExtendsInterfaces{ return this._ExtendsInterfaces; }
        public  setExtendsInterfaces( _ExtendsInterfaces : IExtendsInterfaces) : void { this._ExtendsInterfaces = _ExtendsInterfaces; }
        public  getCOMMA() : AstToken{ return this._COMMA; }
        public  setCOMMA( _COMMA : AstToken) : void { this._COMMA = _COMMA; }
        public  getInterfaceType() : InterfaceType{ return this._InterfaceType; }
        public  setInterfaceType( _InterfaceType : InterfaceType) : void { this._InterfaceType = _InterfaceType; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ExtendsInterfaces : IExtendsInterfaces,
                     _COMMA : AstToken,
                     _InterfaceType : InterfaceType)
        {
            super(leftIToken, rightIToken)

            this._ExtendsInterfaces = _ExtendsInterfaces;
            (<Ast> _ExtendsInterfaces).setParent(this);
            this._COMMA = _COMMA;
            (<Ast> _COMMA).setParent(this);
            this._InterfaceType = _InterfaceType;
            (<Ast> _InterfaceType).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ExtendsInterfaces)  list.add(this._ExtendsInterfaces);
            if(this._COMMA)  list.add(this._COMMA);
            if(this._InterfaceType)  list.add(this._InterfaceType);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitExtendsInterfaces1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitExtendsInterfaces1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitExtendsInterfaces1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitExtendsInterfaces1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 208:  ConstantModifier ::= public
     *</b>
     */
    export class ConstantModifier0 extends AstToken implements IConstantModifier
    {
        public  getpublic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstantModifier0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstantModifier0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstantModifier0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstantModifier0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 209:  ConstantModifier ::= static
     *</b>
     */
    export class ConstantModifier1 extends AstToken implements IConstantModifier
    {
        public  getstatic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstantModifier1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstantModifier1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstantModifier1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstantModifier1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 210:  ConstantModifier ::= final
     *</b>
     */
    export class ConstantModifier2 extends AstToken implements IConstantModifier
    {
        public  getfinal() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitConstantModifier2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitConstantModifier2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitConstantModifier2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitConstantModifier2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 215:  AbstractMethodModifier ::= public
     *</b>
     */
    export class AbstractMethodModifier0 extends AstToken implements IAbstractMethodModifier
    {
        public  getpublic() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAbstractMethodModifier0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAbstractMethodModifier0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAbstractMethodModifier0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAbstractMethodModifier0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 216:  AbstractMethodModifier ::= abstract
     *</b>
     */
    export class AbstractMethodModifier1 extends AstToken implements IAbstractMethodModifier
    {
        public  getabstract() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAbstractMethodModifier1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAbstractMethodModifier1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAbstractMethodModifier1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAbstractMethodModifier1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 221:  AnnotationTypeElementDeclaration ::= AbstractMethodModifiersopt Type identifier ( ) DefaultValueopt ;
     *</b>
     */
    export class AnnotationTypeElementDeclaration0 extends Ast implements IAnnotationTypeElementDeclaration
    {
        private  _AbstractMethodModifiersopt : IAbstractMethodModifiersopt| null;
        private  _Type : IType;
        private  _identifier : identifier;
        private  _LPAREN : AstToken;
        private  _RPAREN : AstToken;
        private  _DefaultValueopt : DefaultValue| null;
        private  _SEMICOLON : AstToken;

        /**
         * The value returned by <b>getAbstractMethodModifiersopt</b> may be <b>null</b>
         */
        public  getAbstractMethodModifiersopt() : IAbstractMethodModifiersopt | null { return this._AbstractMethodModifiersopt; }
        public  setAbstractMethodModifiersopt( _AbstractMethodModifiersopt : IAbstractMethodModifiersopt) : void { this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt; }
        public  getType() : IType{ return this._Type; }
        public  setType( _Type : IType) : void { this._Type = _Type; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        /**
         * The value returned by <b>getDefaultValueopt</b> may be <b>null</b>
         */
        public  getDefaultValueopt() : DefaultValue | null { return this._DefaultValueopt; }
        public  setDefaultValueopt( _DefaultValueopt : DefaultValue) : void { this._DefaultValueopt = _DefaultValueopt; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AbstractMethodModifiersopt : IAbstractMethodModifiersopt| null,
                     _Type : IType,
                     _identifier : identifier,
                     _LPAREN : AstToken,
                     _RPAREN : AstToken,
                     _DefaultValueopt : DefaultValue| null,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt;
            if (_AbstractMethodModifiersopt) (<Ast> _AbstractMethodModifiersopt).setParent(this);
            this._Type = _Type;
            (<Ast> _Type).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._DefaultValueopt = _DefaultValueopt;
            if (_DefaultValueopt) (<Ast> _DefaultValueopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AbstractMethodModifiersopt)  list.add(this._AbstractMethodModifiersopt);
            if(this._Type)  list.add(this._Type);
            if(this._identifier)  list.add(this._identifier);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._DefaultValueopt)  list.add(this._DefaultValueopt);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAnnotationTypeElementDeclaration0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAnnotationTypeElementDeclaration0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAnnotationTypeElementDeclaration0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAnnotationTypeElementDeclaration0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 227:  AnnotationTypeElementDeclaration ::= ;
     *</b>
     */
    export class AnnotationTypeElementDeclaration1 extends AstToken implements IAnnotationTypeElementDeclaration
    {
        public  getSEMICOLON() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAnnotationTypeElementDeclaration1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAnnotationTypeElementDeclaration1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAnnotationTypeElementDeclaration1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAnnotationTypeElementDeclaration1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 295:  AssertStatement ::= assert Expression ;
     *</b>
     */
    export class AssertStatement0 extends Ast implements IAssertStatement
    {
        private  _assert : AstToken;
        private  _Expression : IExpression;
        private  _SEMICOLON : AstToken;

        public  getassert() : AstToken{ return this._assert; }
        public  setassert( _assert : AstToken) : void { this._assert = _assert; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _assert : AstToken,
                     _Expression : IExpression,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._assert = _assert;
            (<Ast> _assert).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._assert)  list.add(this._assert);
            if(this._Expression)  list.add(this._Expression);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssertStatement0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssertStatement0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssertStatement0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssertStatement0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 296:  AssertStatement ::= assert Expression : Expression ;
     *</b>
     */
    export class AssertStatement1 extends Ast implements IAssertStatement
    {
        private  _assert : AstToken;
        private  _Expression : IExpression;
        private  _COLON : AstToken;
        private  _Expression4 : IExpression;
        private  _SEMICOLON : AstToken;

        public  getassert() : AstToken{ return this._assert; }
        public  setassert( _assert : AstToken) : void { this._assert = _assert; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getCOLON() : AstToken{ return this._COLON; }
        public  setCOLON( _COLON : AstToken) : void { this._COLON = _COLON; }
        public  getExpression4() : IExpression{ return this._Expression4; }
        public  setExpression4( _Expression4 : IExpression) : void { this._Expression4 = _Expression4; }
        public  getSEMICOLON() : AstToken{ return this._SEMICOLON; }
        public  setSEMICOLON( _SEMICOLON : AstToken) : void { this._SEMICOLON = _SEMICOLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _assert : AstToken,
                     _Expression : IExpression,
                     _COLON : AstToken,
                     _Expression4 : IExpression,
                     _SEMICOLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._assert = _assert;
            (<Ast> _assert).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._COLON = _COLON;
            (<Ast> _COLON).setParent(this);
            this._Expression4 = _Expression4;
            (<Ast> _Expression4).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            (<Ast> _SEMICOLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._assert)  list.add(this._assert);
            if(this._Expression)  list.add(this._Expression);
            if(this._COLON)  list.add(this._COLON);
            if(this._Expression4)  list.add(this._Expression4);
            if(this._SEMICOLON)  list.add(this._SEMICOLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssertStatement1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssertStatement1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssertStatement1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssertStatement1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 304:  SwitchLabel ::= case ConstantExpression :
     *</b>
     */
    export class SwitchLabel0 extends Ast implements ISwitchLabel
    {
        private  _case : AstToken;
        private  _ConstantExpression : IConstantExpression;
        private  _COLON : AstToken;

        public  getcase() : AstToken{ return this._case; }
        public  setcase( _case : AstToken) : void { this._case = _case; }
        public  getConstantExpression() : IConstantExpression{ return this._ConstantExpression; }
        public  setConstantExpression( _ConstantExpression : IConstantExpression) : void { this._ConstantExpression = _ConstantExpression; }
        public  getCOLON() : AstToken{ return this._COLON; }
        public  setCOLON( _COLON : AstToken) : void { this._COLON = _COLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _case : AstToken,
                     _ConstantExpression : IConstantExpression,
                     _COLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._case = _case;
            (<Ast> _case).setParent(this);
            this._ConstantExpression = _ConstantExpression;
            (<Ast> _ConstantExpression).setParent(this);
            this._COLON = _COLON;
            (<Ast> _COLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._case)  list.add(this._case);
            if(this._ConstantExpression)  list.add(this._ConstantExpression);
            if(this._COLON)  list.add(this._COLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSwitchLabel0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSwitchLabel0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSwitchLabel0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSwitchLabel0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 305:  SwitchLabel ::= case EnumConstant :
     *</b>
     */
    export class SwitchLabel1 extends Ast implements ISwitchLabel
    {
        private  _case : AstToken;
        private  _EnumConstant : IEnumConstant;
        private  _COLON : AstToken;

        public  getcase() : AstToken{ return this._case; }
        public  setcase( _case : AstToken) : void { this._case = _case; }
        public  getEnumConstant() : IEnumConstant{ return this._EnumConstant; }
        public  setEnumConstant( _EnumConstant : IEnumConstant) : void { this._EnumConstant = _EnumConstant; }
        public  getCOLON() : AstToken{ return this._COLON; }
        public  setCOLON( _COLON : AstToken) : void { this._COLON = _COLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _case : AstToken,
                     _EnumConstant : IEnumConstant,
                     _COLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._case = _case;
            (<Ast> _case).setParent(this);
            this._EnumConstant = _EnumConstant;
            (<Ast> _EnumConstant).setParent(this);
            this._COLON = _COLON;
            (<Ast> _COLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._case)  list.add(this._case);
            if(this._EnumConstant)  list.add(this._EnumConstant);
            if(this._COLON)  list.add(this._COLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSwitchLabel1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSwitchLabel1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSwitchLabel1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSwitchLabel1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 306:  SwitchLabel ::= default :
     *</b>
     */
    export class SwitchLabel2 extends Ast implements ISwitchLabel
    {
        private  _default : AstToken;
        private  _COLON : AstToken;

        public  getdefault() : AstToken{ return this._default; }
        public  setdefault( _default : AstToken) : void { this._default = _default; }
        public  getCOLON() : AstToken{ return this._COLON; }
        public  setCOLON( _COLON : AstToken) : void { this._COLON = _COLON; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _default : AstToken,
                     _COLON : AstToken)
        {
            super(leftIToken, rightIToken)

            this._default = _default;
            (<Ast> _default).setParent(this);
            this._COLON = _COLON;
            (<Ast> _COLON).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._default)  list.add(this._default);
            if(this._COLON)  list.add(this._COLON);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitSwitchLabel2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitSwitchLabel2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitSwitchLabel2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitSwitchLabel2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 326:  TryStatement ::= try Block Catches
     *</b>
     */
    export class TryStatement0 extends Ast implements ITryStatement
    {
        private  _try : AstToken;
        private  _Block : Block;
        private  _Catches : ICatches;

        public  gettry() : AstToken{ return this._try; }
        public  settry( _try : AstToken) : void { this._try = _try; }
        public  getBlock() : Block{ return this._Block; }
        public  setBlock( _Block : Block) : void { this._Block = _Block; }
        public  getCatches() : ICatches{ return this._Catches; }
        public  setCatches( _Catches : ICatches) : void { this._Catches = _Catches; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _try : AstToken,
                     _Block : Block,
                     _Catches : ICatches)
        {
            super(leftIToken, rightIToken)

            this._try = _try;
            (<Ast> _try).setParent(this);
            this._Block = _Block;
            (<Ast> _Block).setParent(this);
            this._Catches = _Catches;
            (<Ast> _Catches).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._try)  list.add(this._try);
            if(this._Block)  list.add(this._Block);
            if(this._Catches)  list.add(this._Catches);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTryStatement0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTryStatement0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTryStatement0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTryStatement0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 327:  TryStatement ::= try Block Catchesopt Finally
     *</b>
     */
    export class TryStatement1 extends Ast implements ITryStatement
    {
        private  _try : AstToken;
        private  _Block : Block;
        private  _Catchesopt : ICatchesopt| null;
        private  _Finally : Finally;

        public  gettry() : AstToken{ return this._try; }
        public  settry( _try : AstToken) : void { this._try = _try; }
        public  getBlock() : Block{ return this._Block; }
        public  setBlock( _Block : Block) : void { this._Block = _Block; }
        /**
         * The value returned by <b>getCatchesopt</b> may be <b>null</b>
         */
        public  getCatchesopt() : ICatchesopt | null { return this._Catchesopt; }
        public  setCatchesopt( _Catchesopt : ICatchesopt) : void { this._Catchesopt = _Catchesopt; }
        public  getFinally() : Finally{ return this._Finally; }
        public  setFinally( _Finally : Finally) : void { this._Finally = _Finally; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _try : AstToken,
                     _Block : Block,
                     _Catchesopt : ICatchesopt| null,
                     _Finally : Finally)
        {
            super(leftIToken, rightIToken)

            this._try = _try;
            (<Ast> _try).setParent(this);
            this._Block = _Block;
            (<Ast> _Block).setParent(this);
            this._Catchesopt = _Catchesopt;
            if (_Catchesopt) (<Ast> _Catchesopt).setParent(this);
            this._Finally = _Finally;
            (<Ast> _Finally).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._try)  list.add(this._try);
            if(this._Block)  list.add(this._Block);
            if(this._Catchesopt)  list.add(this._Catchesopt);
            if(this._Finally)  list.add(this._Finally);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitTryStatement1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitTryStatement1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitTryStatement1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitTryStatement1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 335:  PrimaryNoNewArray ::= Type . class
     *</b>
     */
    export class PrimaryNoNewArray0 extends Ast implements IPrimaryNoNewArray
    {
        private  _Type : IType;
        private  _DOT : AstToken;
        private  _class : AstToken;

        public  getType() : IType{ return this._Type; }
        public  setType( _Type : IType) : void { this._Type = _Type; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getclass() : AstToken{ return this._class; }
        public  setclass( _class : AstToken) : void { this._class = _class; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Type : IType,
                     _DOT : AstToken,
                     _class : AstToken)
        {
            super(leftIToken, rightIToken)

            this._Type = _Type;
            (<Ast> _Type).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._class = _class;
            (<Ast> _class).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Type)  list.add(this._Type);
            if(this._DOT)  list.add(this._DOT);
            if(this._class)  list.add(this._class);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPrimaryNoNewArray0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPrimaryNoNewArray0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPrimaryNoNewArray0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPrimaryNoNewArray0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 336:  PrimaryNoNewArray ::= void . class
     *</b>
     */
    export class PrimaryNoNewArray1 extends Ast implements IPrimaryNoNewArray
    {
        private  _void : AstToken;
        private  _DOT : AstToken;
        private  _class : AstToken;

        public  getvoid() : AstToken{ return this._void; }
        public  setvoid( _void : AstToken) : void { this._void = _void; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getclass() : AstToken{ return this._class; }
        public  setclass( _class : AstToken) : void { this._class = _class; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _void : AstToken,
                     _DOT : AstToken,
                     _class : AstToken)
        {
            super(leftIToken, rightIToken)

            this._void = _void;
            (<Ast> _void).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._class = _class;
            (<Ast> _class).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._void)  list.add(this._void);
            if(this._DOT)  list.add(this._DOT);
            if(this._class)  list.add(this._class);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPrimaryNoNewArray1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPrimaryNoNewArray1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPrimaryNoNewArray1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPrimaryNoNewArray1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 337:  PrimaryNoNewArray ::= this
     *</b>
     */
    export class PrimaryNoNewArray2 extends AstToken implements IPrimaryNoNewArray
    {
        public  getthis() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPrimaryNoNewArray2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPrimaryNoNewArray2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPrimaryNoNewArray2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPrimaryNoNewArray2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 338:  PrimaryNoNewArray ::= ClassName . this
     *</b>
     */
    export class PrimaryNoNewArray3 extends Ast implements IPrimaryNoNewArray
    {
        private  _ClassName : IClassName;
        private  _DOT : AstToken;
        private  _this : AstToken;

        public  getClassName() : IClassName{ return this._ClassName; }
        public  setClassName( _ClassName : IClassName) : void { this._ClassName = _ClassName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getthis() : AstToken{ return this._this; }
        public  setthis( _this : AstToken) : void { this._this = _this; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ClassName : IClassName,
                     _DOT : AstToken,
                     _this : AstToken)
        {
            super(leftIToken, rightIToken)

            this._ClassName = _ClassName;
            (<Ast> _ClassName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._this = _this;
            (<Ast> _this).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ClassName)  list.add(this._ClassName);
            if(this._DOT)  list.add(this._DOT);
            if(this._this)  list.add(this._this);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPrimaryNoNewArray3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPrimaryNoNewArray3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPrimaryNoNewArray3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPrimaryNoNewArray3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 339:  PrimaryNoNewArray ::= ( Expression )
     *</b>
     */
    export class PrimaryNoNewArray4 extends Ast implements IPrimaryNoNewArray
    {
        private  _LPAREN : AstToken;
        private  _Expression : IExpression;
        private  _RPAREN : AstToken;

        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LPAREN : AstToken,
                     _Expression : IExpression,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._Expression)  list.add(this._Expression);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitPrimaryNoNewArray4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitPrimaryNoNewArray4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitPrimaryNoNewArray4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitPrimaryNoNewArray4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 344:  Literal ::= IntegerLiteral
     *</b>
     */
    export class Literal0 extends AstToken implements ILiteral
    {
        public  getIntegerLiteral() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLiteral0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLiteral0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLiteral0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLiteral0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 345:  Literal ::= LongLiteral
     *</b>
     */
    export class Literal1 extends AstToken implements ILiteral
    {
        public  getLongLiteral() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLiteral1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLiteral1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLiteral1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLiteral1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 346:  Literal ::= FloatingPointLiteral
     *</b>
     */
    export class Literal2 extends AstToken implements ILiteral
    {
        public  getFloatingPointLiteral() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLiteral2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLiteral2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLiteral2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLiteral2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 347:  Literal ::= DoubleLiteral
     *</b>
     */
    export class Literal3 extends AstToken implements ILiteral
    {
        public  getDoubleLiteral() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLiteral3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLiteral3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLiteral3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLiteral3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 349:  Literal ::= CharacterLiteral
     *</b>
     */
    export class Literal4 extends AstToken implements ILiteral
    {
        public  getCharacterLiteral() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLiteral4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLiteral4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLiteral4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLiteral4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 350:  Literal ::= StringLiteral
     *</b>
     */
    export class Literal5 extends AstToken implements ILiteral
    {
        public  getStringLiteral() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLiteral5(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLiteral5(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLiteral5(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLiteral5(this, o); }
    }

    /**
     *<b>
    *<li>Rule 351:  Literal ::= null
     *</b>
     */
    export class Literal6 extends AstToken implements ILiteral
    {
        public  getnull() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitLiteral6(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitLiteral6(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitLiteral6(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitLiteral6(this, o); }
    }

    /**
     *<b>
    *<li>Rule 352:  BooleanLiteral ::= true
     *</b>
     */
    export class BooleanLiteral0 extends AstToken implements IBooleanLiteral
    {
        public  gettrue() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitBooleanLiteral0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitBooleanLiteral0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitBooleanLiteral0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitBooleanLiteral0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 353:  BooleanLiteral ::= false
     *</b>
     */
    export class BooleanLiteral1 extends AstToken implements IBooleanLiteral
    {
        public  getfalse() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitBooleanLiteral1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitBooleanLiteral1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitBooleanLiteral1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitBooleanLiteral1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 354:  ClassInstanceCreationExpression ::= new TypeArgumentsopt ClassOrInterfaceType TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
     *</b>
     */
    export class ClassInstanceCreationExpression0 extends Ast implements IClassInstanceCreationExpression
    {
        private  _new : AstToken;
        private  _TypeArgumentsopt : TypeArguments| null;
        private  _ClassOrInterfaceType : ClassType;
        private  _TypeArgumentsopt4 : TypeArguments| null;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;
        private  _ClassBodyopt : ClassBody| null;

        public  getnew() : AstToken{ return this._new; }
        public  setnew( _new : AstToken) : void { this._new = _new; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public  getClassOrInterfaceType() : ClassType{ return this._ClassOrInterfaceType; }
        public  setClassOrInterfaceType( _ClassOrInterfaceType : ClassType) : void { this._ClassOrInterfaceType = _ClassOrInterfaceType; }
        /**
         * The value returned by <b>getTypeArgumentsopt4</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt4() : TypeArguments | null { return this._TypeArgumentsopt4; }
        public  setTypeArgumentsopt4( _TypeArgumentsopt4 : TypeArguments) : void { this._TypeArgumentsopt4 = _TypeArgumentsopt4; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        /**
         * The value returned by <b>getClassBodyopt</b> may be <b>null</b>
         */
        public  getClassBodyopt() : ClassBody | null { return this._ClassBodyopt; }
        public  setClassBodyopt( _ClassBodyopt : ClassBody) : void { this._ClassBodyopt = _ClassBodyopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _new : AstToken,
                     _TypeArgumentsopt : TypeArguments| null,
                     _ClassOrInterfaceType : ClassType,
                     _TypeArgumentsopt4 : TypeArguments| null,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken,
                     _ClassBodyopt : ClassBody| null)
        {
            super(leftIToken, rightIToken)

            this._new = _new;
            (<Ast> _new).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            (<Ast> _ClassOrInterfaceType).setParent(this);
            this._TypeArgumentsopt4 = _TypeArgumentsopt4;
            if (_TypeArgumentsopt4) (<Ast> _TypeArgumentsopt4).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._ClassBodyopt = _ClassBodyopt;
            if (_ClassBodyopt) (<Ast> _ClassBodyopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._new)  list.add(this._new);
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            if(this._ClassOrInterfaceType)  list.add(this._ClassOrInterfaceType);
            if(this._TypeArgumentsopt4)  list.add(this._TypeArgumentsopt4);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._ClassBodyopt)  list.add(this._ClassBodyopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassInstanceCreationExpression0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassInstanceCreationExpression0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassInstanceCreationExpression0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassInstanceCreationExpression0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 355:  ClassInstanceCreationExpression ::= Primary . new TypeArgumentsopt identifier TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
     *</b>
     */
    export class ClassInstanceCreationExpression1 extends Ast implements IClassInstanceCreationExpression
    {
        private  _Primary : IPrimary;
        private  _DOT : AstToken;
        private  _new : AstToken;
        private  _TypeArgumentsopt : TypeArguments| null;
        private  _identifier : identifier;
        private  _TypeArgumentsopt6 : TypeArguments| null;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;
        private  _ClassBodyopt : ClassBody| null;

        public  getPrimary() : IPrimary{ return this._Primary; }
        public  setPrimary( _Primary : IPrimary) : void { this._Primary = _Primary; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getnew() : AstToken{ return this._new; }
        public  setnew( _new : AstToken) : void { this._new = _new; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        /**
         * The value returned by <b>getTypeArgumentsopt6</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt6() : TypeArguments | null { return this._TypeArgumentsopt6; }
        public  setTypeArgumentsopt6( _TypeArgumentsopt6 : TypeArguments) : void { this._TypeArgumentsopt6 = _TypeArgumentsopt6; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        /**
         * The value returned by <b>getClassBodyopt</b> may be <b>null</b>
         */
        public  getClassBodyopt() : ClassBody | null { return this._ClassBodyopt; }
        public  setClassBodyopt( _ClassBodyopt : ClassBody) : void { this._ClassBodyopt = _ClassBodyopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Primary : IPrimary,
                     _DOT : AstToken,
                     _new : AstToken,
                     _TypeArgumentsopt : TypeArguments| null,
                     _identifier : identifier,
                     _TypeArgumentsopt6 : TypeArguments| null,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken,
                     _ClassBodyopt : ClassBody| null)
        {
            super(leftIToken, rightIToken)

            this._Primary = _Primary;
            (<Ast> _Primary).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._new = _new;
            (<Ast> _new).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._TypeArgumentsopt6 = _TypeArgumentsopt6;
            if (_TypeArgumentsopt6) (<Ast> _TypeArgumentsopt6).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._ClassBodyopt = _ClassBodyopt;
            if (_ClassBodyopt) (<Ast> _ClassBodyopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Primary)  list.add(this._Primary);
            if(this._DOT)  list.add(this._DOT);
            if(this._new)  list.add(this._new);
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            if(this._identifier)  list.add(this._identifier);
            if(this._TypeArgumentsopt6)  list.add(this._TypeArgumentsopt6);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._ClassBodyopt)  list.add(this._ClassBodyopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitClassInstanceCreationExpression1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitClassInstanceCreationExpression1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitClassInstanceCreationExpression1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitClassInstanceCreationExpression1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 358:  ArrayCreationExpression ::= new PrimitiveType DimExprs Dimsopt
     *</b>
     */
    export class ArrayCreationExpression0 extends Ast implements IArrayCreationExpression
    {
        private  _new : AstToken;
        private  _PrimitiveType : IPrimitiveType;
        private  _DimExprs : IDimExprs;
        private  _Dimsopt : IDimsopt| null;

        public  getnew() : AstToken{ return this._new; }
        public  setnew( _new : AstToken) : void { this._new = _new; }
        public  getPrimitiveType() : IPrimitiveType{ return this._PrimitiveType; }
        public  setPrimitiveType( _PrimitiveType : IPrimitiveType) : void { this._PrimitiveType = _PrimitiveType; }
        public  getDimExprs() : IDimExprs{ return this._DimExprs; }
        public  setDimExprs( _DimExprs : IDimExprs) : void { this._DimExprs = _DimExprs; }
        /**
         * The value returned by <b>getDimsopt</b> may be <b>null</b>
         */
        public  getDimsopt() : IDimsopt | null { return this._Dimsopt; }
        public  setDimsopt( _Dimsopt : IDimsopt) : void { this._Dimsopt = _Dimsopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _new : AstToken,
                     _PrimitiveType : IPrimitiveType,
                     _DimExprs : IDimExprs,
                     _Dimsopt : IDimsopt| null)
        {
            super(leftIToken, rightIToken)

            this._new = _new;
            (<Ast> _new).setParent(this);
            this._PrimitiveType = _PrimitiveType;
            (<Ast> _PrimitiveType).setParent(this);
            this._DimExprs = _DimExprs;
            (<Ast> _DimExprs).setParent(this);
            this._Dimsopt = _Dimsopt;
            if (_Dimsopt) (<Ast> _Dimsopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._new)  list.add(this._new);
            if(this._PrimitiveType)  list.add(this._PrimitiveType);
            if(this._DimExprs)  list.add(this._DimExprs);
            if(this._Dimsopt)  list.add(this._Dimsopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArrayCreationExpression0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArrayCreationExpression0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArrayCreationExpression0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArrayCreationExpression0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 359:  ArrayCreationExpression ::= new ClassOrInterfaceType DimExprs Dimsopt
     *</b>
     */
    export class ArrayCreationExpression1 extends Ast implements IArrayCreationExpression
    {
        private  _new : AstToken;
        private  _ClassOrInterfaceType : ClassType;
        private  _DimExprs : IDimExprs;
        private  _Dimsopt : IDimsopt| null;

        public  getnew() : AstToken{ return this._new; }
        public  setnew( _new : AstToken) : void { this._new = _new; }
        public  getClassOrInterfaceType() : ClassType{ return this._ClassOrInterfaceType; }
        public  setClassOrInterfaceType( _ClassOrInterfaceType : ClassType) : void { this._ClassOrInterfaceType = _ClassOrInterfaceType; }
        public  getDimExprs() : IDimExprs{ return this._DimExprs; }
        public  setDimExprs( _DimExprs : IDimExprs) : void { this._DimExprs = _DimExprs; }
        /**
         * The value returned by <b>getDimsopt</b> may be <b>null</b>
         */
        public  getDimsopt() : IDimsopt | null { return this._Dimsopt; }
        public  setDimsopt( _Dimsopt : IDimsopt) : void { this._Dimsopt = _Dimsopt; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _new : AstToken,
                     _ClassOrInterfaceType : ClassType,
                     _DimExprs : IDimExprs,
                     _Dimsopt : IDimsopt| null)
        {
            super(leftIToken, rightIToken)

            this._new = _new;
            (<Ast> _new).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            (<Ast> _ClassOrInterfaceType).setParent(this);
            this._DimExprs = _DimExprs;
            (<Ast> _DimExprs).setParent(this);
            this._Dimsopt = _Dimsopt;
            if (_Dimsopt) (<Ast> _Dimsopt).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._new)  list.add(this._new);
            if(this._ClassOrInterfaceType)  list.add(this._ClassOrInterfaceType);
            if(this._DimExprs)  list.add(this._DimExprs);
            if(this._Dimsopt)  list.add(this._Dimsopt);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArrayCreationExpression1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArrayCreationExpression1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArrayCreationExpression1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArrayCreationExpression1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 360:  ArrayCreationExpression ::= new PrimitiveType Dims ArrayInitializer
     *</b>
     */
    export class ArrayCreationExpression2 extends Ast implements IArrayCreationExpression
    {
        private  _new : AstToken;
        private  _PrimitiveType : IPrimitiveType;
        private  _Dims : IDims;
        private  _ArrayInitializer : ArrayInitializer;

        public  getnew() : AstToken{ return this._new; }
        public  setnew( _new : AstToken) : void { this._new = _new; }
        public  getPrimitiveType() : IPrimitiveType{ return this._PrimitiveType; }
        public  setPrimitiveType( _PrimitiveType : IPrimitiveType) : void { this._PrimitiveType = _PrimitiveType; }
        public  getDims() : IDims{ return this._Dims; }
        public  setDims( _Dims : IDims) : void { this._Dims = _Dims; }
        public  getArrayInitializer() : ArrayInitializer{ return this._ArrayInitializer; }
        public  setArrayInitializer( _ArrayInitializer : ArrayInitializer) : void { this._ArrayInitializer = _ArrayInitializer; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _new : AstToken,
                     _PrimitiveType : IPrimitiveType,
                     _Dims : IDims,
                     _ArrayInitializer : ArrayInitializer)
        {
            super(leftIToken, rightIToken)

            this._new = _new;
            (<Ast> _new).setParent(this);
            this._PrimitiveType = _PrimitiveType;
            (<Ast> _PrimitiveType).setParent(this);
            this._Dims = _Dims;
            (<Ast> _Dims).setParent(this);
            this._ArrayInitializer = _ArrayInitializer;
            (<Ast> _ArrayInitializer).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._new)  list.add(this._new);
            if(this._PrimitiveType)  list.add(this._PrimitiveType);
            if(this._Dims)  list.add(this._Dims);
            if(this._ArrayInitializer)  list.add(this._ArrayInitializer);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArrayCreationExpression2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArrayCreationExpression2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArrayCreationExpression2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArrayCreationExpression2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 361:  ArrayCreationExpression ::= new ClassOrInterfaceType Dims ArrayInitializer
     *</b>
     */
    export class ArrayCreationExpression3 extends Ast implements IArrayCreationExpression
    {
        private  _new : AstToken;
        private  _ClassOrInterfaceType : ClassType;
        private  _Dims : IDims;
        private  _ArrayInitializer : ArrayInitializer;

        public  getnew() : AstToken{ return this._new; }
        public  setnew( _new : AstToken) : void { this._new = _new; }
        public  getClassOrInterfaceType() : ClassType{ return this._ClassOrInterfaceType; }
        public  setClassOrInterfaceType( _ClassOrInterfaceType : ClassType) : void { this._ClassOrInterfaceType = _ClassOrInterfaceType; }
        public  getDims() : IDims{ return this._Dims; }
        public  setDims( _Dims : IDims) : void { this._Dims = _Dims; }
        public  getArrayInitializer() : ArrayInitializer{ return this._ArrayInitializer; }
        public  setArrayInitializer( _ArrayInitializer : ArrayInitializer) : void { this._ArrayInitializer = _ArrayInitializer; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _new : AstToken,
                     _ClassOrInterfaceType : ClassType,
                     _Dims : IDims,
                     _ArrayInitializer : ArrayInitializer)
        {
            super(leftIToken, rightIToken)

            this._new = _new;
            (<Ast> _new).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            (<Ast> _ClassOrInterfaceType).setParent(this);
            this._Dims = _Dims;
            (<Ast> _Dims).setParent(this);
            this._ArrayInitializer = _ArrayInitializer;
            (<Ast> _ArrayInitializer).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._new)  list.add(this._new);
            if(this._ClassOrInterfaceType)  list.add(this._ClassOrInterfaceType);
            if(this._Dims)  list.add(this._Dims);
            if(this._ArrayInitializer)  list.add(this._ArrayInitializer);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArrayCreationExpression3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArrayCreationExpression3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArrayCreationExpression3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArrayCreationExpression3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 365:  Dims ::= [ ]
     *</b>
     */
    export class Dims0 extends Ast implements IDims
    {
        private  _LBRACKET : AstToken;
        private  _RBRACKET : AstToken;

        public  getLBRACKET() : AstToken{ return this._LBRACKET; }
        public  setLBRACKET( _LBRACKET : AstToken) : void { this._LBRACKET = _LBRACKET; }
        public  getRBRACKET() : AstToken{ return this._RBRACKET; }
        public  setRBRACKET( _RBRACKET : AstToken) : void { this._RBRACKET = _RBRACKET; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LBRACKET : AstToken,
                     _RBRACKET : AstToken)
        {
            super(leftIToken, rightIToken)

            this._LBRACKET = _LBRACKET;
            (<Ast> _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            (<Ast> _RBRACKET).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LBRACKET)  list.add(this._LBRACKET);
            if(this._RBRACKET)  list.add(this._RBRACKET);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitDims0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitDims0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitDims0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitDims0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 366:  Dims ::= Dims [ ]
     *</b>
     */
    export class Dims1 extends Ast implements IDims
    {
        private  _Dims : IDims;
        private  _LBRACKET : AstToken;
        private  _RBRACKET : AstToken;

        public  getDims() : IDims{ return this._Dims; }
        public  setDims( _Dims : IDims) : void { this._Dims = _Dims; }
        public  getLBRACKET() : AstToken{ return this._LBRACKET; }
        public  setLBRACKET( _LBRACKET : AstToken) : void { this._LBRACKET = _LBRACKET; }
        public  getRBRACKET() : AstToken{ return this._RBRACKET; }
        public  setRBRACKET( _RBRACKET : AstToken) : void { this._RBRACKET = _RBRACKET; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Dims : IDims,
                     _LBRACKET : AstToken,
                     _RBRACKET : AstToken)
        {
            super(leftIToken, rightIToken)

            this._Dims = _Dims;
            (<Ast> _Dims).setParent(this);
            this._LBRACKET = _LBRACKET;
            (<Ast> _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            (<Ast> _RBRACKET).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Dims)  list.add(this._Dims);
            if(this._LBRACKET)  list.add(this._LBRACKET);
            if(this._RBRACKET)  list.add(this._RBRACKET);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitDims1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitDims1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitDims1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitDims1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 367:  FieldAccess ::= Primary . identifier
     *</b>
     */
    export class FieldAccess0 extends Ast implements IFieldAccess
    {
        private  _Primary : IPrimary;
        private  _DOT : AstToken;
        private  _identifier : identifier;

        public  getPrimary() : IPrimary{ return this._Primary; }
        public  setPrimary( _Primary : IPrimary) : void { this._Primary = _Primary; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Primary : IPrimary,
                     _DOT : AstToken,
                     _identifier : identifier)
        {
            super(leftIToken, rightIToken)

            this._Primary = _Primary;
            (<Ast> _Primary).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Primary)  list.add(this._Primary);
            if(this._DOT)  list.add(this._DOT);
            if(this._identifier)  list.add(this._identifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldAccess0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldAccess0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldAccess0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldAccess0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 368:  FieldAccess ::= super . identifier
     *</b>
     */
    export class FieldAccess1 extends Ast implements IFieldAccess
    {
        private  _super : AstToken;
        private  _DOT : AstToken;
        private  _identifier : identifier;

        public  getsuper() : AstToken{ return this._super; }
        public  setsuper( _super : AstToken) : void { this._super = _super; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _super : AstToken,
                     _DOT : AstToken,
                     _identifier : identifier)
        {
            super(leftIToken, rightIToken)

            this._super = _super;
            (<Ast> _super).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._super)  list.add(this._super);
            if(this._DOT)  list.add(this._DOT);
            if(this._identifier)  list.add(this._identifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldAccess1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldAccess1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldAccess1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldAccess1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 369:  FieldAccess ::= ClassName . super . identifier
     *</b>
     */
    export class FieldAccess2 extends Ast implements IFieldAccess
    {
        private  _ClassName : IClassName;
        private  _DOT : AstToken;
        private  _super : AstToken;
        private  _DOT4 : AstToken;
        private  _identifier : identifier;

        public  getClassName() : IClassName{ return this._ClassName; }
        public  setClassName( _ClassName : IClassName) : void { this._ClassName = _ClassName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getsuper() : AstToken{ return this._super; }
        public  setsuper( _super : AstToken) : void { this._super = _super; }
        public  getDOT4() : AstToken{ return this._DOT4; }
        public  setDOT4( _DOT4 : AstToken) : void { this._DOT4 = _DOT4; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ClassName : IClassName,
                     _DOT : AstToken,
                     _super : AstToken,
                     _DOT4 : AstToken,
                     _identifier : identifier)
        {
            super(leftIToken, rightIToken)

            this._ClassName = _ClassName;
            (<Ast> _ClassName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._super = _super;
            (<Ast> _super).setParent(this);
            this._DOT4 = _DOT4;
            (<Ast> _DOT4).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ClassName)  list.add(this._ClassName);
            if(this._DOT)  list.add(this._DOT);
            if(this._super)  list.add(this._super);
            if(this._DOT4)  list.add(this._DOT4);
            if(this._identifier)  list.add(this._identifier);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitFieldAccess2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitFieldAccess2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitFieldAccess2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitFieldAccess2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 370:  MethodInvocation ::= MethodName ( ArgumentListopt )
     *</b>
     */
    export class MethodInvocation0 extends Ast implements IMethodInvocation
    {
        private  _MethodName : IMethodName;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;

        public  getMethodName() : IMethodName{ return this._MethodName; }
        public  setMethodName( _MethodName : IMethodName) : void { this._MethodName = _MethodName; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MethodName : IMethodName,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._MethodName = _MethodName;
            (<Ast> _MethodName).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MethodName)  list.add(this._MethodName);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodInvocation0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodInvocation0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodInvocation0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodInvocation0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 371:  MethodInvocation ::= Primary . TypeArgumentsopt identifier ( ArgumentListopt )
     *</b>
     */
    export class MethodInvocation1 extends Ast implements IMethodInvocation
    {
        private  _Primary : IPrimary;
        private  _DOT : AstToken;
        private  _TypeArgumentsopt : TypeArguments| null;
        private  _identifier : identifier;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;

        public  getPrimary() : IPrimary{ return this._Primary; }
        public  setPrimary( _Primary : IPrimary) : void { this._Primary = _Primary; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _Primary : IPrimary,
                     _DOT : AstToken,
                     _TypeArgumentsopt : TypeArguments| null,
                     _identifier : identifier,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._Primary = _Primary;
            (<Ast> _Primary).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._Primary)  list.add(this._Primary);
            if(this._DOT)  list.add(this._DOT);
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            if(this._identifier)  list.add(this._identifier);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodInvocation1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodInvocation1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodInvocation1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodInvocation1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 372:  MethodInvocation ::= super . TypeArgumentsopt identifier ( ArgumentListopt )
     *</b>
     */
    export class MethodInvocation2 extends Ast implements IMethodInvocation
    {
        private  _super : AstToken;
        private  _DOT : AstToken;
        private  _TypeArgumentsopt : TypeArguments| null;
        private  _identifier : identifier;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;

        public  getsuper() : AstToken{ return this._super; }
        public  setsuper( _super : AstToken) : void { this._super = _super; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _super : AstToken,
                     _DOT : AstToken,
                     _TypeArgumentsopt : TypeArguments| null,
                     _identifier : identifier,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._super = _super;
            (<Ast> _super).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._super)  list.add(this._super);
            if(this._DOT)  list.add(this._DOT);
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            if(this._identifier)  list.add(this._identifier);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodInvocation2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodInvocation2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodInvocation2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodInvocation2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 373:  MethodInvocation ::= ClassName . super . TypeArgumentsopt identifier ( ArgumentListopt )
     *</b>
     */
    export class MethodInvocation3 extends Ast implements IMethodInvocation
    {
        private  _ClassName : IClassName;
        private  _DOT : AstToken;
        private  _super : AstToken;
        private  _DOT4 : AstToken;
        private  _TypeArgumentsopt : TypeArguments| null;
        private  _identifier : identifier;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;

        public  getClassName() : IClassName{ return this._ClassName; }
        public  setClassName( _ClassName : IClassName) : void { this._ClassName = _ClassName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getsuper() : AstToken{ return this._super; }
        public  setsuper( _super : AstToken) : void { this._super = _super; }
        public  getDOT4() : AstToken{ return this._DOT4; }
        public  setDOT4( _DOT4 : AstToken) : void { this._DOT4 = _DOT4; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public  getTypeArgumentsopt() : TypeArguments | null { return this._TypeArgumentsopt; }
        public  setTypeArgumentsopt( _TypeArgumentsopt : TypeArguments) : void { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ClassName : IClassName,
                     _DOT : AstToken,
                     _super : AstToken,
                     _DOT4 : AstToken,
                     _TypeArgumentsopt : TypeArguments| null,
                     _identifier : identifier,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._ClassName = _ClassName;
            (<Ast> _ClassName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._super = _super;
            (<Ast> _super).setParent(this);
            this._DOT4 = _DOT4;
            (<Ast> _DOT4).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt) (<Ast> _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ClassName)  list.add(this._ClassName);
            if(this._DOT)  list.add(this._DOT);
            if(this._super)  list.add(this._super);
            if(this._DOT4)  list.add(this._DOT4);
            if(this._TypeArgumentsopt)  list.add(this._TypeArgumentsopt);
            if(this._identifier)  list.add(this._identifier);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodInvocation3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodInvocation3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodInvocation3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodInvocation3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 374:  MethodInvocation ::= TypeName . TypeArguments identifier ( ArgumentListopt )
     *</b>
     */
    export class MethodInvocation4 extends Ast implements IMethodInvocation
    {
        private  _TypeName : ITypeName;
        private  _DOT : AstToken;
        private  _TypeArguments : TypeArguments;
        private  _identifier : identifier;
        private  _LPAREN : AstToken;
        private  _ArgumentListopt : IArgumentListopt| null;
        private  _RPAREN : AstToken;

        public  getTypeName() : ITypeName{ return this._TypeName; }
        public  setTypeName( _TypeName : ITypeName) : void { this._TypeName = _TypeName; }
        public  getDOT() : AstToken{ return this._DOT; }
        public  setDOT( _DOT : AstToken) : void { this._DOT = _DOT; }
        public  getTypeArguments() : TypeArguments{ return this._TypeArguments; }
        public  setTypeArguments( _TypeArguments : TypeArguments) : void { this._TypeArguments = _TypeArguments; }
        public  getidentifier() : identifier{ return this._identifier; }
        public  setidentifier( _identifier : identifier) : void { this._identifier = _identifier; }
        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public  getArgumentListopt() : IArgumentListopt | null { return this._ArgumentListopt; }
        public  setArgumentListopt( _ArgumentListopt : IArgumentListopt) : void { this._ArgumentListopt = _ArgumentListopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TypeName : ITypeName,
                     _DOT : AstToken,
                     _TypeArguments : TypeArguments,
                     _identifier : identifier,
                     _LPAREN : AstToken,
                     _ArgumentListopt : IArgumentListopt| null,
                     _RPAREN : AstToken)
        {
            super(leftIToken, rightIToken)

            this._TypeName = _TypeName;
            (<Ast> _TypeName).setParent(this);
            this._DOT = _DOT;
            (<Ast> _DOT).setParent(this);
            this._TypeArguments = _TypeArguments;
            (<Ast> _TypeArguments).setParent(this);
            this._identifier = _identifier;
            (<Ast> _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt) (<Ast> _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TypeName)  list.add(this._TypeName);
            if(this._DOT)  list.add(this._DOT);
            if(this._TypeArguments)  list.add(this._TypeArguments);
            if(this._identifier)  list.add(this._identifier);
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ArgumentListopt)  list.add(this._ArgumentListopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMethodInvocation4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMethodInvocation4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMethodInvocation4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMethodInvocation4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 375:  ArrayAccess ::= ExpressionName [ Expression ]
     *</b>
     */
    export class ArrayAccess0 extends Ast implements IArrayAccess
    {
        private  _ExpressionName : IExpressionName;
        private  _LBRACKET : AstToken;
        private  _Expression : IExpression;
        private  _RBRACKET : AstToken;

        public  getExpressionName() : IExpressionName{ return this._ExpressionName; }
        public  setExpressionName( _ExpressionName : IExpressionName) : void { this._ExpressionName = _ExpressionName; }
        public  getLBRACKET() : AstToken{ return this._LBRACKET; }
        public  setLBRACKET( _LBRACKET : AstToken) : void { this._LBRACKET = _LBRACKET; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRBRACKET() : AstToken{ return this._RBRACKET; }
        public  setRBRACKET( _RBRACKET : AstToken) : void { this._RBRACKET = _RBRACKET; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ExpressionName : IExpressionName,
                     _LBRACKET : AstToken,
                     _Expression : IExpression,
                     _RBRACKET : AstToken)
        {
            super(leftIToken, rightIToken)

            this._ExpressionName = _ExpressionName;
            (<Ast> _ExpressionName).setParent(this);
            this._LBRACKET = _LBRACKET;
            (<Ast> _LBRACKET).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RBRACKET = _RBRACKET;
            (<Ast> _RBRACKET).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ExpressionName)  list.add(this._ExpressionName);
            if(this._LBRACKET)  list.add(this._LBRACKET);
            if(this._Expression)  list.add(this._Expression);
            if(this._RBRACKET)  list.add(this._RBRACKET);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArrayAccess0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArrayAccess0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArrayAccess0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArrayAccess0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 376:  ArrayAccess ::= PrimaryNoNewArray [ Expression ]
     *</b>
     */
    export class ArrayAccess1 extends Ast implements IArrayAccess
    {
        private  _PrimaryNoNewArray : IPrimaryNoNewArray;
        private  _LBRACKET : AstToken;
        private  _Expression : IExpression;
        private  _RBRACKET : AstToken;

        public  getPrimaryNoNewArray() : IPrimaryNoNewArray{ return this._PrimaryNoNewArray; }
        public  setPrimaryNoNewArray( _PrimaryNoNewArray : IPrimaryNoNewArray) : void { this._PrimaryNoNewArray = _PrimaryNoNewArray; }
        public  getLBRACKET() : AstToken{ return this._LBRACKET; }
        public  setLBRACKET( _LBRACKET : AstToken) : void { this._LBRACKET = _LBRACKET; }
        public  getExpression() : IExpression{ return this._Expression; }
        public  setExpression( _Expression : IExpression) : void { this._Expression = _Expression; }
        public  getRBRACKET() : AstToken{ return this._RBRACKET; }
        public  setRBRACKET( _RBRACKET : AstToken) : void { this._RBRACKET = _RBRACKET; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _PrimaryNoNewArray : IPrimaryNoNewArray,
                     _LBRACKET : AstToken,
                     _Expression : IExpression,
                     _RBRACKET : AstToken)
        {
            super(leftIToken, rightIToken)

            this._PrimaryNoNewArray = _PrimaryNoNewArray;
            (<Ast> _PrimaryNoNewArray).setParent(this);
            this._LBRACKET = _LBRACKET;
            (<Ast> _LBRACKET).setParent(this);
            this._Expression = _Expression;
            (<Ast> _Expression).setParent(this);
            this._RBRACKET = _RBRACKET;
            (<Ast> _RBRACKET).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._PrimaryNoNewArray)  list.add(this._PrimaryNoNewArray);
            if(this._LBRACKET)  list.add(this._LBRACKET);
            if(this._Expression)  list.add(this._Expression);
            if(this._RBRACKET)  list.add(this._RBRACKET);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitArrayAccess1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitArrayAccess1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitArrayAccess1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitArrayAccess1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 385:  UnaryExpression ::= + UnaryExpression
     *</b>
     */
    export class UnaryExpression0 extends Ast implements IUnaryExpression
    {
        private  _PLUS : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getPLUS() : AstToken{ return this._PLUS; }
        public  setPLUS( _PLUS : AstToken) : void { this._PLUS = _PLUS; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _PLUS : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._PLUS = _PLUS;
            (<Ast> _PLUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._PLUS)  list.add(this._PLUS);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitUnaryExpression0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitUnaryExpression0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitUnaryExpression0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitUnaryExpression0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 386:  UnaryExpression ::= - UnaryExpression
     *</b>
     */
    export class UnaryExpression1 extends Ast implements IUnaryExpression
    {
        private  _MINUS : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getMINUS() : AstToken{ return this._MINUS; }
        public  setMINUS( _MINUS : AstToken) : void { this._MINUS = _MINUS; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MINUS : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._MINUS = _MINUS;
            (<Ast> _MINUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MINUS)  list.add(this._MINUS);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitUnaryExpression1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitUnaryExpression1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitUnaryExpression1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitUnaryExpression1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 391:  UnaryExpressionNotPlusMinus ::= ~ UnaryExpression
     *</b>
     */
    export class UnaryExpressionNotPlusMinus0 extends Ast implements IUnaryExpressionNotPlusMinus
    {
        private  _TWIDDLE : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getTWIDDLE() : AstToken{ return this._TWIDDLE; }
        public  setTWIDDLE( _TWIDDLE : AstToken) : void { this._TWIDDLE = _TWIDDLE; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _TWIDDLE : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._TWIDDLE = _TWIDDLE;
            (<Ast> _TWIDDLE).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._TWIDDLE)  list.add(this._TWIDDLE);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitUnaryExpressionNotPlusMinus0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitUnaryExpressionNotPlusMinus0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitUnaryExpressionNotPlusMinus0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitUnaryExpressionNotPlusMinus0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 392:  UnaryExpressionNotPlusMinus ::= ! UnaryExpression
     *</b>
     */
    export class UnaryExpressionNotPlusMinus1 extends Ast implements IUnaryExpressionNotPlusMinus
    {
        private  _NOT : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getNOT() : AstToken{ return this._NOT; }
        public  setNOT( _NOT : AstToken) : void { this._NOT = _NOT; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _NOT : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._NOT = _NOT;
            (<Ast> _NOT).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._NOT)  list.add(this._NOT);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitUnaryExpressionNotPlusMinus1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitUnaryExpressionNotPlusMinus1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitUnaryExpressionNotPlusMinus1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitUnaryExpressionNotPlusMinus1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 394:  CastExpression ::= ( PrimitiveType Dimsopt ) UnaryExpression
     *</b>
     */
    export class CastExpression0 extends Ast implements ICastExpression
    {
        private  _LPAREN : AstToken;
        private  _PrimitiveType : IPrimitiveType;
        private  _Dimsopt : IDimsopt| null;
        private  _RPAREN : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getPrimitiveType() : IPrimitiveType{ return this._PrimitiveType; }
        public  setPrimitiveType( _PrimitiveType : IPrimitiveType) : void { this._PrimitiveType = _PrimitiveType; }
        /**
         * The value returned by <b>getDimsopt</b> may be <b>null</b>
         */
        public  getDimsopt() : IDimsopt | null { return this._Dimsopt; }
        public  setDimsopt( _Dimsopt : IDimsopt) : void { this._Dimsopt = _Dimsopt; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LPAREN : AstToken,
                     _PrimitiveType : IPrimitiveType,
                     _Dimsopt : IDimsopt| null,
                     _RPAREN : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._PrimitiveType = _PrimitiveType;
            (<Ast> _PrimitiveType).setParent(this);
            this._Dimsopt = _Dimsopt;
            if (_Dimsopt) (<Ast> _Dimsopt).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._PrimitiveType)  list.add(this._PrimitiveType);
            if(this._Dimsopt)  list.add(this._Dimsopt);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitCastExpression0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitCastExpression0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitCastExpression0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitCastExpression0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 395:  CastExpression ::= ( ReferenceType ) UnaryExpressionNotPlusMinus
     *</b>
     */
    export class CastExpression1 extends Ast implements ICastExpression
    {
        private  _LPAREN : AstToken;
        private  _ReferenceType : IReferenceType;
        private  _RPAREN : AstToken;
        private  _UnaryExpressionNotPlusMinus : IUnaryExpressionNotPlusMinus;

        public  getLPAREN() : AstToken{ return this._LPAREN; }
        public  setLPAREN( _LPAREN : AstToken) : void { this._LPAREN = _LPAREN; }
        public  getReferenceType() : IReferenceType{ return this._ReferenceType; }
        public  setReferenceType( _ReferenceType : IReferenceType) : void { this._ReferenceType = _ReferenceType; }
        public  getRPAREN() : AstToken{ return this._RPAREN; }
        public  setRPAREN( _RPAREN : AstToken) : void { this._RPAREN = _RPAREN; }
        public  getUnaryExpressionNotPlusMinus() : IUnaryExpressionNotPlusMinus{ return this._UnaryExpressionNotPlusMinus; }
        public  setUnaryExpressionNotPlusMinus( _UnaryExpressionNotPlusMinus : IUnaryExpressionNotPlusMinus) : void { this._UnaryExpressionNotPlusMinus = _UnaryExpressionNotPlusMinus; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _LPAREN : AstToken,
                     _ReferenceType : IReferenceType,
                     _RPAREN : AstToken,
                     _UnaryExpressionNotPlusMinus : IUnaryExpressionNotPlusMinus)
        {
            super(leftIToken, rightIToken)

            this._LPAREN = _LPAREN;
            (<Ast> _LPAREN).setParent(this);
            this._ReferenceType = _ReferenceType;
            (<Ast> _ReferenceType).setParent(this);
            this._RPAREN = _RPAREN;
            (<Ast> _RPAREN).setParent(this);
            this._UnaryExpressionNotPlusMinus = _UnaryExpressionNotPlusMinus;
            (<Ast> _UnaryExpressionNotPlusMinus).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._LPAREN)  list.add(this._LPAREN);
            if(this._ReferenceType)  list.add(this._ReferenceType);
            if(this._RPAREN)  list.add(this._RPAREN);
            if(this._UnaryExpressionNotPlusMinus)  list.add(this._UnaryExpressionNotPlusMinus);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitCastExpression1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitCastExpression1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitCastExpression1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitCastExpression1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 397:  MultiplicativeExpression ::= MultiplicativeExpression * UnaryExpression
     *</b>
     */
    export class MultiplicativeExpression0 extends Ast implements IMultiplicativeExpression
    {
        private  _MultiplicativeExpression : IMultiplicativeExpression;
        private  _MULTIPLY : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getMultiplicativeExpression() : IMultiplicativeExpression{ return this._MultiplicativeExpression; }
        public  setMultiplicativeExpression( _MultiplicativeExpression : IMultiplicativeExpression) : void { this._MultiplicativeExpression = _MultiplicativeExpression; }
        public  getMULTIPLY() : AstToken{ return this._MULTIPLY; }
        public  setMULTIPLY( _MULTIPLY : AstToken) : void { this._MULTIPLY = _MULTIPLY; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MultiplicativeExpression : IMultiplicativeExpression,
                     _MULTIPLY : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._MultiplicativeExpression = _MultiplicativeExpression;
            (<Ast> _MultiplicativeExpression).setParent(this);
            this._MULTIPLY = _MULTIPLY;
            (<Ast> _MULTIPLY).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MultiplicativeExpression)  list.add(this._MultiplicativeExpression);
            if(this._MULTIPLY)  list.add(this._MULTIPLY);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMultiplicativeExpression0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMultiplicativeExpression0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMultiplicativeExpression0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMultiplicativeExpression0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 398:  MultiplicativeExpression ::= MultiplicativeExpression / UnaryExpression
     *</b>
     */
    export class MultiplicativeExpression1 extends Ast implements IMultiplicativeExpression
    {
        private  _MultiplicativeExpression : IMultiplicativeExpression;
        private  _DIVIDE : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getMultiplicativeExpression() : IMultiplicativeExpression{ return this._MultiplicativeExpression; }
        public  setMultiplicativeExpression( _MultiplicativeExpression : IMultiplicativeExpression) : void { this._MultiplicativeExpression = _MultiplicativeExpression; }
        public  getDIVIDE() : AstToken{ return this._DIVIDE; }
        public  setDIVIDE( _DIVIDE : AstToken) : void { this._DIVIDE = _DIVIDE; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MultiplicativeExpression : IMultiplicativeExpression,
                     _DIVIDE : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._MultiplicativeExpression = _MultiplicativeExpression;
            (<Ast> _MultiplicativeExpression).setParent(this);
            this._DIVIDE = _DIVIDE;
            (<Ast> _DIVIDE).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MultiplicativeExpression)  list.add(this._MultiplicativeExpression);
            if(this._DIVIDE)  list.add(this._DIVIDE);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMultiplicativeExpression1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMultiplicativeExpression1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMultiplicativeExpression1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMultiplicativeExpression1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 399:  MultiplicativeExpression ::= MultiplicativeExpression % UnaryExpression
     *</b>
     */
    export class MultiplicativeExpression2 extends Ast implements IMultiplicativeExpression
    {
        private  _MultiplicativeExpression : IMultiplicativeExpression;
        private  _REMAINDER : AstToken;
        private  _UnaryExpression : IUnaryExpression;

        public  getMultiplicativeExpression() : IMultiplicativeExpression{ return this._MultiplicativeExpression; }
        public  setMultiplicativeExpression( _MultiplicativeExpression : IMultiplicativeExpression) : void { this._MultiplicativeExpression = _MultiplicativeExpression; }
        public  getREMAINDER() : AstToken{ return this._REMAINDER; }
        public  setREMAINDER( _REMAINDER : AstToken) : void { this._REMAINDER = _REMAINDER; }
        public  getUnaryExpression() : IUnaryExpression{ return this._UnaryExpression; }
        public  setUnaryExpression( _UnaryExpression : IUnaryExpression) : void { this._UnaryExpression = _UnaryExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _MultiplicativeExpression : IMultiplicativeExpression,
                     _REMAINDER : AstToken,
                     _UnaryExpression : IUnaryExpression)
        {
            super(leftIToken, rightIToken)

            this._MultiplicativeExpression = _MultiplicativeExpression;
            (<Ast> _MultiplicativeExpression).setParent(this);
            this._REMAINDER = _REMAINDER;
            (<Ast> _REMAINDER).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            (<Ast> _UnaryExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._MultiplicativeExpression)  list.add(this._MultiplicativeExpression);
            if(this._REMAINDER)  list.add(this._REMAINDER);
            if(this._UnaryExpression)  list.add(this._UnaryExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitMultiplicativeExpression2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitMultiplicativeExpression2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitMultiplicativeExpression2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitMultiplicativeExpression2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 401:  AdditiveExpression ::= AdditiveExpression + MultiplicativeExpression
     *</b>
     */
    export class AdditiveExpression0 extends Ast implements IAdditiveExpression
    {
        private  _AdditiveExpression : IAdditiveExpression;
        private  _PLUS : AstToken;
        private  _MultiplicativeExpression : IMultiplicativeExpression;

        public  getAdditiveExpression() : IAdditiveExpression{ return this._AdditiveExpression; }
        public  setAdditiveExpression( _AdditiveExpression : IAdditiveExpression) : void { this._AdditiveExpression = _AdditiveExpression; }
        public  getPLUS() : AstToken{ return this._PLUS; }
        public  setPLUS( _PLUS : AstToken) : void { this._PLUS = _PLUS; }
        public  getMultiplicativeExpression() : IMultiplicativeExpression{ return this._MultiplicativeExpression; }
        public  setMultiplicativeExpression( _MultiplicativeExpression : IMultiplicativeExpression) : void { this._MultiplicativeExpression = _MultiplicativeExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AdditiveExpression : IAdditiveExpression,
                     _PLUS : AstToken,
                     _MultiplicativeExpression : IMultiplicativeExpression)
        {
            super(leftIToken, rightIToken)

            this._AdditiveExpression = _AdditiveExpression;
            (<Ast> _AdditiveExpression).setParent(this);
            this._PLUS = _PLUS;
            (<Ast> _PLUS).setParent(this);
            this._MultiplicativeExpression = _MultiplicativeExpression;
            (<Ast> _MultiplicativeExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AdditiveExpression)  list.add(this._AdditiveExpression);
            if(this._PLUS)  list.add(this._PLUS);
            if(this._MultiplicativeExpression)  list.add(this._MultiplicativeExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAdditiveExpression0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAdditiveExpression0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAdditiveExpression0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAdditiveExpression0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 402:  AdditiveExpression ::= AdditiveExpression - MultiplicativeExpression
     *</b>
     */
    export class AdditiveExpression1 extends Ast implements IAdditiveExpression
    {
        private  _AdditiveExpression : IAdditiveExpression;
        private  _MINUS : AstToken;
        private  _MultiplicativeExpression : IMultiplicativeExpression;

        public  getAdditiveExpression() : IAdditiveExpression{ return this._AdditiveExpression; }
        public  setAdditiveExpression( _AdditiveExpression : IAdditiveExpression) : void { this._AdditiveExpression = _AdditiveExpression; }
        public  getMINUS() : AstToken{ return this._MINUS; }
        public  setMINUS( _MINUS : AstToken) : void { this._MINUS = _MINUS; }
        public  getMultiplicativeExpression() : IMultiplicativeExpression{ return this._MultiplicativeExpression; }
        public  setMultiplicativeExpression( _MultiplicativeExpression : IMultiplicativeExpression) : void { this._MultiplicativeExpression = _MultiplicativeExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _AdditiveExpression : IAdditiveExpression,
                     _MINUS : AstToken,
                     _MultiplicativeExpression : IMultiplicativeExpression)
        {
            super(leftIToken, rightIToken)

            this._AdditiveExpression = _AdditiveExpression;
            (<Ast> _AdditiveExpression).setParent(this);
            this._MINUS = _MINUS;
            (<Ast> _MINUS).setParent(this);
            this._MultiplicativeExpression = _MultiplicativeExpression;
            (<Ast> _MultiplicativeExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._AdditiveExpression)  list.add(this._AdditiveExpression);
            if(this._MINUS)  list.add(this._MINUS);
            if(this._MultiplicativeExpression)  list.add(this._MultiplicativeExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAdditiveExpression1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAdditiveExpression1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAdditiveExpression1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAdditiveExpression1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 404:  ShiftExpression ::= ShiftExpression << AdditiveExpression
     *</b>
     */
    export class ShiftExpression0 extends Ast implements IShiftExpression
    {
        private  _ShiftExpression : IShiftExpression;
        private  _LEFT_SHIFT : AstToken;
        private  _AdditiveExpression : IAdditiveExpression;

        public  getShiftExpression() : IShiftExpression{ return this._ShiftExpression; }
        public  setShiftExpression( _ShiftExpression : IShiftExpression) : void { this._ShiftExpression = _ShiftExpression; }
        public  getLEFT_SHIFT() : AstToken{ return this._LEFT_SHIFT; }
        public  setLEFT_SHIFT( _LEFT_SHIFT : AstToken) : void { this._LEFT_SHIFT = _LEFT_SHIFT; }
        public  getAdditiveExpression() : IAdditiveExpression{ return this._AdditiveExpression; }
        public  setAdditiveExpression( _AdditiveExpression : IAdditiveExpression) : void { this._AdditiveExpression = _AdditiveExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ShiftExpression : IShiftExpression,
                     _LEFT_SHIFT : AstToken,
                     _AdditiveExpression : IAdditiveExpression)
        {
            super(leftIToken, rightIToken)

            this._ShiftExpression = _ShiftExpression;
            (<Ast> _ShiftExpression).setParent(this);
            this._LEFT_SHIFT = _LEFT_SHIFT;
            (<Ast> _LEFT_SHIFT).setParent(this);
            this._AdditiveExpression = _AdditiveExpression;
            (<Ast> _AdditiveExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ShiftExpression)  list.add(this._ShiftExpression);
            if(this._LEFT_SHIFT)  list.add(this._LEFT_SHIFT);
            if(this._AdditiveExpression)  list.add(this._AdditiveExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitShiftExpression0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitShiftExpression0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitShiftExpression0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitShiftExpression0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 405:  ShiftExpression ::= ShiftExpression > > AdditiveExpression
     *</b>
     */
    export class ShiftExpression1 extends Ast implements IShiftExpression
    {
        private  _ShiftExpression : IShiftExpression;
        private  _GREATER : AstToken;
        private  _GREATER3 : AstToken;
        private  _AdditiveExpression : IAdditiveExpression;

        public  getShiftExpression() : IShiftExpression{ return this._ShiftExpression; }
        public  setShiftExpression( _ShiftExpression : IShiftExpression) : void { this._ShiftExpression = _ShiftExpression; }
        public  getGREATER() : AstToken{ return this._GREATER; }
        public  setGREATER( _GREATER : AstToken) : void { this._GREATER = _GREATER; }
        public  getGREATER3() : AstToken{ return this._GREATER3; }
        public  setGREATER3( _GREATER3 : AstToken) : void { this._GREATER3 = _GREATER3; }
        public  getAdditiveExpression() : IAdditiveExpression{ return this._AdditiveExpression; }
        public  setAdditiveExpression( _AdditiveExpression : IAdditiveExpression) : void { this._AdditiveExpression = _AdditiveExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ShiftExpression : IShiftExpression,
                     _GREATER : AstToken,
                     _GREATER3 : AstToken,
                     _AdditiveExpression : IAdditiveExpression)
        {
            super(leftIToken, rightIToken)

            this._ShiftExpression = _ShiftExpression;
            (<Ast> _ShiftExpression).setParent(this);
            this._GREATER = _GREATER;
            (<Ast> _GREATER).setParent(this);
            this._GREATER3 = _GREATER3;
            (<Ast> _GREATER3).setParent(this);
            this._AdditiveExpression = _AdditiveExpression;
            (<Ast> _AdditiveExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ShiftExpression)  list.add(this._ShiftExpression);
            if(this._GREATER)  list.add(this._GREATER);
            if(this._GREATER3)  list.add(this._GREATER3);
            if(this._AdditiveExpression)  list.add(this._AdditiveExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitShiftExpression1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitShiftExpression1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitShiftExpression1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitShiftExpression1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 406:  ShiftExpression ::= ShiftExpression > > > AdditiveExpression
     *</b>
     */
    export class ShiftExpression2 extends Ast implements IShiftExpression
    {
        private  _ShiftExpression : IShiftExpression;
        private  _GREATER : AstToken;
        private  _GREATER3 : AstToken;
        private  _GREATER4 : AstToken;
        private  _AdditiveExpression : IAdditiveExpression;

        public  getShiftExpression() : IShiftExpression{ return this._ShiftExpression; }
        public  setShiftExpression( _ShiftExpression : IShiftExpression) : void { this._ShiftExpression = _ShiftExpression; }
        public  getGREATER() : AstToken{ return this._GREATER; }
        public  setGREATER( _GREATER : AstToken) : void { this._GREATER = _GREATER; }
        public  getGREATER3() : AstToken{ return this._GREATER3; }
        public  setGREATER3( _GREATER3 : AstToken) : void { this._GREATER3 = _GREATER3; }
        public  getGREATER4() : AstToken{ return this._GREATER4; }
        public  setGREATER4( _GREATER4 : AstToken) : void { this._GREATER4 = _GREATER4; }
        public  getAdditiveExpression() : IAdditiveExpression{ return this._AdditiveExpression; }
        public  setAdditiveExpression( _AdditiveExpression : IAdditiveExpression) : void { this._AdditiveExpression = _AdditiveExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _ShiftExpression : IShiftExpression,
                     _GREATER : AstToken,
                     _GREATER3 : AstToken,
                     _GREATER4 : AstToken,
                     _AdditiveExpression : IAdditiveExpression)
        {
            super(leftIToken, rightIToken)

            this._ShiftExpression = _ShiftExpression;
            (<Ast> _ShiftExpression).setParent(this);
            this._GREATER = _GREATER;
            (<Ast> _GREATER).setParent(this);
            this._GREATER3 = _GREATER3;
            (<Ast> _GREATER3).setParent(this);
            this._GREATER4 = _GREATER4;
            (<Ast> _GREATER4).setParent(this);
            this._AdditiveExpression = _AdditiveExpression;
            (<Ast> _AdditiveExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._ShiftExpression)  list.add(this._ShiftExpression);
            if(this._GREATER)  list.add(this._GREATER);
            if(this._GREATER3)  list.add(this._GREATER3);
            if(this._GREATER4)  list.add(this._GREATER4);
            if(this._AdditiveExpression)  list.add(this._AdditiveExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitShiftExpression2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitShiftExpression2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitShiftExpression2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitShiftExpression2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 408:  RelationalExpression ::= RelationalExpression < ShiftExpression
     *</b>
     */
    export class RelationalExpression0 extends Ast implements IRelationalExpression
    {
        private  _RelationalExpression : IRelationalExpression;
        private  _LESS : AstToken;
        private  _ShiftExpression : IShiftExpression;

        public  getRelationalExpression() : IRelationalExpression{ return this._RelationalExpression; }
        public  setRelationalExpression( _RelationalExpression : IRelationalExpression) : void { this._RelationalExpression = _RelationalExpression; }
        public  getLESS() : AstToken{ return this._LESS; }
        public  setLESS( _LESS : AstToken) : void { this._LESS = _LESS; }
        public  getShiftExpression() : IShiftExpression{ return this._ShiftExpression; }
        public  setShiftExpression( _ShiftExpression : IShiftExpression) : void { this._ShiftExpression = _ShiftExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _RelationalExpression : IRelationalExpression,
                     _LESS : AstToken,
                     _ShiftExpression : IShiftExpression)
        {
            super(leftIToken, rightIToken)

            this._RelationalExpression = _RelationalExpression;
            (<Ast> _RelationalExpression).setParent(this);
            this._LESS = _LESS;
            (<Ast> _LESS).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            (<Ast> _ShiftExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._RelationalExpression)  list.add(this._RelationalExpression);
            if(this._LESS)  list.add(this._LESS);
            if(this._ShiftExpression)  list.add(this._ShiftExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitRelationalExpression0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitRelationalExpression0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitRelationalExpression0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitRelationalExpression0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 409:  RelationalExpression ::= RelationalExpression > ShiftExpression
     *</b>
     */
    export class RelationalExpression1 extends Ast implements IRelationalExpression
    {
        private  _RelationalExpression : IRelationalExpression;
        private  _GREATER : AstToken;
        private  _ShiftExpression : IShiftExpression;

        public  getRelationalExpression() : IRelationalExpression{ return this._RelationalExpression; }
        public  setRelationalExpression( _RelationalExpression : IRelationalExpression) : void { this._RelationalExpression = _RelationalExpression; }
        public  getGREATER() : AstToken{ return this._GREATER; }
        public  setGREATER( _GREATER : AstToken) : void { this._GREATER = _GREATER; }
        public  getShiftExpression() : IShiftExpression{ return this._ShiftExpression; }
        public  setShiftExpression( _ShiftExpression : IShiftExpression) : void { this._ShiftExpression = _ShiftExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _RelationalExpression : IRelationalExpression,
                     _GREATER : AstToken,
                     _ShiftExpression : IShiftExpression)
        {
            super(leftIToken, rightIToken)

            this._RelationalExpression = _RelationalExpression;
            (<Ast> _RelationalExpression).setParent(this);
            this._GREATER = _GREATER;
            (<Ast> _GREATER).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            (<Ast> _ShiftExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._RelationalExpression)  list.add(this._RelationalExpression);
            if(this._GREATER)  list.add(this._GREATER);
            if(this._ShiftExpression)  list.add(this._ShiftExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitRelationalExpression1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitRelationalExpression1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitRelationalExpression1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitRelationalExpression1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 410:  RelationalExpression ::= RelationalExpression <= ShiftExpression
     *</b>
     */
    export class RelationalExpression2 extends Ast implements IRelationalExpression
    {
        private  _RelationalExpression : IRelationalExpression;
        private  _LESS_EQUAL : AstToken;
        private  _ShiftExpression : IShiftExpression;

        public  getRelationalExpression() : IRelationalExpression{ return this._RelationalExpression; }
        public  setRelationalExpression( _RelationalExpression : IRelationalExpression) : void { this._RelationalExpression = _RelationalExpression; }
        public  getLESS_EQUAL() : AstToken{ return this._LESS_EQUAL; }
        public  setLESS_EQUAL( _LESS_EQUAL : AstToken) : void { this._LESS_EQUAL = _LESS_EQUAL; }
        public  getShiftExpression() : IShiftExpression{ return this._ShiftExpression; }
        public  setShiftExpression( _ShiftExpression : IShiftExpression) : void { this._ShiftExpression = _ShiftExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _RelationalExpression : IRelationalExpression,
                     _LESS_EQUAL : AstToken,
                     _ShiftExpression : IShiftExpression)
        {
            super(leftIToken, rightIToken)

            this._RelationalExpression = _RelationalExpression;
            (<Ast> _RelationalExpression).setParent(this);
            this._LESS_EQUAL = _LESS_EQUAL;
            (<Ast> _LESS_EQUAL).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            (<Ast> _ShiftExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._RelationalExpression)  list.add(this._RelationalExpression);
            if(this._LESS_EQUAL)  list.add(this._LESS_EQUAL);
            if(this._ShiftExpression)  list.add(this._ShiftExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitRelationalExpression2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitRelationalExpression2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitRelationalExpression2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitRelationalExpression2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 411:  RelationalExpression ::= RelationalExpression > = ShiftExpression
     *</b>
     */
    export class RelationalExpression3 extends Ast implements IRelationalExpression
    {
        private  _RelationalExpression : IRelationalExpression;
        private  _GREATER : AstToken;
        private  _EQUAL : AstToken;
        private  _ShiftExpression : IShiftExpression;

        public  getRelationalExpression() : IRelationalExpression{ return this._RelationalExpression; }
        public  setRelationalExpression( _RelationalExpression : IRelationalExpression) : void { this._RelationalExpression = _RelationalExpression; }
        public  getGREATER() : AstToken{ return this._GREATER; }
        public  setGREATER( _GREATER : AstToken) : void { this._GREATER = _GREATER; }
        public  getEQUAL() : AstToken{ return this._EQUAL; }
        public  setEQUAL( _EQUAL : AstToken) : void { this._EQUAL = _EQUAL; }
        public  getShiftExpression() : IShiftExpression{ return this._ShiftExpression; }
        public  setShiftExpression( _ShiftExpression : IShiftExpression) : void { this._ShiftExpression = _ShiftExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _RelationalExpression : IRelationalExpression,
                     _GREATER : AstToken,
                     _EQUAL : AstToken,
                     _ShiftExpression : IShiftExpression)
        {
            super(leftIToken, rightIToken)

            this._RelationalExpression = _RelationalExpression;
            (<Ast> _RelationalExpression).setParent(this);
            this._GREATER = _GREATER;
            (<Ast> _GREATER).setParent(this);
            this._EQUAL = _EQUAL;
            (<Ast> _EQUAL).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            (<Ast> _ShiftExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._RelationalExpression)  list.add(this._RelationalExpression);
            if(this._GREATER)  list.add(this._GREATER);
            if(this._EQUAL)  list.add(this._EQUAL);
            if(this._ShiftExpression)  list.add(this._ShiftExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitRelationalExpression3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitRelationalExpression3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitRelationalExpression3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitRelationalExpression3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 412:  RelationalExpression ::= RelationalExpression instanceof ReferenceType
     *</b>
     */
    export class RelationalExpression4 extends Ast implements IRelationalExpression
    {
        private  _RelationalExpression : IRelationalExpression;
        private  _instanceof : AstToken;
        private  _ReferenceType : IReferenceType;

        public  getRelationalExpression() : IRelationalExpression{ return this._RelationalExpression; }
        public  setRelationalExpression( _RelationalExpression : IRelationalExpression) : void { this._RelationalExpression = _RelationalExpression; }
        public  getinstanceof() : AstToken{ return this._instanceof; }
        public  setinstanceof( _instanceof : AstToken) : void { this._instanceof = _instanceof; }
        public  getReferenceType() : IReferenceType{ return this._ReferenceType; }
        public  setReferenceType( _ReferenceType : IReferenceType) : void { this._ReferenceType = _ReferenceType; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _RelationalExpression : IRelationalExpression,
                     _instanceof : AstToken,
                     _ReferenceType : IReferenceType)
        {
            super(leftIToken, rightIToken)

            this._RelationalExpression = _RelationalExpression;
            (<Ast> _RelationalExpression).setParent(this);
            this._instanceof = _instanceof;
            (<Ast> _instanceof).setParent(this);
            this._ReferenceType = _ReferenceType;
            (<Ast> _ReferenceType).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._RelationalExpression)  list.add(this._RelationalExpression);
            if(this._instanceof)  list.add(this._instanceof);
            if(this._ReferenceType)  list.add(this._ReferenceType);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitRelationalExpression4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitRelationalExpression4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitRelationalExpression4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitRelationalExpression4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 414:  EqualityExpression ::= EqualityExpression == RelationalExpression
     *</b>
     */
    export class EqualityExpression0 extends Ast implements IEqualityExpression
    {
        private  _EqualityExpression : IEqualityExpression;
        private  _EQUAL_EQUAL : AstToken;
        private  _RelationalExpression : IRelationalExpression;

        public  getEqualityExpression() : IEqualityExpression{ return this._EqualityExpression; }
        public  setEqualityExpression( _EqualityExpression : IEqualityExpression) : void { this._EqualityExpression = _EqualityExpression; }
        public  getEQUAL_EQUAL() : AstToken{ return this._EQUAL_EQUAL; }
        public  setEQUAL_EQUAL( _EQUAL_EQUAL : AstToken) : void { this._EQUAL_EQUAL = _EQUAL_EQUAL; }
        public  getRelationalExpression() : IRelationalExpression{ return this._RelationalExpression; }
        public  setRelationalExpression( _RelationalExpression : IRelationalExpression) : void { this._RelationalExpression = _RelationalExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _EqualityExpression : IEqualityExpression,
                     _EQUAL_EQUAL : AstToken,
                     _RelationalExpression : IRelationalExpression)
        {
            super(leftIToken, rightIToken)

            this._EqualityExpression = _EqualityExpression;
            (<Ast> _EqualityExpression).setParent(this);
            this._EQUAL_EQUAL = _EQUAL_EQUAL;
            (<Ast> _EQUAL_EQUAL).setParent(this);
            this._RelationalExpression = _RelationalExpression;
            (<Ast> _RelationalExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._EqualityExpression)  list.add(this._EqualityExpression);
            if(this._EQUAL_EQUAL)  list.add(this._EQUAL_EQUAL);
            if(this._RelationalExpression)  list.add(this._RelationalExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEqualityExpression0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEqualityExpression0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEqualityExpression0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEqualityExpression0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 415:  EqualityExpression ::= EqualityExpression != RelationalExpression
     *</b>
     */
    export class EqualityExpression1 extends Ast implements IEqualityExpression
    {
        private  _EqualityExpression : IEqualityExpression;
        private  _NOT_EQUAL : AstToken;
        private  _RelationalExpression : IRelationalExpression;

        public  getEqualityExpression() : IEqualityExpression{ return this._EqualityExpression; }
        public  setEqualityExpression( _EqualityExpression : IEqualityExpression) : void { this._EqualityExpression = _EqualityExpression; }
        public  getNOT_EQUAL() : AstToken{ return this._NOT_EQUAL; }
        public  setNOT_EQUAL( _NOT_EQUAL : AstToken) : void { this._NOT_EQUAL = _NOT_EQUAL; }
        public  getRelationalExpression() : IRelationalExpression{ return this._RelationalExpression; }
        public  setRelationalExpression( _RelationalExpression : IRelationalExpression) : void { this._RelationalExpression = _RelationalExpression; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _EqualityExpression : IEqualityExpression,
                     _NOT_EQUAL : AstToken,
                     _RelationalExpression : IRelationalExpression)
        {
            super(leftIToken, rightIToken)

            this._EqualityExpression = _EqualityExpression;
            (<Ast> _EqualityExpression).setParent(this);
            this._NOT_EQUAL = _NOT_EQUAL;
            (<Ast> _NOT_EQUAL).setParent(this);
            this._RelationalExpression = _RelationalExpression;
            (<Ast> _RelationalExpression).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._EqualityExpression)  list.add(this._EqualityExpression);
            if(this._NOT_EQUAL)  list.add(this._NOT_EQUAL);
            if(this._RelationalExpression)  list.add(this._RelationalExpression);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitEqualityExpression1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitEqualityExpression1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitEqualityExpression1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitEqualityExpression1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 434:  AssignmentOperator ::= =
     *</b>
     */
    export class AssignmentOperator0 extends AstToken implements IAssignmentOperator
    {
        public  getEQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator0(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator0(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator0(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator0(this, o); }
    }

    /**
     *<b>
    *<li>Rule 435:  AssignmentOperator ::= *=
     *</b>
     */
    export class AssignmentOperator1 extends AstToken implements IAssignmentOperator
    {
        public  getMULTIPLY_EQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator1(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator1(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator1(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator1(this, o); }
    }

    /**
     *<b>
    *<li>Rule 436:  AssignmentOperator ::= /=
     *</b>
     */
    export class AssignmentOperator2 extends AstToken implements IAssignmentOperator
    {
        public  getDIVIDE_EQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator2(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator2(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator2(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator2(this, o); }
    }

    /**
     *<b>
    *<li>Rule 437:  AssignmentOperator ::= %=
     *</b>
     */
    export class AssignmentOperator3 extends AstToken implements IAssignmentOperator
    {
        public  getREMAINDER_EQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator3(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator3(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator3(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator3(this, o); }
    }

    /**
     *<b>
    *<li>Rule 438:  AssignmentOperator ::= +=
     *</b>
     */
    export class AssignmentOperator4 extends AstToken implements IAssignmentOperator
    {
        public  getPLUS_EQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator4(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator4(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator4(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator4(this, o); }
    }

    /**
     *<b>
    *<li>Rule 439:  AssignmentOperator ::= -=
     *</b>
     */
    export class AssignmentOperator5 extends AstToken implements IAssignmentOperator
    {
        public  getMINUS_EQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator5(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator5(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator5(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator5(this, o); }
    }

    /**
     *<b>
    *<li>Rule 440:  AssignmentOperator ::= <<=
     *</b>
     */
    export class AssignmentOperator6 extends AstToken implements IAssignmentOperator
    {
        public  getLEFT_SHIFT_EQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator6(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator6(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator6(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator6(this, o); }
    }

    /**
     *<b>
    *<li>Rule 441:  AssignmentOperator ::= > > =
     *</b>
     */
    export class AssignmentOperator7 extends Ast implements IAssignmentOperator
    {
        private  _GREATER : AstToken;
        private  _GREATER2 : AstToken;
        private  _EQUAL : AstToken;

        public  getGREATER() : AstToken{ return this._GREATER; }
        public  setGREATER( _GREATER : AstToken) : void { this._GREATER = _GREATER; }
        public  getGREATER2() : AstToken{ return this._GREATER2; }
        public  setGREATER2( _GREATER2 : AstToken) : void { this._GREATER2 = _GREATER2; }
        public  getEQUAL() : AstToken{ return this._EQUAL; }
        public  setEQUAL( _EQUAL : AstToken) : void { this._EQUAL = _EQUAL; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _GREATER : AstToken,
                     _GREATER2 : AstToken,
                     _EQUAL : AstToken)
        {
            super(leftIToken, rightIToken)

            this._GREATER = _GREATER;
            (<Ast> _GREATER).setParent(this);
            this._GREATER2 = _GREATER2;
            (<Ast> _GREATER2).setParent(this);
            this._EQUAL = _EQUAL;
            (<Ast> _EQUAL).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._GREATER)  list.add(this._GREATER);
            if(this._GREATER2)  list.add(this._GREATER2);
            if(this._EQUAL)  list.add(this._EQUAL);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator7(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator7(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator7(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator7(this, o); }
    }

    /**
     *<b>
    *<li>Rule 442:  AssignmentOperator ::= > > > =
     *</b>
     */
    export class AssignmentOperator8 extends Ast implements IAssignmentOperator
    {
        private  _GREATER : AstToken;
        private  _GREATER2 : AstToken;
        private  _GREATER3 : AstToken;
        private  _EQUAL : AstToken;

        public  getGREATER() : AstToken{ return this._GREATER; }
        public  setGREATER( _GREATER : AstToken) : void { this._GREATER = _GREATER; }
        public  getGREATER2() : AstToken{ return this._GREATER2; }
        public  setGREATER2( _GREATER2 : AstToken) : void { this._GREATER2 = _GREATER2; }
        public  getGREATER3() : AstToken{ return this._GREATER3; }
        public  setGREATER3( _GREATER3 : AstToken) : void { this._GREATER3 = _GREATER3; }
        public  getEQUAL() : AstToken{ return this._EQUAL; }
        public  setEQUAL( _EQUAL : AstToken) : void { this._EQUAL = _EQUAL; }

        constructor(leftIToken : IToken , rightIToken : IToken ,
                     _GREATER : AstToken,
                     _GREATER2 : AstToken,
                     _GREATER3 : AstToken,
                     _EQUAL : AstToken)
        {
            super(leftIToken, rightIToken)

            this._GREATER = _GREATER;
            (<Ast> _GREATER).setParent(this);
            this._GREATER2 = _GREATER2;
            (<Ast> _GREATER2).setParent(this);
            this._GREATER3 = _GREATER3;
            (<Ast> _GREATER3).setParent(this);
            this._EQUAL = _EQUAL;
            (<Ast> _EQUAL).setParent(this);
            this.initialize();
        }

        /**
         * A list of all children of this node, don't including the null ones.
         */
         public   getAllChildren() : Lpg.Util.ArrayList<IAst>
        {
            let list = new Lpg.Util.ArrayList<IAst>();
            if(this._GREATER)  list.add(this._GREATER);
            if(this._GREATER2)  list.add(this._GREATER2);
            if(this._GREATER3)  list.add(this._GREATER3);
            if(this._EQUAL)  list.add(this._EQUAL);
            return list;
        }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator8(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator8(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator8(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator8(this, o); }
    }

    /**
     *<b>
    *<li>Rule 443:  AssignmentOperator ::= &=
     *</b>
     */
    export class AssignmentOperator9 extends AstToken implements IAssignmentOperator
    {
        public  getAND_EQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator9(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator9(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator9(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator9(this, o); }
    }

    /**
     *<b>
    *<li>Rule 444:  AssignmentOperator ::= ^=
     *</b>
     */
    export class AssignmentOperator10 extends AstToken implements IAssignmentOperator
    {
        public  getXOR_EQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator10(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator10(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator10(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator10(this, o); }
    }

    /**
     *<b>
    *<li>Rule 445:  AssignmentOperator ::= |=
     *</b>
     */
    export class AssignmentOperator11 extends AstToken implements IAssignmentOperator
    {
        public  getOR_EQUAL() : IToken { return this.leftIToken; }

    constructor(token : IToken ) { super(token); this.initialize(); }

        public  acceptWithVisitor(v : Visitor) : void{ v.visitAssignmentOperator11(this); }
        public  acceptWithArg(v : ArgumentVisitor, o : any) : void { v.visitAssignmentOperator11(this, o); }
        public  acceptWithResult(v : ResultVisitor) : any{ return v.visitAssignmentOperator11(this); }
        public   acceptWthResultArgument(v : ResultArgumentVisitor, o : any) : any { return v.visitAssignmentOperator11(this, o); }
    }

    export interface Visitor
    {
        visitAstToken(n : AstToken) : void;
        visitidentifier(n : identifier) : void;
        visitPrimitiveType(n : PrimitiveType) : void;
        visitClassType(n : ClassType) : void;
        visitInterfaceType(n : InterfaceType) : void;
        visitTypeName(n : TypeName) : void;
        visitArrayType(n : ArrayType) : void;
        visitTypeParameter(n : TypeParameter) : void;
        visitTypeBound(n : TypeBound) : void;
        visitAdditionalBoundList(n : AdditionalBoundList) : void;
        visitAdditionalBound(n : AdditionalBound) : void;
        visitTypeArguments(n : TypeArguments) : void;
        visitActualTypeArgumentList(n : ActualTypeArgumentList) : void;
        visitWildcard(n : Wildcard) : void;
        visitPackageName(n : PackageName) : void;
        visitExpressionName(n : ExpressionName) : void;
        visitMethodName(n : MethodName) : void;
        visitPackageOrTypeName(n : PackageOrTypeName) : void;
        visitAmbiguousName(n : AmbiguousName) : void;
        visitCompilationUnit(n : CompilationUnit) : void;
        visitImportDeclarations(n : ImportDeclarations) : void;
        visitTypeDeclarations(n : TypeDeclarations) : void;
        visitPackageDeclaration(n : PackageDeclaration) : void;
        visitSingleTypeImportDeclaration(n : SingleTypeImportDeclaration) : void;
        visitTypeImportOnDemandDeclaration(n : TypeImportOnDemandDeclaration) : void;
        visitSingleStaticImportDeclaration(n : SingleStaticImportDeclaration) : void;
        visitStaticImportOnDemandDeclaration(n : StaticImportOnDemandDeclaration) : void;
        visitTypeDeclaration(n : TypeDeclaration) : void;
        visitNormalClassDeclaration(n : NormalClassDeclaration) : void;
        visitClassModifiers(n : ClassModifiers) : void;
        visitTypeParameters(n : TypeParameters) : void;
        visitTypeParameterList(n : TypeParameterList) : void;
        visitSuper(n : Super) : void;
        visitInterfaces(n : Interfaces) : void;
        visitInterfaceTypeList(n : InterfaceTypeList) : void;
        visitClassBody(n : ClassBody) : void;
        visitClassBodyDeclarations(n : ClassBodyDeclarations) : void;
        visitClassMemberDeclaration(n : ClassMemberDeclaration) : void;
        visitFieldDeclaration(n : FieldDeclaration) : void;
        visitVariableDeclarators(n : VariableDeclarators) : void;
        visitVariableDeclarator(n : VariableDeclarator) : void;
        visitVariableDeclaratorId(n : VariableDeclaratorId) : void;
        visitFieldModifiers(n : FieldModifiers) : void;
        visitMethodDeclaration(n : MethodDeclaration) : void;
        visitMethodHeader(n : MethodHeader) : void;
        visitResultType(n : ResultType) : void;
        visitFormalParameterList(n : FormalParameterList) : void;
        visitFormalParameters(n : FormalParameters) : void;
        visitFormalParameter(n : FormalParameter) : void;
        visitVariableModifiers(n : VariableModifiers) : void;
        visitVariableModifier(n : VariableModifier) : void;
        visitLastFormalParameter(n : LastFormalParameter) : void;
        visitMethodModifiers(n : MethodModifiers) : void;
        visitThrows(n : Throws) : void;
        visitExceptionTypeList(n : ExceptionTypeList) : void;
        visitMethodBody(n : MethodBody) : void;
        visitStaticInitializer(n : StaticInitializer) : void;
        visitConstructorDeclaration(n : ConstructorDeclaration) : void;
        visitConstructorDeclarator(n : ConstructorDeclarator) : void;
        visitConstructorModifiers(n : ConstructorModifiers) : void;
        visitConstructorBody(n : ConstructorBody) : void;
        visitEnumDeclaration(n : EnumDeclaration) : void;
        visitEnumBody(n : EnumBody) : void;
        visitEnumConstants(n : EnumConstants) : void;
        visitEnumConstant(n : EnumConstant) : void;
        visitArguments(n : Arguments) : void;
        visitEnumBodyDeclarations(n : EnumBodyDeclarations) : void;
        visitNormalInterfaceDeclaration(n : NormalInterfaceDeclaration) : void;
        visitInterfaceModifiers(n : InterfaceModifiers) : void;
        visitInterfaceBody(n : InterfaceBody) : void;
        visitInterfaceMemberDeclarations(n : InterfaceMemberDeclarations) : void;
        visitInterfaceMemberDeclaration(n : InterfaceMemberDeclaration) : void;
        visitConstantDeclaration(n : ConstantDeclaration) : void;
        visitConstantModifiers(n : ConstantModifiers) : void;
        visitAbstractMethodDeclaration(n : AbstractMethodDeclaration) : void;
        visitAbstractMethodModifiers(n : AbstractMethodModifiers) : void;
        visitAnnotationTypeDeclaration(n : AnnotationTypeDeclaration) : void;
        visitAnnotationTypeBody(n : AnnotationTypeBody) : void;
        visitAnnotationTypeElementDeclarations(n : AnnotationTypeElementDeclarations) : void;
        visitDefaultValue(n : DefaultValue) : void;
        visitAnnotations(n : Annotations) : void;
        visitNormalAnnotation(n : NormalAnnotation) : void;
        visitElementValuePairs(n : ElementValuePairs) : void;
        visitElementValuePair(n : ElementValuePair) : void;
        visitElementValueArrayInitializer(n : ElementValueArrayInitializer) : void;
        visitElementValues(n : ElementValues) : void;
        visitMarkerAnnotation(n : MarkerAnnotation) : void;
        visitSingleElementAnnotation(n : SingleElementAnnotation) : void;
        visitArrayInitializer(n : ArrayInitializer) : void;
        visitVariableInitializers(n : VariableInitializers) : void;
        visitBlock(n : Block) : void;
        visitBlockStatements(n : BlockStatements) : void;
        visitLocalVariableDeclarationStatement(n : LocalVariableDeclarationStatement) : void;
        visitLocalVariableDeclaration(n : LocalVariableDeclaration) : void;
        visitIfThenStatement(n : IfThenStatement) : void;
        visitIfThenElseStatement(n : IfThenElseStatement) : void;
        visitIfThenElseStatementNoShortIf(n : IfThenElseStatementNoShortIf) : void;
        visitEmptyStatement(n : EmptyStatement) : void;
        visitLabeledStatement(n : LabeledStatement) : void;
        visitLabeledStatementNoShortIf(n : LabeledStatementNoShortIf) : void;
        visitExpressionStatement(n : ExpressionStatement) : void;
        visitSwitchStatement(n : SwitchStatement) : void;
        visitSwitchBlock(n : SwitchBlock) : void;
        visitSwitchBlockStatementGroups(n : SwitchBlockStatementGroups) : void;
        visitSwitchBlockStatementGroup(n : SwitchBlockStatementGroup) : void;
        visitSwitchLabels(n : SwitchLabels) : void;
        visitWhileStatement(n : WhileStatement) : void;
        visitWhileStatementNoShortIf(n : WhileStatementNoShortIf) : void;
        visitDoStatement(n : DoStatement) : void;
        visitBasicForStatement(n : BasicForStatement) : void;
        visitForStatementNoShortIf(n : ForStatementNoShortIf) : void;
        visitStatementExpressionList(n : StatementExpressionList) : void;
        visitEnhancedForStatement(n : EnhancedForStatement) : void;
        visitBreakStatement(n : BreakStatement) : void;
        visitContinueStatement(n : ContinueStatement) : void;
        visitReturnStatement(n : ReturnStatement) : void;
        visitThrowStatement(n : ThrowStatement) : void;
        visitSynchronizedStatement(n : SynchronizedStatement) : void;
        visitCatches(n : Catches) : void;
        visitCatchClause(n : CatchClause) : void;
        visitFinally(n : Finally) : void;
        visitArgumentList(n : ArgumentList) : void;
        visitDimExprs(n : DimExprs) : void;
        visitDimExpr(n : DimExpr) : void;
        visitPostIncrementExpression(n : PostIncrementExpression) : void;
        visitPostDecrementExpression(n : PostDecrementExpression) : void;
        visitPreIncrementExpression(n : PreIncrementExpression) : void;
        visitPreDecrementExpression(n : PreDecrementExpression) : void;
        visitAndExpression(n : AndExpression) : void;
        visitExclusiveOrExpression(n : ExclusiveOrExpression) : void;
        visitInclusiveOrExpression(n : InclusiveOrExpression) : void;
        visitConditionalAndExpression(n : ConditionalAndExpression) : void;
        visitConditionalOrExpression(n : ConditionalOrExpression) : void;
        visitConditionalExpression(n : ConditionalExpression) : void;
        visitAssignment(n : Assignment) : void;
        visitCommaopt(n : Commaopt) : void;
        visitEllipsisopt(n : Ellipsisopt) : void;
        visitLPGUserAction0(n : LPGUserAction0) : void;
        visitLPGUserAction1(n : LPGUserAction1) : void;
        visitLPGUserAction2(n : LPGUserAction2) : void;
        visitLPGUserAction3(n : LPGUserAction3) : void;
        visitLPGUserAction4(n : LPGUserAction4) : void;
        visitIntegralType0(n : IntegralType0) : void;
        visitIntegralType1(n : IntegralType1) : void;
        visitIntegralType2(n : IntegralType2) : void;
        visitIntegralType3(n : IntegralType3) : void;
        visitIntegralType4(n : IntegralType4) : void;
        visitFloatingPointType0(n : FloatingPointType0) : void;
        visitFloatingPointType1(n : FloatingPointType1) : void;
        visitWildcardBounds0(n : WildcardBounds0) : void;
        visitWildcardBounds1(n : WildcardBounds1) : void;
        visitClassModifier0(n : ClassModifier0) : void;
        visitClassModifier1(n : ClassModifier1) : void;
        visitClassModifier2(n : ClassModifier2) : void;
        visitClassModifier3(n : ClassModifier3) : void;
        visitClassModifier4(n : ClassModifier4) : void;
        visitClassModifier5(n : ClassModifier5) : void;
        visitClassModifier6(n : ClassModifier6) : void;
        visitFieldModifier0(n : FieldModifier0) : void;
        visitFieldModifier1(n : FieldModifier1) : void;
        visitFieldModifier2(n : FieldModifier2) : void;
        visitFieldModifier3(n : FieldModifier3) : void;
        visitFieldModifier4(n : FieldModifier4) : void;
        visitFieldModifier5(n : FieldModifier5) : void;
        visitFieldModifier6(n : FieldModifier6) : void;
        visitMethodDeclarator0(n : MethodDeclarator0) : void;
        visitMethodDeclarator1(n : MethodDeclarator1) : void;
        visitMethodModifier0(n : MethodModifier0) : void;
        visitMethodModifier1(n : MethodModifier1) : void;
        visitMethodModifier2(n : MethodModifier2) : void;
        visitMethodModifier3(n : MethodModifier3) : void;
        visitMethodModifier4(n : MethodModifier4) : void;
        visitMethodModifier5(n : MethodModifier5) : void;
        visitMethodModifier6(n : MethodModifier6) : void;
        visitMethodModifier7(n : MethodModifier7) : void;
        visitMethodModifier8(n : MethodModifier8) : void;
        visitConstructorModifier0(n : ConstructorModifier0) : void;
        visitConstructorModifier1(n : ConstructorModifier1) : void;
        visitConstructorModifier2(n : ConstructorModifier2) : void;
        visitExplicitConstructorInvocation0(n : ExplicitConstructorInvocation0) : void;
        visitExplicitConstructorInvocation1(n : ExplicitConstructorInvocation1) : void;
        visitExplicitConstructorInvocation2(n : ExplicitConstructorInvocation2) : void;
        visitInterfaceModifier0(n : InterfaceModifier0) : void;
        visitInterfaceModifier1(n : InterfaceModifier1) : void;
        visitInterfaceModifier2(n : InterfaceModifier2) : void;
        visitInterfaceModifier3(n : InterfaceModifier3) : void;
        visitInterfaceModifier4(n : InterfaceModifier4) : void;
        visitInterfaceModifier5(n : InterfaceModifier5) : void;
        visitExtendsInterfaces0(n : ExtendsInterfaces0) : void;
        visitExtendsInterfaces1(n : ExtendsInterfaces1) : void;
        visitConstantModifier0(n : ConstantModifier0) : void;
        visitConstantModifier1(n : ConstantModifier1) : void;
        visitConstantModifier2(n : ConstantModifier2) : void;
        visitAbstractMethodModifier0(n : AbstractMethodModifier0) : void;
        visitAbstractMethodModifier1(n : AbstractMethodModifier1) : void;
        visitAnnotationTypeElementDeclaration0(n : AnnotationTypeElementDeclaration0) : void;
        visitAnnotationTypeElementDeclaration1(n : AnnotationTypeElementDeclaration1) : void;
        visitAssertStatement0(n : AssertStatement0) : void;
        visitAssertStatement1(n : AssertStatement1) : void;
        visitSwitchLabel0(n : SwitchLabel0) : void;
        visitSwitchLabel1(n : SwitchLabel1) : void;
        visitSwitchLabel2(n : SwitchLabel2) : void;
        visitTryStatement0(n : TryStatement0) : void;
        visitTryStatement1(n : TryStatement1) : void;
        visitPrimaryNoNewArray0(n : PrimaryNoNewArray0) : void;
        visitPrimaryNoNewArray1(n : PrimaryNoNewArray1) : void;
        visitPrimaryNoNewArray2(n : PrimaryNoNewArray2) : void;
        visitPrimaryNoNewArray3(n : PrimaryNoNewArray3) : void;
        visitPrimaryNoNewArray4(n : PrimaryNoNewArray4) : void;
        visitLiteral0(n : Literal0) : void;
        visitLiteral1(n : Literal1) : void;
        visitLiteral2(n : Literal2) : void;
        visitLiteral3(n : Literal3) : void;
        visitLiteral4(n : Literal4) : void;
        visitLiteral5(n : Literal5) : void;
        visitLiteral6(n : Literal6) : void;
        visitBooleanLiteral0(n : BooleanLiteral0) : void;
        visitBooleanLiteral1(n : BooleanLiteral1) : void;
        visitClassInstanceCreationExpression0(n : ClassInstanceCreationExpression0) : void;
        visitClassInstanceCreationExpression1(n : ClassInstanceCreationExpression1) : void;
        visitArrayCreationExpression0(n : ArrayCreationExpression0) : void;
        visitArrayCreationExpression1(n : ArrayCreationExpression1) : void;
        visitArrayCreationExpression2(n : ArrayCreationExpression2) : void;
        visitArrayCreationExpression3(n : ArrayCreationExpression3) : void;
        visitDims0(n : Dims0) : void;
        visitDims1(n : Dims1) : void;
        visitFieldAccess0(n : FieldAccess0) : void;
        visitFieldAccess1(n : FieldAccess1) : void;
        visitFieldAccess2(n : FieldAccess2) : void;
        visitMethodInvocation0(n : MethodInvocation0) : void;
        visitMethodInvocation1(n : MethodInvocation1) : void;
        visitMethodInvocation2(n : MethodInvocation2) : void;
        visitMethodInvocation3(n : MethodInvocation3) : void;
        visitMethodInvocation4(n : MethodInvocation4) : void;
        visitArrayAccess0(n : ArrayAccess0) : void;
        visitArrayAccess1(n : ArrayAccess1) : void;
        visitUnaryExpression0(n : UnaryExpression0) : void;
        visitUnaryExpression1(n : UnaryExpression1) : void;
        visitUnaryExpressionNotPlusMinus0(n : UnaryExpressionNotPlusMinus0) : void;
        visitUnaryExpressionNotPlusMinus1(n : UnaryExpressionNotPlusMinus1) : void;
        visitCastExpression0(n : CastExpression0) : void;
        visitCastExpression1(n : CastExpression1) : void;
        visitMultiplicativeExpression0(n : MultiplicativeExpression0) : void;
        visitMultiplicativeExpression1(n : MultiplicativeExpression1) : void;
        visitMultiplicativeExpression2(n : MultiplicativeExpression2) : void;
        visitAdditiveExpression0(n : AdditiveExpression0) : void;
        visitAdditiveExpression1(n : AdditiveExpression1) : void;
        visitShiftExpression0(n : ShiftExpression0) : void;
        visitShiftExpression1(n : ShiftExpression1) : void;
        visitShiftExpression2(n : ShiftExpression2) : void;
        visitRelationalExpression0(n : RelationalExpression0) : void;
        visitRelationalExpression1(n : RelationalExpression1) : void;
        visitRelationalExpression2(n : RelationalExpression2) : void;
        visitRelationalExpression3(n : RelationalExpression3) : void;
        visitRelationalExpression4(n : RelationalExpression4) : void;
        visitEqualityExpression0(n : EqualityExpression0) : void;
        visitEqualityExpression1(n : EqualityExpression1) : void;
        visitAssignmentOperator0(n : AssignmentOperator0) : void;
        visitAssignmentOperator1(n : AssignmentOperator1) : void;
        visitAssignmentOperator2(n : AssignmentOperator2) : void;
        visitAssignmentOperator3(n : AssignmentOperator3) : void;
        visitAssignmentOperator4(n : AssignmentOperator4) : void;
        visitAssignmentOperator5(n : AssignmentOperator5) : void;
        visitAssignmentOperator6(n : AssignmentOperator6) : void;
        visitAssignmentOperator7(n : AssignmentOperator7) : void;
        visitAssignmentOperator8(n : AssignmentOperator8) : void;
        visitAssignmentOperator9(n : AssignmentOperator9) : void;
        visitAssignmentOperator10(n : AssignmentOperator10) : void;
        visitAssignmentOperator11(n : AssignmentOperator11) : void;

        visit(n : Ast) : void;
    }
    export interface ArgumentVisitor
    {
        visitAstToken(n : AstToken, o : any) : void;
        visitidentifier(n : identifier, o : any) : void;
        visitPrimitiveType(n : PrimitiveType, o : any) : void;
        visitClassType(n : ClassType, o : any) : void;
        visitInterfaceType(n : InterfaceType, o : any) : void;
        visitTypeName(n : TypeName, o : any) : void;
        visitArrayType(n : ArrayType, o : any) : void;
        visitTypeParameter(n : TypeParameter, o : any) : void;
        visitTypeBound(n : TypeBound, o : any) : void;
        visitAdditionalBoundList(n : AdditionalBoundList, o : any) : void;
        visitAdditionalBound(n : AdditionalBound, o : any) : void;
        visitTypeArguments(n : TypeArguments, o : any) : void;
        visitActualTypeArgumentList(n : ActualTypeArgumentList, o : any) : void;
        visitWildcard(n : Wildcard, o : any) : void;
        visitPackageName(n : PackageName, o : any) : void;
        visitExpressionName(n : ExpressionName, o : any) : void;
        visitMethodName(n : MethodName, o : any) : void;
        visitPackageOrTypeName(n : PackageOrTypeName, o : any) : void;
        visitAmbiguousName(n : AmbiguousName, o : any) : void;
        visitCompilationUnit(n : CompilationUnit, o : any) : void;
        visitImportDeclarations(n : ImportDeclarations, o : any) : void;
        visitTypeDeclarations(n : TypeDeclarations, o : any) : void;
        visitPackageDeclaration(n : PackageDeclaration, o : any) : void;
        visitSingleTypeImportDeclaration(n : SingleTypeImportDeclaration, o : any) : void;
        visitTypeImportOnDemandDeclaration(n : TypeImportOnDemandDeclaration, o : any) : void;
        visitSingleStaticImportDeclaration(n : SingleStaticImportDeclaration, o : any) : void;
        visitStaticImportOnDemandDeclaration(n : StaticImportOnDemandDeclaration, o : any) : void;
        visitTypeDeclaration(n : TypeDeclaration, o : any) : void;
        visitNormalClassDeclaration(n : NormalClassDeclaration, o : any) : void;
        visitClassModifiers(n : ClassModifiers, o : any) : void;
        visitTypeParameters(n : TypeParameters, o : any) : void;
        visitTypeParameterList(n : TypeParameterList, o : any) : void;
        visitSuper(n : Super, o : any) : void;
        visitInterfaces(n : Interfaces, o : any) : void;
        visitInterfaceTypeList(n : InterfaceTypeList, o : any) : void;
        visitClassBody(n : ClassBody, o : any) : void;
        visitClassBodyDeclarations(n : ClassBodyDeclarations, o : any) : void;
        visitClassMemberDeclaration(n : ClassMemberDeclaration, o : any) : void;
        visitFieldDeclaration(n : FieldDeclaration, o : any) : void;
        visitVariableDeclarators(n : VariableDeclarators, o : any) : void;
        visitVariableDeclarator(n : VariableDeclarator, o : any) : void;
        visitVariableDeclaratorId(n : VariableDeclaratorId, o : any) : void;
        visitFieldModifiers(n : FieldModifiers, o : any) : void;
        visitMethodDeclaration(n : MethodDeclaration, o : any) : void;
        visitMethodHeader(n : MethodHeader, o : any) : void;
        visitResultType(n : ResultType, o : any) : void;
        visitFormalParameterList(n : FormalParameterList, o : any) : void;
        visitFormalParameters(n : FormalParameters, o : any) : void;
        visitFormalParameter(n : FormalParameter, o : any) : void;
        visitVariableModifiers(n : VariableModifiers, o : any) : void;
        visitVariableModifier(n : VariableModifier, o : any) : void;
        visitLastFormalParameter(n : LastFormalParameter, o : any) : void;
        visitMethodModifiers(n : MethodModifiers, o : any) : void;
        visitThrows(n : Throws, o : any) : void;
        visitExceptionTypeList(n : ExceptionTypeList, o : any) : void;
        visitMethodBody(n : MethodBody, o : any) : void;
        visitStaticInitializer(n : StaticInitializer, o : any) : void;
        visitConstructorDeclaration(n : ConstructorDeclaration, o : any) : void;
        visitConstructorDeclarator(n : ConstructorDeclarator, o : any) : void;
        visitConstructorModifiers(n : ConstructorModifiers, o : any) : void;
        visitConstructorBody(n : ConstructorBody, o : any) : void;
        visitEnumDeclaration(n : EnumDeclaration, o : any) : void;
        visitEnumBody(n : EnumBody, o : any) : void;
        visitEnumConstants(n : EnumConstants, o : any) : void;
        visitEnumConstant(n : EnumConstant, o : any) : void;
        visitArguments(n : Arguments, o : any) : void;
        visitEnumBodyDeclarations(n : EnumBodyDeclarations, o : any) : void;
        visitNormalInterfaceDeclaration(n : NormalInterfaceDeclaration, o : any) : void;
        visitInterfaceModifiers(n : InterfaceModifiers, o : any) : void;
        visitInterfaceBody(n : InterfaceBody, o : any) : void;
        visitInterfaceMemberDeclarations(n : InterfaceMemberDeclarations, o : any) : void;
        visitInterfaceMemberDeclaration(n : InterfaceMemberDeclaration, o : any) : void;
        visitConstantDeclaration(n : ConstantDeclaration, o : any) : void;
        visitConstantModifiers(n : ConstantModifiers, o : any) : void;
        visitAbstractMethodDeclaration(n : AbstractMethodDeclaration, o : any) : void;
        visitAbstractMethodModifiers(n : AbstractMethodModifiers, o : any) : void;
        visitAnnotationTypeDeclaration(n : AnnotationTypeDeclaration, o : any) : void;
        visitAnnotationTypeBody(n : AnnotationTypeBody, o : any) : void;
        visitAnnotationTypeElementDeclarations(n : AnnotationTypeElementDeclarations, o : any) : void;
        visitDefaultValue(n : DefaultValue, o : any) : void;
        visitAnnotations(n : Annotations, o : any) : void;
        visitNormalAnnotation(n : NormalAnnotation, o : any) : void;
        visitElementValuePairs(n : ElementValuePairs, o : any) : void;
        visitElementValuePair(n : ElementValuePair, o : any) : void;
        visitElementValueArrayInitializer(n : ElementValueArrayInitializer, o : any) : void;
        visitElementValues(n : ElementValues, o : any) : void;
        visitMarkerAnnotation(n : MarkerAnnotation, o : any) : void;
        visitSingleElementAnnotation(n : SingleElementAnnotation, o : any) : void;
        visitArrayInitializer(n : ArrayInitializer, o : any) : void;
        visitVariableInitializers(n : VariableInitializers, o : any) : void;
        visitBlock(n : Block, o : any) : void;
        visitBlockStatements(n : BlockStatements, o : any) : void;
        visitLocalVariableDeclarationStatement(n : LocalVariableDeclarationStatement, o : any) : void;
        visitLocalVariableDeclaration(n : LocalVariableDeclaration, o : any) : void;
        visitIfThenStatement(n : IfThenStatement, o : any) : void;
        visitIfThenElseStatement(n : IfThenElseStatement, o : any) : void;
        visitIfThenElseStatementNoShortIf(n : IfThenElseStatementNoShortIf, o : any) : void;
        visitEmptyStatement(n : EmptyStatement, o : any) : void;
        visitLabeledStatement(n : LabeledStatement, o : any) : void;
        visitLabeledStatementNoShortIf(n : LabeledStatementNoShortIf, o : any) : void;
        visitExpressionStatement(n : ExpressionStatement, o : any) : void;
        visitSwitchStatement(n : SwitchStatement, o : any) : void;
        visitSwitchBlock(n : SwitchBlock, o : any) : void;
        visitSwitchBlockStatementGroups(n : SwitchBlockStatementGroups, o : any) : void;
        visitSwitchBlockStatementGroup(n : SwitchBlockStatementGroup, o : any) : void;
        visitSwitchLabels(n : SwitchLabels, o : any) : void;
        visitWhileStatement(n : WhileStatement, o : any) : void;
        visitWhileStatementNoShortIf(n : WhileStatementNoShortIf, o : any) : void;
        visitDoStatement(n : DoStatement, o : any) : void;
        visitBasicForStatement(n : BasicForStatement, o : any) : void;
        visitForStatementNoShortIf(n : ForStatementNoShortIf, o : any) : void;
        visitStatementExpressionList(n : StatementExpressionList, o : any) : void;
        visitEnhancedForStatement(n : EnhancedForStatement, o : any) : void;
        visitBreakStatement(n : BreakStatement, o : any) : void;
        visitContinueStatement(n : ContinueStatement, o : any) : void;
        visitReturnStatement(n : ReturnStatement, o : any) : void;
        visitThrowStatement(n : ThrowStatement, o : any) : void;
        visitSynchronizedStatement(n : SynchronizedStatement, o : any) : void;
        visitCatches(n : Catches, o : any) : void;
        visitCatchClause(n : CatchClause, o : any) : void;
        visitFinally(n : Finally, o : any) : void;
        visitArgumentList(n : ArgumentList, o : any) : void;
        visitDimExprs(n : DimExprs, o : any) : void;
        visitDimExpr(n : DimExpr, o : any) : void;
        visitPostIncrementExpression(n : PostIncrementExpression, o : any) : void;
        visitPostDecrementExpression(n : PostDecrementExpression, o : any) : void;
        visitPreIncrementExpression(n : PreIncrementExpression, o : any) : void;
        visitPreDecrementExpression(n : PreDecrementExpression, o : any) : void;
        visitAndExpression(n : AndExpression, o : any) : void;
        visitExclusiveOrExpression(n : ExclusiveOrExpression, o : any) : void;
        visitInclusiveOrExpression(n : InclusiveOrExpression, o : any) : void;
        visitConditionalAndExpression(n : ConditionalAndExpression, o : any) : void;
        visitConditionalOrExpression(n : ConditionalOrExpression, o : any) : void;
        visitConditionalExpression(n : ConditionalExpression, o : any) : void;
        visitAssignment(n : Assignment, o : any) : void;
        visitCommaopt(n : Commaopt, o : any) : void;
        visitEllipsisopt(n : Ellipsisopt, o : any) : void;
        visitLPGUserAction0(n : LPGUserAction0, o : any) : void;
        visitLPGUserAction1(n : LPGUserAction1, o : any) : void;
        visitLPGUserAction2(n : LPGUserAction2, o : any) : void;
        visitLPGUserAction3(n : LPGUserAction3, o : any) : void;
        visitLPGUserAction4(n : LPGUserAction4, o : any) : void;
        visitIntegralType0(n : IntegralType0, o : any) : void;
        visitIntegralType1(n : IntegralType1, o : any) : void;
        visitIntegralType2(n : IntegralType2, o : any) : void;
        visitIntegralType3(n : IntegralType3, o : any) : void;
        visitIntegralType4(n : IntegralType4, o : any) : void;
        visitFloatingPointType0(n : FloatingPointType0, o : any) : void;
        visitFloatingPointType1(n : FloatingPointType1, o : any) : void;
        visitWildcardBounds0(n : WildcardBounds0, o : any) : void;
        visitWildcardBounds1(n : WildcardBounds1, o : any) : void;
        visitClassModifier0(n : ClassModifier0, o : any) : void;
        visitClassModifier1(n : ClassModifier1, o : any) : void;
        visitClassModifier2(n : ClassModifier2, o : any) : void;
        visitClassModifier3(n : ClassModifier3, o : any) : void;
        visitClassModifier4(n : ClassModifier4, o : any) : void;
        visitClassModifier5(n : ClassModifier5, o : any) : void;
        visitClassModifier6(n : ClassModifier6, o : any) : void;
        visitFieldModifier0(n : FieldModifier0, o : any) : void;
        visitFieldModifier1(n : FieldModifier1, o : any) : void;
        visitFieldModifier2(n : FieldModifier2, o : any) : void;
        visitFieldModifier3(n : FieldModifier3, o : any) : void;
        visitFieldModifier4(n : FieldModifier4, o : any) : void;
        visitFieldModifier5(n : FieldModifier5, o : any) : void;
        visitFieldModifier6(n : FieldModifier6, o : any) : void;
        visitMethodDeclarator0(n : MethodDeclarator0, o : any) : void;
        visitMethodDeclarator1(n : MethodDeclarator1, o : any) : void;
        visitMethodModifier0(n : MethodModifier0, o : any) : void;
        visitMethodModifier1(n : MethodModifier1, o : any) : void;
        visitMethodModifier2(n : MethodModifier2, o : any) : void;
        visitMethodModifier3(n : MethodModifier3, o : any) : void;
        visitMethodModifier4(n : MethodModifier4, o : any) : void;
        visitMethodModifier5(n : MethodModifier5, o : any) : void;
        visitMethodModifier6(n : MethodModifier6, o : any) : void;
        visitMethodModifier7(n : MethodModifier7, o : any) : void;
        visitMethodModifier8(n : MethodModifier8, o : any) : void;
        visitConstructorModifier0(n : ConstructorModifier0, o : any) : void;
        visitConstructorModifier1(n : ConstructorModifier1, o : any) : void;
        visitConstructorModifier2(n : ConstructorModifier2, o : any) : void;
        visitExplicitConstructorInvocation0(n : ExplicitConstructorInvocation0, o : any) : void;
        visitExplicitConstructorInvocation1(n : ExplicitConstructorInvocation1, o : any) : void;
        visitExplicitConstructorInvocation2(n : ExplicitConstructorInvocation2, o : any) : void;
        visitInterfaceModifier0(n : InterfaceModifier0, o : any) : void;
        visitInterfaceModifier1(n : InterfaceModifier1, o : any) : void;
        visitInterfaceModifier2(n : InterfaceModifier2, o : any) : void;
        visitInterfaceModifier3(n : InterfaceModifier3, o : any) : void;
        visitInterfaceModifier4(n : InterfaceModifier4, o : any) : void;
        visitInterfaceModifier5(n : InterfaceModifier5, o : any) : void;
        visitExtendsInterfaces0(n : ExtendsInterfaces0, o : any) : void;
        visitExtendsInterfaces1(n : ExtendsInterfaces1, o : any) : void;
        visitConstantModifier0(n : ConstantModifier0, o : any) : void;
        visitConstantModifier1(n : ConstantModifier1, o : any) : void;
        visitConstantModifier2(n : ConstantModifier2, o : any) : void;
        visitAbstractMethodModifier0(n : AbstractMethodModifier0, o : any) : void;
        visitAbstractMethodModifier1(n : AbstractMethodModifier1, o : any) : void;
        visitAnnotationTypeElementDeclaration0(n : AnnotationTypeElementDeclaration0, o : any) : void;
        visitAnnotationTypeElementDeclaration1(n : AnnotationTypeElementDeclaration1, o : any) : void;
        visitAssertStatement0(n : AssertStatement0, o : any) : void;
        visitAssertStatement1(n : AssertStatement1, o : any) : void;
        visitSwitchLabel0(n : SwitchLabel0, o : any) : void;
        visitSwitchLabel1(n : SwitchLabel1, o : any) : void;
        visitSwitchLabel2(n : SwitchLabel2, o : any) : void;
        visitTryStatement0(n : TryStatement0, o : any) : void;
        visitTryStatement1(n : TryStatement1, o : any) : void;
        visitPrimaryNoNewArray0(n : PrimaryNoNewArray0, o : any) : void;
        visitPrimaryNoNewArray1(n : PrimaryNoNewArray1, o : any) : void;
        visitPrimaryNoNewArray2(n : PrimaryNoNewArray2, o : any) : void;
        visitPrimaryNoNewArray3(n : PrimaryNoNewArray3, o : any) : void;
        visitPrimaryNoNewArray4(n : PrimaryNoNewArray4, o : any) : void;
        visitLiteral0(n : Literal0, o : any) : void;
        visitLiteral1(n : Literal1, o : any) : void;
        visitLiteral2(n : Literal2, o : any) : void;
        visitLiteral3(n : Literal3, o : any) : void;
        visitLiteral4(n : Literal4, o : any) : void;
        visitLiteral5(n : Literal5, o : any) : void;
        visitLiteral6(n : Literal6, o : any) : void;
        visitBooleanLiteral0(n : BooleanLiteral0, o : any) : void;
        visitBooleanLiteral1(n : BooleanLiteral1, o : any) : void;
        visitClassInstanceCreationExpression0(n : ClassInstanceCreationExpression0, o : any) : void;
        visitClassInstanceCreationExpression1(n : ClassInstanceCreationExpression1, o : any) : void;
        visitArrayCreationExpression0(n : ArrayCreationExpression0, o : any) : void;
        visitArrayCreationExpression1(n : ArrayCreationExpression1, o : any) : void;
        visitArrayCreationExpression2(n : ArrayCreationExpression2, o : any) : void;
        visitArrayCreationExpression3(n : ArrayCreationExpression3, o : any) : void;
        visitDims0(n : Dims0, o : any) : void;
        visitDims1(n : Dims1, o : any) : void;
        visitFieldAccess0(n : FieldAccess0, o : any) : void;
        visitFieldAccess1(n : FieldAccess1, o : any) : void;
        visitFieldAccess2(n : FieldAccess2, o : any) : void;
        visitMethodInvocation0(n : MethodInvocation0, o : any) : void;
        visitMethodInvocation1(n : MethodInvocation1, o : any) : void;
        visitMethodInvocation2(n : MethodInvocation2, o : any) : void;
        visitMethodInvocation3(n : MethodInvocation3, o : any) : void;
        visitMethodInvocation4(n : MethodInvocation4, o : any) : void;
        visitArrayAccess0(n : ArrayAccess0, o : any) : void;
        visitArrayAccess1(n : ArrayAccess1, o : any) : void;
        visitUnaryExpression0(n : UnaryExpression0, o : any) : void;
        visitUnaryExpression1(n : UnaryExpression1, o : any) : void;
        visitUnaryExpressionNotPlusMinus0(n : UnaryExpressionNotPlusMinus0, o : any) : void;
        visitUnaryExpressionNotPlusMinus1(n : UnaryExpressionNotPlusMinus1, o : any) : void;
        visitCastExpression0(n : CastExpression0, o : any) : void;
        visitCastExpression1(n : CastExpression1, o : any) : void;
        visitMultiplicativeExpression0(n : MultiplicativeExpression0, o : any) : void;
        visitMultiplicativeExpression1(n : MultiplicativeExpression1, o : any) : void;
        visitMultiplicativeExpression2(n : MultiplicativeExpression2, o : any) : void;
        visitAdditiveExpression0(n : AdditiveExpression0, o : any) : void;
        visitAdditiveExpression1(n : AdditiveExpression1, o : any) : void;
        visitShiftExpression0(n : ShiftExpression0, o : any) : void;
        visitShiftExpression1(n : ShiftExpression1, o : any) : void;
        visitShiftExpression2(n : ShiftExpression2, o : any) : void;
        visitRelationalExpression0(n : RelationalExpression0, o : any) : void;
        visitRelationalExpression1(n : RelationalExpression1, o : any) : void;
        visitRelationalExpression2(n : RelationalExpression2, o : any) : void;
        visitRelationalExpression3(n : RelationalExpression3, o : any) : void;
        visitRelationalExpression4(n : RelationalExpression4, o : any) : void;
        visitEqualityExpression0(n : EqualityExpression0, o : any) : void;
        visitEqualityExpression1(n : EqualityExpression1, o : any) : void;
        visitAssignmentOperator0(n : AssignmentOperator0, o : any) : void;
        visitAssignmentOperator1(n : AssignmentOperator1, o : any) : void;
        visitAssignmentOperator2(n : AssignmentOperator2, o : any) : void;
        visitAssignmentOperator3(n : AssignmentOperator3, o : any) : void;
        visitAssignmentOperator4(n : AssignmentOperator4, o : any) : void;
        visitAssignmentOperator5(n : AssignmentOperator5, o : any) : void;
        visitAssignmentOperator6(n : AssignmentOperator6, o : any) : void;
        visitAssignmentOperator7(n : AssignmentOperator7, o : any) : void;
        visitAssignmentOperator8(n : AssignmentOperator8, o : any) : void;
        visitAssignmentOperator9(n : AssignmentOperator9, o : any) : void;
        visitAssignmentOperator10(n : AssignmentOperator10, o : any) : void;
        visitAssignmentOperator11(n : AssignmentOperator11, o : any) : void;

        visit(n : Ast, o : any) : void;
    }
    export interface ResultVisitor
    {
        visitAstToken(n : AstToken) : any;
        visitidentifier(n : identifier) : any;
        visitPrimitiveType(n : PrimitiveType) : any;
        visitClassType(n : ClassType) : any;
        visitInterfaceType(n : InterfaceType) : any;
        visitTypeName(n : TypeName) : any;
        visitArrayType(n : ArrayType) : any;
        visitTypeParameter(n : TypeParameter) : any;
        visitTypeBound(n : TypeBound) : any;
        visitAdditionalBoundList(n : AdditionalBoundList) : any;
        visitAdditionalBound(n : AdditionalBound) : any;
        visitTypeArguments(n : TypeArguments) : any;
        visitActualTypeArgumentList(n : ActualTypeArgumentList) : any;
        visitWildcard(n : Wildcard) : any;
        visitPackageName(n : PackageName) : any;
        visitExpressionName(n : ExpressionName) : any;
        visitMethodName(n : MethodName) : any;
        visitPackageOrTypeName(n : PackageOrTypeName) : any;
        visitAmbiguousName(n : AmbiguousName) : any;
        visitCompilationUnit(n : CompilationUnit) : any;
        visitImportDeclarations(n : ImportDeclarations) : any;
        visitTypeDeclarations(n : TypeDeclarations) : any;
        visitPackageDeclaration(n : PackageDeclaration) : any;
        visitSingleTypeImportDeclaration(n : SingleTypeImportDeclaration) : any;
        visitTypeImportOnDemandDeclaration(n : TypeImportOnDemandDeclaration) : any;
        visitSingleStaticImportDeclaration(n : SingleStaticImportDeclaration) : any;
        visitStaticImportOnDemandDeclaration(n : StaticImportOnDemandDeclaration) : any;
        visitTypeDeclaration(n : TypeDeclaration) : any;
        visitNormalClassDeclaration(n : NormalClassDeclaration) : any;
        visitClassModifiers(n : ClassModifiers) : any;
        visitTypeParameters(n : TypeParameters) : any;
        visitTypeParameterList(n : TypeParameterList) : any;
        visitSuper(n : Super) : any;
        visitInterfaces(n : Interfaces) : any;
        visitInterfaceTypeList(n : InterfaceTypeList) : any;
        visitClassBody(n : ClassBody) : any;
        visitClassBodyDeclarations(n : ClassBodyDeclarations) : any;
        visitClassMemberDeclaration(n : ClassMemberDeclaration) : any;
        visitFieldDeclaration(n : FieldDeclaration) : any;
        visitVariableDeclarators(n : VariableDeclarators) : any;
        visitVariableDeclarator(n : VariableDeclarator) : any;
        visitVariableDeclaratorId(n : VariableDeclaratorId) : any;
        visitFieldModifiers(n : FieldModifiers) : any;
        visitMethodDeclaration(n : MethodDeclaration) : any;
        visitMethodHeader(n : MethodHeader) : any;
        visitResultType(n : ResultType) : any;
        visitFormalParameterList(n : FormalParameterList) : any;
        visitFormalParameters(n : FormalParameters) : any;
        visitFormalParameter(n : FormalParameter) : any;
        visitVariableModifiers(n : VariableModifiers) : any;
        visitVariableModifier(n : VariableModifier) : any;
        visitLastFormalParameter(n : LastFormalParameter) : any;
        visitMethodModifiers(n : MethodModifiers) : any;
        visitThrows(n : Throws) : any;
        visitExceptionTypeList(n : ExceptionTypeList) : any;
        visitMethodBody(n : MethodBody) : any;
        visitStaticInitializer(n : StaticInitializer) : any;
        visitConstructorDeclaration(n : ConstructorDeclaration) : any;
        visitConstructorDeclarator(n : ConstructorDeclarator) : any;
        visitConstructorModifiers(n : ConstructorModifiers) : any;
        visitConstructorBody(n : ConstructorBody) : any;
        visitEnumDeclaration(n : EnumDeclaration) : any;
        visitEnumBody(n : EnumBody) : any;
        visitEnumConstants(n : EnumConstants) : any;
        visitEnumConstant(n : EnumConstant) : any;
        visitArguments(n : Arguments) : any;
        visitEnumBodyDeclarations(n : EnumBodyDeclarations) : any;
        visitNormalInterfaceDeclaration(n : NormalInterfaceDeclaration) : any;
        visitInterfaceModifiers(n : InterfaceModifiers) : any;
        visitInterfaceBody(n : InterfaceBody) : any;
        visitInterfaceMemberDeclarations(n : InterfaceMemberDeclarations) : any;
        visitInterfaceMemberDeclaration(n : InterfaceMemberDeclaration) : any;
        visitConstantDeclaration(n : ConstantDeclaration) : any;
        visitConstantModifiers(n : ConstantModifiers) : any;
        visitAbstractMethodDeclaration(n : AbstractMethodDeclaration) : any;
        visitAbstractMethodModifiers(n : AbstractMethodModifiers) : any;
        visitAnnotationTypeDeclaration(n : AnnotationTypeDeclaration) : any;
        visitAnnotationTypeBody(n : AnnotationTypeBody) : any;
        visitAnnotationTypeElementDeclarations(n : AnnotationTypeElementDeclarations) : any;
        visitDefaultValue(n : DefaultValue) : any;
        visitAnnotations(n : Annotations) : any;
        visitNormalAnnotation(n : NormalAnnotation) : any;
        visitElementValuePairs(n : ElementValuePairs) : any;
        visitElementValuePair(n : ElementValuePair) : any;
        visitElementValueArrayInitializer(n : ElementValueArrayInitializer) : any;
        visitElementValues(n : ElementValues) : any;
        visitMarkerAnnotation(n : MarkerAnnotation) : any;
        visitSingleElementAnnotation(n : SingleElementAnnotation) : any;
        visitArrayInitializer(n : ArrayInitializer) : any;
        visitVariableInitializers(n : VariableInitializers) : any;
        visitBlock(n : Block) : any;
        visitBlockStatements(n : BlockStatements) : any;
        visitLocalVariableDeclarationStatement(n : LocalVariableDeclarationStatement) : any;
        visitLocalVariableDeclaration(n : LocalVariableDeclaration) : any;
        visitIfThenStatement(n : IfThenStatement) : any;
        visitIfThenElseStatement(n : IfThenElseStatement) : any;
        visitIfThenElseStatementNoShortIf(n : IfThenElseStatementNoShortIf) : any;
        visitEmptyStatement(n : EmptyStatement) : any;
        visitLabeledStatement(n : LabeledStatement) : any;
        visitLabeledStatementNoShortIf(n : LabeledStatementNoShortIf) : any;
        visitExpressionStatement(n : ExpressionStatement) : any;
        visitSwitchStatement(n : SwitchStatement) : any;
        visitSwitchBlock(n : SwitchBlock) : any;
        visitSwitchBlockStatementGroups(n : SwitchBlockStatementGroups) : any;
        visitSwitchBlockStatementGroup(n : SwitchBlockStatementGroup) : any;
        visitSwitchLabels(n : SwitchLabels) : any;
        visitWhileStatement(n : WhileStatement) : any;
        visitWhileStatementNoShortIf(n : WhileStatementNoShortIf) : any;
        visitDoStatement(n : DoStatement) : any;
        visitBasicForStatement(n : BasicForStatement) : any;
        visitForStatementNoShortIf(n : ForStatementNoShortIf) : any;
        visitStatementExpressionList(n : StatementExpressionList) : any;
        visitEnhancedForStatement(n : EnhancedForStatement) : any;
        visitBreakStatement(n : BreakStatement) : any;
        visitContinueStatement(n : ContinueStatement) : any;
        visitReturnStatement(n : ReturnStatement) : any;
        visitThrowStatement(n : ThrowStatement) : any;
        visitSynchronizedStatement(n : SynchronizedStatement) : any;
        visitCatches(n : Catches) : any;
        visitCatchClause(n : CatchClause) : any;
        visitFinally(n : Finally) : any;
        visitArgumentList(n : ArgumentList) : any;
        visitDimExprs(n : DimExprs) : any;
        visitDimExpr(n : DimExpr) : any;
        visitPostIncrementExpression(n : PostIncrementExpression) : any;
        visitPostDecrementExpression(n : PostDecrementExpression) : any;
        visitPreIncrementExpression(n : PreIncrementExpression) : any;
        visitPreDecrementExpression(n : PreDecrementExpression) : any;
        visitAndExpression(n : AndExpression) : any;
        visitExclusiveOrExpression(n : ExclusiveOrExpression) : any;
        visitInclusiveOrExpression(n : InclusiveOrExpression) : any;
        visitConditionalAndExpression(n : ConditionalAndExpression) : any;
        visitConditionalOrExpression(n : ConditionalOrExpression) : any;
        visitConditionalExpression(n : ConditionalExpression) : any;
        visitAssignment(n : Assignment) : any;
        visitCommaopt(n : Commaopt) : any;
        visitEllipsisopt(n : Ellipsisopt) : any;
        visitLPGUserAction0(n : LPGUserAction0) : any;
        visitLPGUserAction1(n : LPGUserAction1) : any;
        visitLPGUserAction2(n : LPGUserAction2) : any;
        visitLPGUserAction3(n : LPGUserAction3) : any;
        visitLPGUserAction4(n : LPGUserAction4) : any;
        visitIntegralType0(n : IntegralType0) : any;
        visitIntegralType1(n : IntegralType1) : any;
        visitIntegralType2(n : IntegralType2) : any;
        visitIntegralType3(n : IntegralType3) : any;
        visitIntegralType4(n : IntegralType4) : any;
        visitFloatingPointType0(n : FloatingPointType0) : any;
        visitFloatingPointType1(n : FloatingPointType1) : any;
        visitWildcardBounds0(n : WildcardBounds0) : any;
        visitWildcardBounds1(n : WildcardBounds1) : any;
        visitClassModifier0(n : ClassModifier0) : any;
        visitClassModifier1(n : ClassModifier1) : any;
        visitClassModifier2(n : ClassModifier2) : any;
        visitClassModifier3(n : ClassModifier3) : any;
        visitClassModifier4(n : ClassModifier4) : any;
        visitClassModifier5(n : ClassModifier5) : any;
        visitClassModifier6(n : ClassModifier6) : any;
        visitFieldModifier0(n : FieldModifier0) : any;
        visitFieldModifier1(n : FieldModifier1) : any;
        visitFieldModifier2(n : FieldModifier2) : any;
        visitFieldModifier3(n : FieldModifier3) : any;
        visitFieldModifier4(n : FieldModifier4) : any;
        visitFieldModifier5(n : FieldModifier5) : any;
        visitFieldModifier6(n : FieldModifier6) : any;
        visitMethodDeclarator0(n : MethodDeclarator0) : any;
        visitMethodDeclarator1(n : MethodDeclarator1) : any;
        visitMethodModifier0(n : MethodModifier0) : any;
        visitMethodModifier1(n : MethodModifier1) : any;
        visitMethodModifier2(n : MethodModifier2) : any;
        visitMethodModifier3(n : MethodModifier3) : any;
        visitMethodModifier4(n : MethodModifier4) : any;
        visitMethodModifier5(n : MethodModifier5) : any;
        visitMethodModifier6(n : MethodModifier6) : any;
        visitMethodModifier7(n : MethodModifier7) : any;
        visitMethodModifier8(n : MethodModifier8) : any;
        visitConstructorModifier0(n : ConstructorModifier0) : any;
        visitConstructorModifier1(n : ConstructorModifier1) : any;
        visitConstructorModifier2(n : ConstructorModifier2) : any;
        visitExplicitConstructorInvocation0(n : ExplicitConstructorInvocation0) : any;
        visitExplicitConstructorInvocation1(n : ExplicitConstructorInvocation1) : any;
        visitExplicitConstructorInvocation2(n : ExplicitConstructorInvocation2) : any;
        visitInterfaceModifier0(n : InterfaceModifier0) : any;
        visitInterfaceModifier1(n : InterfaceModifier1) : any;
        visitInterfaceModifier2(n : InterfaceModifier2) : any;
        visitInterfaceModifier3(n : InterfaceModifier3) : any;
        visitInterfaceModifier4(n : InterfaceModifier4) : any;
        visitInterfaceModifier5(n : InterfaceModifier5) : any;
        visitExtendsInterfaces0(n : ExtendsInterfaces0) : any;
        visitExtendsInterfaces1(n : ExtendsInterfaces1) : any;
        visitConstantModifier0(n : ConstantModifier0) : any;
        visitConstantModifier1(n : ConstantModifier1) : any;
        visitConstantModifier2(n : ConstantModifier2) : any;
        visitAbstractMethodModifier0(n : AbstractMethodModifier0) : any;
        visitAbstractMethodModifier1(n : AbstractMethodModifier1) : any;
        visitAnnotationTypeElementDeclaration0(n : AnnotationTypeElementDeclaration0) : any;
        visitAnnotationTypeElementDeclaration1(n : AnnotationTypeElementDeclaration1) : any;
        visitAssertStatement0(n : AssertStatement0) : any;
        visitAssertStatement1(n : AssertStatement1) : any;
        visitSwitchLabel0(n : SwitchLabel0) : any;
        visitSwitchLabel1(n : SwitchLabel1) : any;
        visitSwitchLabel2(n : SwitchLabel2) : any;
        visitTryStatement0(n : TryStatement0) : any;
        visitTryStatement1(n : TryStatement1) : any;
        visitPrimaryNoNewArray0(n : PrimaryNoNewArray0) : any;
        visitPrimaryNoNewArray1(n : PrimaryNoNewArray1) : any;
        visitPrimaryNoNewArray2(n : PrimaryNoNewArray2) : any;
        visitPrimaryNoNewArray3(n : PrimaryNoNewArray3) : any;
        visitPrimaryNoNewArray4(n : PrimaryNoNewArray4) : any;
        visitLiteral0(n : Literal0) : any;
        visitLiteral1(n : Literal1) : any;
        visitLiteral2(n : Literal2) : any;
        visitLiteral3(n : Literal3) : any;
        visitLiteral4(n : Literal4) : any;
        visitLiteral5(n : Literal5) : any;
        visitLiteral6(n : Literal6) : any;
        visitBooleanLiteral0(n : BooleanLiteral0) : any;
        visitBooleanLiteral1(n : BooleanLiteral1) : any;
        visitClassInstanceCreationExpression0(n : ClassInstanceCreationExpression0) : any;
        visitClassInstanceCreationExpression1(n : ClassInstanceCreationExpression1) : any;
        visitArrayCreationExpression0(n : ArrayCreationExpression0) : any;
        visitArrayCreationExpression1(n : ArrayCreationExpression1) : any;
        visitArrayCreationExpression2(n : ArrayCreationExpression2) : any;
        visitArrayCreationExpression3(n : ArrayCreationExpression3) : any;
        visitDims0(n : Dims0) : any;
        visitDims1(n : Dims1) : any;
        visitFieldAccess0(n : FieldAccess0) : any;
        visitFieldAccess1(n : FieldAccess1) : any;
        visitFieldAccess2(n : FieldAccess2) : any;
        visitMethodInvocation0(n : MethodInvocation0) : any;
        visitMethodInvocation1(n : MethodInvocation1) : any;
        visitMethodInvocation2(n : MethodInvocation2) : any;
        visitMethodInvocation3(n : MethodInvocation3) : any;
        visitMethodInvocation4(n : MethodInvocation4) : any;
        visitArrayAccess0(n : ArrayAccess0) : any;
        visitArrayAccess1(n : ArrayAccess1) : any;
        visitUnaryExpression0(n : UnaryExpression0) : any;
        visitUnaryExpression1(n : UnaryExpression1) : any;
        visitUnaryExpressionNotPlusMinus0(n : UnaryExpressionNotPlusMinus0) : any;
        visitUnaryExpressionNotPlusMinus1(n : UnaryExpressionNotPlusMinus1) : any;
        visitCastExpression0(n : CastExpression0) : any;
        visitCastExpression1(n : CastExpression1) : any;
        visitMultiplicativeExpression0(n : MultiplicativeExpression0) : any;
        visitMultiplicativeExpression1(n : MultiplicativeExpression1) : any;
        visitMultiplicativeExpression2(n : MultiplicativeExpression2) : any;
        visitAdditiveExpression0(n : AdditiveExpression0) : any;
        visitAdditiveExpression1(n : AdditiveExpression1) : any;
        visitShiftExpression0(n : ShiftExpression0) : any;
        visitShiftExpression1(n : ShiftExpression1) : any;
        visitShiftExpression2(n : ShiftExpression2) : any;
        visitRelationalExpression0(n : RelationalExpression0) : any;
        visitRelationalExpression1(n : RelationalExpression1) : any;
        visitRelationalExpression2(n : RelationalExpression2) : any;
        visitRelationalExpression3(n : RelationalExpression3) : any;
        visitRelationalExpression4(n : RelationalExpression4) : any;
        visitEqualityExpression0(n : EqualityExpression0) : any;
        visitEqualityExpression1(n : EqualityExpression1) : any;
        visitAssignmentOperator0(n : AssignmentOperator0) : any;
        visitAssignmentOperator1(n : AssignmentOperator1) : any;
        visitAssignmentOperator2(n : AssignmentOperator2) : any;
        visitAssignmentOperator3(n : AssignmentOperator3) : any;
        visitAssignmentOperator4(n : AssignmentOperator4) : any;
        visitAssignmentOperator5(n : AssignmentOperator5) : any;
        visitAssignmentOperator6(n : AssignmentOperator6) : any;
        visitAssignmentOperator7(n : AssignmentOperator7) : any;
        visitAssignmentOperator8(n : AssignmentOperator8) : any;
        visitAssignmentOperator9(n : AssignmentOperator9) : any;
        visitAssignmentOperator10(n : AssignmentOperator10) : any;
        visitAssignmentOperator11(n : AssignmentOperator11) : any;

        visit(n : Ast) : any;
    }
    export interface ResultArgumentVisitor
    {
        visitAstToken(n : AstToken, o : any) : any;
        visitidentifier(n : identifier, o : any) : any;
        visitPrimitiveType(n : PrimitiveType, o : any) : any;
        visitClassType(n : ClassType, o : any) : any;
        visitInterfaceType(n : InterfaceType, o : any) : any;
        visitTypeName(n : TypeName, o : any) : any;
        visitArrayType(n : ArrayType, o : any) : any;
        visitTypeParameter(n : TypeParameter, o : any) : any;
        visitTypeBound(n : TypeBound, o : any) : any;
        visitAdditionalBoundList(n : AdditionalBoundList, o : any) : any;
        visitAdditionalBound(n : AdditionalBound, o : any) : any;
        visitTypeArguments(n : TypeArguments, o : any) : any;
        visitActualTypeArgumentList(n : ActualTypeArgumentList, o : any) : any;
        visitWildcard(n : Wildcard, o : any) : any;
        visitPackageName(n : PackageName, o : any) : any;
        visitExpressionName(n : ExpressionName, o : any) : any;
        visitMethodName(n : MethodName, o : any) : any;
        visitPackageOrTypeName(n : PackageOrTypeName, o : any) : any;
        visitAmbiguousName(n : AmbiguousName, o : any) : any;
        visitCompilationUnit(n : CompilationUnit, o : any) : any;
        visitImportDeclarations(n : ImportDeclarations, o : any) : any;
        visitTypeDeclarations(n : TypeDeclarations, o : any) : any;
        visitPackageDeclaration(n : PackageDeclaration, o : any) : any;
        visitSingleTypeImportDeclaration(n : SingleTypeImportDeclaration, o : any) : any;
        visitTypeImportOnDemandDeclaration(n : TypeImportOnDemandDeclaration, o : any) : any;
        visitSingleStaticImportDeclaration(n : SingleStaticImportDeclaration, o : any) : any;
        visitStaticImportOnDemandDeclaration(n : StaticImportOnDemandDeclaration, o : any) : any;
        visitTypeDeclaration(n : TypeDeclaration, o : any) : any;
        visitNormalClassDeclaration(n : NormalClassDeclaration, o : any) : any;
        visitClassModifiers(n : ClassModifiers, o : any) : any;
        visitTypeParameters(n : TypeParameters, o : any) : any;
        visitTypeParameterList(n : TypeParameterList, o : any) : any;
        visitSuper(n : Super, o : any) : any;
        visitInterfaces(n : Interfaces, o : any) : any;
        visitInterfaceTypeList(n : InterfaceTypeList, o : any) : any;
        visitClassBody(n : ClassBody, o : any) : any;
        visitClassBodyDeclarations(n : ClassBodyDeclarations, o : any) : any;
        visitClassMemberDeclaration(n : ClassMemberDeclaration, o : any) : any;
        visitFieldDeclaration(n : FieldDeclaration, o : any) : any;
        visitVariableDeclarators(n : VariableDeclarators, o : any) : any;
        visitVariableDeclarator(n : VariableDeclarator, o : any) : any;
        visitVariableDeclaratorId(n : VariableDeclaratorId, o : any) : any;
        visitFieldModifiers(n : FieldModifiers, o : any) : any;
        visitMethodDeclaration(n : MethodDeclaration, o : any) : any;
        visitMethodHeader(n : MethodHeader, o : any) : any;
        visitResultType(n : ResultType, o : any) : any;
        visitFormalParameterList(n : FormalParameterList, o : any) : any;
        visitFormalParameters(n : FormalParameters, o : any) : any;
        visitFormalParameter(n : FormalParameter, o : any) : any;
        visitVariableModifiers(n : VariableModifiers, o : any) : any;
        visitVariableModifier(n : VariableModifier, o : any) : any;
        visitLastFormalParameter(n : LastFormalParameter, o : any) : any;
        visitMethodModifiers(n : MethodModifiers, o : any) : any;
        visitThrows(n : Throws, o : any) : any;
        visitExceptionTypeList(n : ExceptionTypeList, o : any) : any;
        visitMethodBody(n : MethodBody, o : any) : any;
        visitStaticInitializer(n : StaticInitializer, o : any) : any;
        visitConstructorDeclaration(n : ConstructorDeclaration, o : any) : any;
        visitConstructorDeclarator(n : ConstructorDeclarator, o : any) : any;
        visitConstructorModifiers(n : ConstructorModifiers, o : any) : any;
        visitConstructorBody(n : ConstructorBody, o : any) : any;
        visitEnumDeclaration(n : EnumDeclaration, o : any) : any;
        visitEnumBody(n : EnumBody, o : any) : any;
        visitEnumConstants(n : EnumConstants, o : any) : any;
        visitEnumConstant(n : EnumConstant, o : any) : any;
        visitArguments(n : Arguments, o : any) : any;
        visitEnumBodyDeclarations(n : EnumBodyDeclarations, o : any) : any;
        visitNormalInterfaceDeclaration(n : NormalInterfaceDeclaration, o : any) : any;
        visitInterfaceModifiers(n : InterfaceModifiers, o : any) : any;
        visitInterfaceBody(n : InterfaceBody, o : any) : any;
        visitInterfaceMemberDeclarations(n : InterfaceMemberDeclarations, o : any) : any;
        visitInterfaceMemberDeclaration(n : InterfaceMemberDeclaration, o : any) : any;
        visitConstantDeclaration(n : ConstantDeclaration, o : any) : any;
        visitConstantModifiers(n : ConstantModifiers, o : any) : any;
        visitAbstractMethodDeclaration(n : AbstractMethodDeclaration, o : any) : any;
        visitAbstractMethodModifiers(n : AbstractMethodModifiers, o : any) : any;
        visitAnnotationTypeDeclaration(n : AnnotationTypeDeclaration, o : any) : any;
        visitAnnotationTypeBody(n : AnnotationTypeBody, o : any) : any;
        visitAnnotationTypeElementDeclarations(n : AnnotationTypeElementDeclarations, o : any) : any;
        visitDefaultValue(n : DefaultValue, o : any) : any;
        visitAnnotations(n : Annotations, o : any) : any;
        visitNormalAnnotation(n : NormalAnnotation, o : any) : any;
        visitElementValuePairs(n : ElementValuePairs, o : any) : any;
        visitElementValuePair(n : ElementValuePair, o : any) : any;
        visitElementValueArrayInitializer(n : ElementValueArrayInitializer, o : any) : any;
        visitElementValues(n : ElementValues, o : any) : any;
        visitMarkerAnnotation(n : MarkerAnnotation, o : any) : any;
        visitSingleElementAnnotation(n : SingleElementAnnotation, o : any) : any;
        visitArrayInitializer(n : ArrayInitializer, o : any) : any;
        visitVariableInitializers(n : VariableInitializers, o : any) : any;
        visitBlock(n : Block, o : any) : any;
        visitBlockStatements(n : BlockStatements, o : any) : any;
        visitLocalVariableDeclarationStatement(n : LocalVariableDeclarationStatement, o : any) : any;
        visitLocalVariableDeclaration(n : LocalVariableDeclaration, o : any) : any;
        visitIfThenStatement(n : IfThenStatement, o : any) : any;
        visitIfThenElseStatement(n : IfThenElseStatement, o : any) : any;
        visitIfThenElseStatementNoShortIf(n : IfThenElseStatementNoShortIf, o : any) : any;
        visitEmptyStatement(n : EmptyStatement, o : any) : any;
        visitLabeledStatement(n : LabeledStatement, o : any) : any;
        visitLabeledStatementNoShortIf(n : LabeledStatementNoShortIf, o : any) : any;
        visitExpressionStatement(n : ExpressionStatement, o : any) : any;
        visitSwitchStatement(n : SwitchStatement, o : any) : any;
        visitSwitchBlock(n : SwitchBlock, o : any) : any;
        visitSwitchBlockStatementGroups(n : SwitchBlockStatementGroups, o : any) : any;
        visitSwitchBlockStatementGroup(n : SwitchBlockStatementGroup, o : any) : any;
        visitSwitchLabels(n : SwitchLabels, o : any) : any;
        visitWhileStatement(n : WhileStatement, o : any) : any;
        visitWhileStatementNoShortIf(n : WhileStatementNoShortIf, o : any) : any;
        visitDoStatement(n : DoStatement, o : any) : any;
        visitBasicForStatement(n : BasicForStatement, o : any) : any;
        visitForStatementNoShortIf(n : ForStatementNoShortIf, o : any) : any;
        visitStatementExpressionList(n : StatementExpressionList, o : any) : any;
        visitEnhancedForStatement(n : EnhancedForStatement, o : any) : any;
        visitBreakStatement(n : BreakStatement, o : any) : any;
        visitContinueStatement(n : ContinueStatement, o : any) : any;
        visitReturnStatement(n : ReturnStatement, o : any) : any;
        visitThrowStatement(n : ThrowStatement, o : any) : any;
        visitSynchronizedStatement(n : SynchronizedStatement, o : any) : any;
        visitCatches(n : Catches, o : any) : any;
        visitCatchClause(n : CatchClause, o : any) : any;
        visitFinally(n : Finally, o : any) : any;
        visitArgumentList(n : ArgumentList, o : any) : any;
        visitDimExprs(n : DimExprs, o : any) : any;
        visitDimExpr(n : DimExpr, o : any) : any;
        visitPostIncrementExpression(n : PostIncrementExpression, o : any) : any;
        visitPostDecrementExpression(n : PostDecrementExpression, o : any) : any;
        visitPreIncrementExpression(n : PreIncrementExpression, o : any) : any;
        visitPreDecrementExpression(n : PreDecrementExpression, o : any) : any;
        visitAndExpression(n : AndExpression, o : any) : any;
        visitExclusiveOrExpression(n : ExclusiveOrExpression, o : any) : any;
        visitInclusiveOrExpression(n : InclusiveOrExpression, o : any) : any;
        visitConditionalAndExpression(n : ConditionalAndExpression, o : any) : any;
        visitConditionalOrExpression(n : ConditionalOrExpression, o : any) : any;
        visitConditionalExpression(n : ConditionalExpression, o : any) : any;
        visitAssignment(n : Assignment, o : any) : any;
        visitCommaopt(n : Commaopt, o : any) : any;
        visitEllipsisopt(n : Ellipsisopt, o : any) : any;
        visitLPGUserAction0(n : LPGUserAction0, o : any) : any;
        visitLPGUserAction1(n : LPGUserAction1, o : any) : any;
        visitLPGUserAction2(n : LPGUserAction2, o : any) : any;
        visitLPGUserAction3(n : LPGUserAction3, o : any) : any;
        visitLPGUserAction4(n : LPGUserAction4, o : any) : any;
        visitIntegralType0(n : IntegralType0, o : any) : any;
        visitIntegralType1(n : IntegralType1, o : any) : any;
        visitIntegralType2(n : IntegralType2, o : any) : any;
        visitIntegralType3(n : IntegralType3, o : any) : any;
        visitIntegralType4(n : IntegralType4, o : any) : any;
        visitFloatingPointType0(n : FloatingPointType0, o : any) : any;
        visitFloatingPointType1(n : FloatingPointType1, o : any) : any;
        visitWildcardBounds0(n : WildcardBounds0, o : any) : any;
        visitWildcardBounds1(n : WildcardBounds1, o : any) : any;
        visitClassModifier0(n : ClassModifier0, o : any) : any;
        visitClassModifier1(n : ClassModifier1, o : any) : any;
        visitClassModifier2(n : ClassModifier2, o : any) : any;
        visitClassModifier3(n : ClassModifier3, o : any) : any;
        visitClassModifier4(n : ClassModifier4, o : any) : any;
        visitClassModifier5(n : ClassModifier5, o : any) : any;
        visitClassModifier6(n : ClassModifier6, o : any) : any;
        visitFieldModifier0(n : FieldModifier0, o : any) : any;
        visitFieldModifier1(n : FieldModifier1, o : any) : any;
        visitFieldModifier2(n : FieldModifier2, o : any) : any;
        visitFieldModifier3(n : FieldModifier3, o : any) : any;
        visitFieldModifier4(n : FieldModifier4, o : any) : any;
        visitFieldModifier5(n : FieldModifier5, o : any) : any;
        visitFieldModifier6(n : FieldModifier6, o : any) : any;
        visitMethodDeclarator0(n : MethodDeclarator0, o : any) : any;
        visitMethodDeclarator1(n : MethodDeclarator1, o : any) : any;
        visitMethodModifier0(n : MethodModifier0, o : any) : any;
        visitMethodModifier1(n : MethodModifier1, o : any) : any;
        visitMethodModifier2(n : MethodModifier2, o : any) : any;
        visitMethodModifier3(n : MethodModifier3, o : any) : any;
        visitMethodModifier4(n : MethodModifier4, o : any) : any;
        visitMethodModifier5(n : MethodModifier5, o : any) : any;
        visitMethodModifier6(n : MethodModifier6, o : any) : any;
        visitMethodModifier7(n : MethodModifier7, o : any) : any;
        visitMethodModifier8(n : MethodModifier8, o : any) : any;
        visitConstructorModifier0(n : ConstructorModifier0, o : any) : any;
        visitConstructorModifier1(n : ConstructorModifier1, o : any) : any;
        visitConstructorModifier2(n : ConstructorModifier2, o : any) : any;
        visitExplicitConstructorInvocation0(n : ExplicitConstructorInvocation0, o : any) : any;
        visitExplicitConstructorInvocation1(n : ExplicitConstructorInvocation1, o : any) : any;
        visitExplicitConstructorInvocation2(n : ExplicitConstructorInvocation2, o : any) : any;
        visitInterfaceModifier0(n : InterfaceModifier0, o : any) : any;
        visitInterfaceModifier1(n : InterfaceModifier1, o : any) : any;
        visitInterfaceModifier2(n : InterfaceModifier2, o : any) : any;
        visitInterfaceModifier3(n : InterfaceModifier3, o : any) : any;
        visitInterfaceModifier4(n : InterfaceModifier4, o : any) : any;
        visitInterfaceModifier5(n : InterfaceModifier5, o : any) : any;
        visitExtendsInterfaces0(n : ExtendsInterfaces0, o : any) : any;
        visitExtendsInterfaces1(n : ExtendsInterfaces1, o : any) : any;
        visitConstantModifier0(n : ConstantModifier0, o : any) : any;
        visitConstantModifier1(n : ConstantModifier1, o : any) : any;
        visitConstantModifier2(n : ConstantModifier2, o : any) : any;
        visitAbstractMethodModifier0(n : AbstractMethodModifier0, o : any) : any;
        visitAbstractMethodModifier1(n : AbstractMethodModifier1, o : any) : any;
        visitAnnotationTypeElementDeclaration0(n : AnnotationTypeElementDeclaration0, o : any) : any;
        visitAnnotationTypeElementDeclaration1(n : AnnotationTypeElementDeclaration1, o : any) : any;
        visitAssertStatement0(n : AssertStatement0, o : any) : any;
        visitAssertStatement1(n : AssertStatement1, o : any) : any;
        visitSwitchLabel0(n : SwitchLabel0, o : any) : any;
        visitSwitchLabel1(n : SwitchLabel1, o : any) : any;
        visitSwitchLabel2(n : SwitchLabel2, o : any) : any;
        visitTryStatement0(n : TryStatement0, o : any) : any;
        visitTryStatement1(n : TryStatement1, o : any) : any;
        visitPrimaryNoNewArray0(n : PrimaryNoNewArray0, o : any) : any;
        visitPrimaryNoNewArray1(n : PrimaryNoNewArray1, o : any) : any;
        visitPrimaryNoNewArray2(n : PrimaryNoNewArray2, o : any) : any;
        visitPrimaryNoNewArray3(n : PrimaryNoNewArray3, o : any) : any;
        visitPrimaryNoNewArray4(n : PrimaryNoNewArray4, o : any) : any;
        visitLiteral0(n : Literal0, o : any) : any;
        visitLiteral1(n : Literal1, o : any) : any;
        visitLiteral2(n : Literal2, o : any) : any;
        visitLiteral3(n : Literal3, o : any) : any;
        visitLiteral4(n : Literal4, o : any) : any;
        visitLiteral5(n : Literal5, o : any) : any;
        visitLiteral6(n : Literal6, o : any) : any;
        visitBooleanLiteral0(n : BooleanLiteral0, o : any) : any;
        visitBooleanLiteral1(n : BooleanLiteral1, o : any) : any;
        visitClassInstanceCreationExpression0(n : ClassInstanceCreationExpression0, o : any) : any;
        visitClassInstanceCreationExpression1(n : ClassInstanceCreationExpression1, o : any) : any;
        visitArrayCreationExpression0(n : ArrayCreationExpression0, o : any) : any;
        visitArrayCreationExpression1(n : ArrayCreationExpression1, o : any) : any;
        visitArrayCreationExpression2(n : ArrayCreationExpression2, o : any) : any;
        visitArrayCreationExpression3(n : ArrayCreationExpression3, o : any) : any;
        visitDims0(n : Dims0, o : any) : any;
        visitDims1(n : Dims1, o : any) : any;
        visitFieldAccess0(n : FieldAccess0, o : any) : any;
        visitFieldAccess1(n : FieldAccess1, o : any) : any;
        visitFieldAccess2(n : FieldAccess2, o : any) : any;
        visitMethodInvocation0(n : MethodInvocation0, o : any) : any;
        visitMethodInvocation1(n : MethodInvocation1, o : any) : any;
        visitMethodInvocation2(n : MethodInvocation2, o : any) : any;
        visitMethodInvocation3(n : MethodInvocation3, o : any) : any;
        visitMethodInvocation4(n : MethodInvocation4, o : any) : any;
        visitArrayAccess0(n : ArrayAccess0, o : any) : any;
        visitArrayAccess1(n : ArrayAccess1, o : any) : any;
        visitUnaryExpression0(n : UnaryExpression0, o : any) : any;
        visitUnaryExpression1(n : UnaryExpression1, o : any) : any;
        visitUnaryExpressionNotPlusMinus0(n : UnaryExpressionNotPlusMinus0, o : any) : any;
        visitUnaryExpressionNotPlusMinus1(n : UnaryExpressionNotPlusMinus1, o : any) : any;
        visitCastExpression0(n : CastExpression0, o : any) : any;
        visitCastExpression1(n : CastExpression1, o : any) : any;
        visitMultiplicativeExpression0(n : MultiplicativeExpression0, o : any) : any;
        visitMultiplicativeExpression1(n : MultiplicativeExpression1, o : any) : any;
        visitMultiplicativeExpression2(n : MultiplicativeExpression2, o : any) : any;
        visitAdditiveExpression0(n : AdditiveExpression0, o : any) : any;
        visitAdditiveExpression1(n : AdditiveExpression1, o : any) : any;
        visitShiftExpression0(n : ShiftExpression0, o : any) : any;
        visitShiftExpression1(n : ShiftExpression1, o : any) : any;
        visitShiftExpression2(n : ShiftExpression2, o : any) : any;
        visitRelationalExpression0(n : RelationalExpression0, o : any) : any;
        visitRelationalExpression1(n : RelationalExpression1, o : any) : any;
        visitRelationalExpression2(n : RelationalExpression2, o : any) : any;
        visitRelationalExpression3(n : RelationalExpression3, o : any) : any;
        visitRelationalExpression4(n : RelationalExpression4, o : any) : any;
        visitEqualityExpression0(n : EqualityExpression0, o : any) : any;
        visitEqualityExpression1(n : EqualityExpression1, o : any) : any;
        visitAssignmentOperator0(n : AssignmentOperator0, o : any) : any;
        visitAssignmentOperator1(n : AssignmentOperator1, o : any) : any;
        visitAssignmentOperator2(n : AssignmentOperator2, o : any) : any;
        visitAssignmentOperator3(n : AssignmentOperator3, o : any) : any;
        visitAssignmentOperator4(n : AssignmentOperator4, o : any) : any;
        visitAssignmentOperator5(n : AssignmentOperator5, o : any) : any;
        visitAssignmentOperator6(n : AssignmentOperator6, o : any) : any;
        visitAssignmentOperator7(n : AssignmentOperator7, o : any) : any;
        visitAssignmentOperator8(n : AssignmentOperator8, o : any) : any;
        visitAssignmentOperator9(n : AssignmentOperator9, o : any) : any;
        visitAssignmentOperator10(n : AssignmentOperator10, o : any) : any;
        visitAssignmentOperator11(n : AssignmentOperator11, o : any) : any;

        visit(n : Ast, o : any) : any;
    }
    export abstract class AbstractVisitor implements Visitor, ArgumentVisitor
    {
        public abstract  unimplementedVisitor(s : string) : void;

        public  visitAstToken(n : AstToken, o? : any) : void { this.unimplementedVisitor("visitAstToken(AstToken, any)"); }

        public  visitidentifier(n : identifier, o? : any) : void { this.unimplementedVisitor("visitidentifier(identifier, any)"); }

        public  visitPrimitiveType(n : PrimitiveType, o? : any) : void { this.unimplementedVisitor("visitPrimitiveType(PrimitiveType, any)"); }

        public  visitClassType(n : ClassType, o? : any) : void { this.unimplementedVisitor("visitClassType(ClassType, any)"); }

        public  visitInterfaceType(n : InterfaceType, o? : any) : void { this.unimplementedVisitor("visitInterfaceType(InterfaceType, any)"); }

        public  visitTypeName(n : TypeName, o? : any) : void { this.unimplementedVisitor("visitTypeName(TypeName, any)"); }

        public  visitArrayType(n : ArrayType, o? : any) : void { this.unimplementedVisitor("visitArrayType(ArrayType, any)"); }

        public  visitTypeParameter(n : TypeParameter, o? : any) : void { this.unimplementedVisitor("visitTypeParameter(TypeParameter, any)"); }

        public  visitTypeBound(n : TypeBound, o? : any) : void { this.unimplementedVisitor("visitTypeBound(TypeBound, any)"); }

        public  visitAdditionalBoundList(n : AdditionalBoundList, o? : any) : void { this.unimplementedVisitor("visitAdditionalBoundList(AdditionalBoundList, any)"); }

        public  visitAdditionalBound(n : AdditionalBound, o? : any) : void { this.unimplementedVisitor("visitAdditionalBound(AdditionalBound, any)"); }

        public  visitTypeArguments(n : TypeArguments, o? : any) : void { this.unimplementedVisitor("visitTypeArguments(TypeArguments, any)"); }

        public  visitActualTypeArgumentList(n : ActualTypeArgumentList, o? : any) : void { this.unimplementedVisitor("visitActualTypeArgumentList(ActualTypeArgumentList, any)"); }

        public  visitWildcard(n : Wildcard, o? : any) : void { this.unimplementedVisitor("visitWildcard(Wildcard, any)"); }

        public  visitPackageName(n : PackageName, o? : any) : void { this.unimplementedVisitor("visitPackageName(PackageName, any)"); }

        public  visitExpressionName(n : ExpressionName, o? : any) : void { this.unimplementedVisitor("visitExpressionName(ExpressionName, any)"); }

        public  visitMethodName(n : MethodName, o? : any) : void { this.unimplementedVisitor("visitMethodName(MethodName, any)"); }

        public  visitPackageOrTypeName(n : PackageOrTypeName, o? : any) : void { this.unimplementedVisitor("visitPackageOrTypeName(PackageOrTypeName, any)"); }

        public  visitAmbiguousName(n : AmbiguousName, o? : any) : void { this.unimplementedVisitor("visitAmbiguousName(AmbiguousName, any)"); }

        public  visitCompilationUnit(n : CompilationUnit, o? : any) : void { this.unimplementedVisitor("visitCompilationUnit(CompilationUnit, any)"); }

        public  visitImportDeclarations(n : ImportDeclarations, o? : any) : void { this.unimplementedVisitor("visitImportDeclarations(ImportDeclarations, any)"); }

        public  visitTypeDeclarations(n : TypeDeclarations, o? : any) : void { this.unimplementedVisitor("visitTypeDeclarations(TypeDeclarations, any)"); }

        public  visitPackageDeclaration(n : PackageDeclaration, o? : any) : void { this.unimplementedVisitor("visitPackageDeclaration(PackageDeclaration, any)"); }

        public  visitSingleTypeImportDeclaration(n : SingleTypeImportDeclaration, o? : any) : void { this.unimplementedVisitor("visitSingleTypeImportDeclaration(SingleTypeImportDeclaration, any)"); }

        public  visitTypeImportOnDemandDeclaration(n : TypeImportOnDemandDeclaration, o? : any) : void { this.unimplementedVisitor("visitTypeImportOnDemandDeclaration(TypeImportOnDemandDeclaration, any)"); }

        public  visitSingleStaticImportDeclaration(n : SingleStaticImportDeclaration, o? : any) : void { this.unimplementedVisitor("visitSingleStaticImportDeclaration(SingleStaticImportDeclaration, any)"); }

        public  visitStaticImportOnDemandDeclaration(n : StaticImportOnDemandDeclaration, o? : any) : void { this.unimplementedVisitor("visitStaticImportOnDemandDeclaration(StaticImportOnDemandDeclaration, any)"); }

        public  visitTypeDeclaration(n : TypeDeclaration, o? : any) : void { this.unimplementedVisitor("visitTypeDeclaration(TypeDeclaration, any)"); }

        public  visitNormalClassDeclaration(n : NormalClassDeclaration, o? : any) : void { this.unimplementedVisitor("visitNormalClassDeclaration(NormalClassDeclaration, any)"); }

        public  visitClassModifiers(n : ClassModifiers, o? : any) : void { this.unimplementedVisitor("visitClassModifiers(ClassModifiers, any)"); }

        public  visitTypeParameters(n : TypeParameters, o? : any) : void { this.unimplementedVisitor("visitTypeParameters(TypeParameters, any)"); }

        public  visitTypeParameterList(n : TypeParameterList, o? : any) : void { this.unimplementedVisitor("visitTypeParameterList(TypeParameterList, any)"); }

        public  visitSuper(n : Super, o? : any) : void { this.unimplementedVisitor("visitSuper(Super, any)"); }

        public  visitInterfaces(n : Interfaces, o? : any) : void { this.unimplementedVisitor("visitInterfaces(Interfaces, any)"); }

        public  visitInterfaceTypeList(n : InterfaceTypeList, o? : any) : void { this.unimplementedVisitor("visitInterfaceTypeList(InterfaceTypeList, any)"); }

        public  visitClassBody(n : ClassBody, o? : any) : void { this.unimplementedVisitor("visitClassBody(ClassBody, any)"); }

        public  visitClassBodyDeclarations(n : ClassBodyDeclarations, o? : any) : void { this.unimplementedVisitor("visitClassBodyDeclarations(ClassBodyDeclarations, any)"); }

        public  visitClassMemberDeclaration(n : ClassMemberDeclaration, o? : any) : void { this.unimplementedVisitor("visitClassMemberDeclaration(ClassMemberDeclaration, any)"); }

        public  visitFieldDeclaration(n : FieldDeclaration, o? : any) : void { this.unimplementedVisitor("visitFieldDeclaration(FieldDeclaration, any)"); }

        public  visitVariableDeclarators(n : VariableDeclarators, o? : any) : void { this.unimplementedVisitor("visitVariableDeclarators(VariableDeclarators, any)"); }

        public  visitVariableDeclarator(n : VariableDeclarator, o? : any) : void { this.unimplementedVisitor("visitVariableDeclarator(VariableDeclarator, any)"); }

        public  visitVariableDeclaratorId(n : VariableDeclaratorId, o? : any) : void { this.unimplementedVisitor("visitVariableDeclaratorId(VariableDeclaratorId, any)"); }

        public  visitFieldModifiers(n : FieldModifiers, o? : any) : void { this.unimplementedVisitor("visitFieldModifiers(FieldModifiers, any)"); }

        public  visitMethodDeclaration(n : MethodDeclaration, o? : any) : void { this.unimplementedVisitor("visitMethodDeclaration(MethodDeclaration, any)"); }

        public  visitMethodHeader(n : MethodHeader, o? : any) : void { this.unimplementedVisitor("visitMethodHeader(MethodHeader, any)"); }

        public  visitResultType(n : ResultType, o? : any) : void { this.unimplementedVisitor("visitResultType(ResultType, any)"); }

        public  visitFormalParameterList(n : FormalParameterList, o? : any) : void { this.unimplementedVisitor("visitFormalParameterList(FormalParameterList, any)"); }

        public  visitFormalParameters(n : FormalParameters, o? : any) : void { this.unimplementedVisitor("visitFormalParameters(FormalParameters, any)"); }

        public  visitFormalParameter(n : FormalParameter, o? : any) : void { this.unimplementedVisitor("visitFormalParameter(FormalParameter, any)"); }

        public  visitVariableModifiers(n : VariableModifiers, o? : any) : void { this.unimplementedVisitor("visitVariableModifiers(VariableModifiers, any)"); }

        public  visitVariableModifier(n : VariableModifier, o? : any) : void { this.unimplementedVisitor("visitVariableModifier(VariableModifier, any)"); }

        public  visitLastFormalParameter(n : LastFormalParameter, o? : any) : void { this.unimplementedVisitor("visitLastFormalParameter(LastFormalParameter, any)"); }

        public  visitMethodModifiers(n : MethodModifiers, o? : any) : void { this.unimplementedVisitor("visitMethodModifiers(MethodModifiers, any)"); }

        public  visitThrows(n : Throws, o? : any) : void { this.unimplementedVisitor("visitThrows(Throws, any)"); }

        public  visitExceptionTypeList(n : ExceptionTypeList, o? : any) : void { this.unimplementedVisitor("visitExceptionTypeList(ExceptionTypeList, any)"); }

        public  visitMethodBody(n : MethodBody, o? : any) : void { this.unimplementedVisitor("visitMethodBody(MethodBody, any)"); }

        public  visitStaticInitializer(n : StaticInitializer, o? : any) : void { this.unimplementedVisitor("visitStaticInitializer(StaticInitializer, any)"); }

        public  visitConstructorDeclaration(n : ConstructorDeclaration, o? : any) : void { this.unimplementedVisitor("visitConstructorDeclaration(ConstructorDeclaration, any)"); }

        public  visitConstructorDeclarator(n : ConstructorDeclarator, o? : any) : void { this.unimplementedVisitor("visitConstructorDeclarator(ConstructorDeclarator, any)"); }

        public  visitConstructorModifiers(n : ConstructorModifiers, o? : any) : void { this.unimplementedVisitor("visitConstructorModifiers(ConstructorModifiers, any)"); }

        public  visitConstructorBody(n : ConstructorBody, o? : any) : void { this.unimplementedVisitor("visitConstructorBody(ConstructorBody, any)"); }

        public  visitEnumDeclaration(n : EnumDeclaration, o? : any) : void { this.unimplementedVisitor("visitEnumDeclaration(EnumDeclaration, any)"); }

        public  visitEnumBody(n : EnumBody, o? : any) : void { this.unimplementedVisitor("visitEnumBody(EnumBody, any)"); }

        public  visitEnumConstants(n : EnumConstants, o? : any) : void { this.unimplementedVisitor("visitEnumConstants(EnumConstants, any)"); }

        public  visitEnumConstant(n : EnumConstant, o? : any) : void { this.unimplementedVisitor("visitEnumConstant(EnumConstant, any)"); }

        public  visitArguments(n : Arguments, o? : any) : void { this.unimplementedVisitor("visitArguments(Arguments, any)"); }

        public  visitEnumBodyDeclarations(n : EnumBodyDeclarations, o? : any) : void { this.unimplementedVisitor("visitEnumBodyDeclarations(EnumBodyDeclarations, any)"); }

        public  visitNormalInterfaceDeclaration(n : NormalInterfaceDeclaration, o? : any) : void { this.unimplementedVisitor("visitNormalInterfaceDeclaration(NormalInterfaceDeclaration, any)"); }

        public  visitInterfaceModifiers(n : InterfaceModifiers, o? : any) : void { this.unimplementedVisitor("visitInterfaceModifiers(InterfaceModifiers, any)"); }

        public  visitInterfaceBody(n : InterfaceBody, o? : any) : void { this.unimplementedVisitor("visitInterfaceBody(InterfaceBody, any)"); }

        public  visitInterfaceMemberDeclarations(n : InterfaceMemberDeclarations, o? : any) : void { this.unimplementedVisitor("visitInterfaceMemberDeclarations(InterfaceMemberDeclarations, any)"); }

        public  visitInterfaceMemberDeclaration(n : InterfaceMemberDeclaration, o? : any) : void { this.unimplementedVisitor("visitInterfaceMemberDeclaration(InterfaceMemberDeclaration, any)"); }

        public  visitConstantDeclaration(n : ConstantDeclaration, o? : any) : void { this.unimplementedVisitor("visitConstantDeclaration(ConstantDeclaration, any)"); }

        public  visitConstantModifiers(n : ConstantModifiers, o? : any) : void { this.unimplementedVisitor("visitConstantModifiers(ConstantModifiers, any)"); }

        public  visitAbstractMethodDeclaration(n : AbstractMethodDeclaration, o? : any) : void { this.unimplementedVisitor("visitAbstractMethodDeclaration(AbstractMethodDeclaration, any)"); }

        public  visitAbstractMethodModifiers(n : AbstractMethodModifiers, o? : any) : void { this.unimplementedVisitor("visitAbstractMethodModifiers(AbstractMethodModifiers, any)"); }

        public  visitAnnotationTypeDeclaration(n : AnnotationTypeDeclaration, o? : any) : void { this.unimplementedVisitor("visitAnnotationTypeDeclaration(AnnotationTypeDeclaration, any)"); }

        public  visitAnnotationTypeBody(n : AnnotationTypeBody, o? : any) : void { this.unimplementedVisitor("visitAnnotationTypeBody(AnnotationTypeBody, any)"); }

        public  visitAnnotationTypeElementDeclarations(n : AnnotationTypeElementDeclarations, o? : any) : void { this.unimplementedVisitor("visitAnnotationTypeElementDeclarations(AnnotationTypeElementDeclarations, any)"); }

        public  visitDefaultValue(n : DefaultValue, o? : any) : void { this.unimplementedVisitor("visitDefaultValue(DefaultValue, any)"); }

        public  visitAnnotations(n : Annotations, o? : any) : void { this.unimplementedVisitor("visitAnnotations(Annotations, any)"); }

        public  visitNormalAnnotation(n : NormalAnnotation, o? : any) : void { this.unimplementedVisitor("visitNormalAnnotation(NormalAnnotation, any)"); }

        public  visitElementValuePairs(n : ElementValuePairs, o? : any) : void { this.unimplementedVisitor("visitElementValuePairs(ElementValuePairs, any)"); }

        public  visitElementValuePair(n : ElementValuePair, o? : any) : void { this.unimplementedVisitor("visitElementValuePair(ElementValuePair, any)"); }

        public  visitElementValueArrayInitializer(n : ElementValueArrayInitializer, o? : any) : void { this.unimplementedVisitor("visitElementValueArrayInitializer(ElementValueArrayInitializer, any)"); }

        public  visitElementValues(n : ElementValues, o? : any) : void { this.unimplementedVisitor("visitElementValues(ElementValues, any)"); }

        public  visitMarkerAnnotation(n : MarkerAnnotation, o? : any) : void { this.unimplementedVisitor("visitMarkerAnnotation(MarkerAnnotation, any)"); }

        public  visitSingleElementAnnotation(n : SingleElementAnnotation, o? : any) : void { this.unimplementedVisitor("visitSingleElementAnnotation(SingleElementAnnotation, any)"); }

        public  visitArrayInitializer(n : ArrayInitializer, o? : any) : void { this.unimplementedVisitor("visitArrayInitializer(ArrayInitializer, any)"); }

        public  visitVariableInitializers(n : VariableInitializers, o? : any) : void { this.unimplementedVisitor("visitVariableInitializers(VariableInitializers, any)"); }

        public  visitBlock(n : Block, o? : any) : void { this.unimplementedVisitor("visitBlock(Block, any)"); }

        public  visitBlockStatements(n : BlockStatements, o? : any) : void { this.unimplementedVisitor("visitBlockStatements(BlockStatements, any)"); }

        public  visitLocalVariableDeclarationStatement(n : LocalVariableDeclarationStatement, o? : any) : void { this.unimplementedVisitor("visitLocalVariableDeclarationStatement(LocalVariableDeclarationStatement, any)"); }

        public  visitLocalVariableDeclaration(n : LocalVariableDeclaration, o? : any) : void { this.unimplementedVisitor("visitLocalVariableDeclaration(LocalVariableDeclaration, any)"); }

        public  visitIfThenStatement(n : IfThenStatement, o? : any) : void { this.unimplementedVisitor("visitIfThenStatement(IfThenStatement, any)"); }

        public  visitIfThenElseStatement(n : IfThenElseStatement, o? : any) : void { this.unimplementedVisitor("visitIfThenElseStatement(IfThenElseStatement, any)"); }

        public  visitIfThenElseStatementNoShortIf(n : IfThenElseStatementNoShortIf, o? : any) : void { this.unimplementedVisitor("visitIfThenElseStatementNoShortIf(IfThenElseStatementNoShortIf, any)"); }

        public  visitEmptyStatement(n : EmptyStatement, o? : any) : void { this.unimplementedVisitor("visitEmptyStatement(EmptyStatement, any)"); }

        public  visitLabeledStatement(n : LabeledStatement, o? : any) : void { this.unimplementedVisitor("visitLabeledStatement(LabeledStatement, any)"); }

        public  visitLabeledStatementNoShortIf(n : LabeledStatementNoShortIf, o? : any) : void { this.unimplementedVisitor("visitLabeledStatementNoShortIf(LabeledStatementNoShortIf, any)"); }

        public  visitExpressionStatement(n : ExpressionStatement, o? : any) : void { this.unimplementedVisitor("visitExpressionStatement(ExpressionStatement, any)"); }

        public  visitSwitchStatement(n : SwitchStatement, o? : any) : void { this.unimplementedVisitor("visitSwitchStatement(SwitchStatement, any)"); }

        public  visitSwitchBlock(n : SwitchBlock, o? : any) : void { this.unimplementedVisitor("visitSwitchBlock(SwitchBlock, any)"); }

        public  visitSwitchBlockStatementGroups(n : SwitchBlockStatementGroups, o? : any) : void { this.unimplementedVisitor("visitSwitchBlockStatementGroups(SwitchBlockStatementGroups, any)"); }

        public  visitSwitchBlockStatementGroup(n : SwitchBlockStatementGroup, o? : any) : void { this.unimplementedVisitor("visitSwitchBlockStatementGroup(SwitchBlockStatementGroup, any)"); }

        public  visitSwitchLabels(n : SwitchLabels, o? : any) : void { this.unimplementedVisitor("visitSwitchLabels(SwitchLabels, any)"); }

        public  visitWhileStatement(n : WhileStatement, o? : any) : void { this.unimplementedVisitor("visitWhileStatement(WhileStatement, any)"); }

        public  visitWhileStatementNoShortIf(n : WhileStatementNoShortIf, o? : any) : void { this.unimplementedVisitor("visitWhileStatementNoShortIf(WhileStatementNoShortIf, any)"); }

        public  visitDoStatement(n : DoStatement, o? : any) : void { this.unimplementedVisitor("visitDoStatement(DoStatement, any)"); }

        public  visitBasicForStatement(n : BasicForStatement, o? : any) : void { this.unimplementedVisitor("visitBasicForStatement(BasicForStatement, any)"); }

        public  visitForStatementNoShortIf(n : ForStatementNoShortIf, o? : any) : void { this.unimplementedVisitor("visitForStatementNoShortIf(ForStatementNoShortIf, any)"); }

        public  visitStatementExpressionList(n : StatementExpressionList, o? : any) : void { this.unimplementedVisitor("visitStatementExpressionList(StatementExpressionList, any)"); }

        public  visitEnhancedForStatement(n : EnhancedForStatement, o? : any) : void { this.unimplementedVisitor("visitEnhancedForStatement(EnhancedForStatement, any)"); }

        public  visitBreakStatement(n : BreakStatement, o? : any) : void { this.unimplementedVisitor("visitBreakStatement(BreakStatement, any)"); }

        public  visitContinueStatement(n : ContinueStatement, o? : any) : void { this.unimplementedVisitor("visitContinueStatement(ContinueStatement, any)"); }

        public  visitReturnStatement(n : ReturnStatement, o? : any) : void { this.unimplementedVisitor("visitReturnStatement(ReturnStatement, any)"); }

        public  visitThrowStatement(n : ThrowStatement, o? : any) : void { this.unimplementedVisitor("visitThrowStatement(ThrowStatement, any)"); }

        public  visitSynchronizedStatement(n : SynchronizedStatement, o? : any) : void { this.unimplementedVisitor("visitSynchronizedStatement(SynchronizedStatement, any)"); }

        public  visitCatches(n : Catches, o? : any) : void { this.unimplementedVisitor("visitCatches(Catches, any)"); }

        public  visitCatchClause(n : CatchClause, o? : any) : void { this.unimplementedVisitor("visitCatchClause(CatchClause, any)"); }

        public  visitFinally(n : Finally, o? : any) : void { this.unimplementedVisitor("visitFinally(Finally, any)"); }

        public  visitArgumentList(n : ArgumentList, o? : any) : void { this.unimplementedVisitor("visitArgumentList(ArgumentList, any)"); }

        public  visitDimExprs(n : DimExprs, o? : any) : void { this.unimplementedVisitor("visitDimExprs(DimExprs, any)"); }

        public  visitDimExpr(n : DimExpr, o? : any) : void { this.unimplementedVisitor("visitDimExpr(DimExpr, any)"); }

        public  visitPostIncrementExpression(n : PostIncrementExpression, o? : any) : void { this.unimplementedVisitor("visitPostIncrementExpression(PostIncrementExpression, any)"); }

        public  visitPostDecrementExpression(n : PostDecrementExpression, o? : any) : void { this.unimplementedVisitor("visitPostDecrementExpression(PostDecrementExpression, any)"); }

        public  visitPreIncrementExpression(n : PreIncrementExpression, o? : any) : void { this.unimplementedVisitor("visitPreIncrementExpression(PreIncrementExpression, any)"); }

        public  visitPreDecrementExpression(n : PreDecrementExpression, o? : any) : void { this.unimplementedVisitor("visitPreDecrementExpression(PreDecrementExpression, any)"); }

        public  visitAndExpression(n : AndExpression, o? : any) : void { this.unimplementedVisitor("visitAndExpression(AndExpression, any)"); }

        public  visitExclusiveOrExpression(n : ExclusiveOrExpression, o? : any) : void { this.unimplementedVisitor("visitExclusiveOrExpression(ExclusiveOrExpression, any)"); }

        public  visitInclusiveOrExpression(n : InclusiveOrExpression, o? : any) : void { this.unimplementedVisitor("visitInclusiveOrExpression(InclusiveOrExpression, any)"); }

        public  visitConditionalAndExpression(n : ConditionalAndExpression, o? : any) : void { this.unimplementedVisitor("visitConditionalAndExpression(ConditionalAndExpression, any)"); }

        public  visitConditionalOrExpression(n : ConditionalOrExpression, o? : any) : void { this.unimplementedVisitor("visitConditionalOrExpression(ConditionalOrExpression, any)"); }

        public  visitConditionalExpression(n : ConditionalExpression, o? : any) : void { this.unimplementedVisitor("visitConditionalExpression(ConditionalExpression, any)"); }

        public  visitAssignment(n : Assignment, o? : any) : void { this.unimplementedVisitor("visitAssignment(Assignment, any)"); }

        public  visitCommaopt(n : Commaopt, o? : any) : void { this.unimplementedVisitor("visitCommaopt(Commaopt, any)"); }

        public  visitEllipsisopt(n : Ellipsisopt, o? : any) : void { this.unimplementedVisitor("visitEllipsisopt(Ellipsisopt, any)"); }

        public  visitLPGUserAction0(n : LPGUserAction0, o? : any) : void { this.unimplementedVisitor("visitLPGUserAction0(LPGUserAction0, any)"); }

        public  visitLPGUserAction1(n : LPGUserAction1, o? : any) : void { this.unimplementedVisitor("visitLPGUserAction1(LPGUserAction1, any)"); }

        public  visitLPGUserAction2(n : LPGUserAction2, o? : any) : void { this.unimplementedVisitor("visitLPGUserAction2(LPGUserAction2, any)"); }

        public  visitLPGUserAction3(n : LPGUserAction3, o? : any) : void { this.unimplementedVisitor("visitLPGUserAction3(LPGUserAction3, any)"); }

        public  visitLPGUserAction4(n : LPGUserAction4, o? : any) : void { this.unimplementedVisitor("visitLPGUserAction4(LPGUserAction4, any)"); }

        public  visitIntegralType0(n : IntegralType0, o? : any) : void { this.unimplementedVisitor("visitIntegralType0(IntegralType0, any)"); }

        public  visitIntegralType1(n : IntegralType1, o? : any) : void { this.unimplementedVisitor("visitIntegralType1(IntegralType1, any)"); }

        public  visitIntegralType2(n : IntegralType2, o? : any) : void { this.unimplementedVisitor("visitIntegralType2(IntegralType2, any)"); }

        public  visitIntegralType3(n : IntegralType3, o? : any) : void { this.unimplementedVisitor("visitIntegralType3(IntegralType3, any)"); }

        public  visitIntegralType4(n : IntegralType4, o? : any) : void { this.unimplementedVisitor("visitIntegralType4(IntegralType4, any)"); }

        public  visitFloatingPointType0(n : FloatingPointType0, o? : any) : void { this.unimplementedVisitor("visitFloatingPointType0(FloatingPointType0, any)"); }

        public  visitFloatingPointType1(n : FloatingPointType1, o? : any) : void { this.unimplementedVisitor("visitFloatingPointType1(FloatingPointType1, any)"); }

        public  visitWildcardBounds0(n : WildcardBounds0, o? : any) : void { this.unimplementedVisitor("visitWildcardBounds0(WildcardBounds0, any)"); }

        public  visitWildcardBounds1(n : WildcardBounds1, o? : any) : void { this.unimplementedVisitor("visitWildcardBounds1(WildcardBounds1, any)"); }

        public  visitClassModifier0(n : ClassModifier0, o? : any) : void { this.unimplementedVisitor("visitClassModifier0(ClassModifier0, any)"); }

        public  visitClassModifier1(n : ClassModifier1, o? : any) : void { this.unimplementedVisitor("visitClassModifier1(ClassModifier1, any)"); }

        public  visitClassModifier2(n : ClassModifier2, o? : any) : void { this.unimplementedVisitor("visitClassModifier2(ClassModifier2, any)"); }

        public  visitClassModifier3(n : ClassModifier3, o? : any) : void { this.unimplementedVisitor("visitClassModifier3(ClassModifier3, any)"); }

        public  visitClassModifier4(n : ClassModifier4, o? : any) : void { this.unimplementedVisitor("visitClassModifier4(ClassModifier4, any)"); }

        public  visitClassModifier5(n : ClassModifier5, o? : any) : void { this.unimplementedVisitor("visitClassModifier5(ClassModifier5, any)"); }

        public  visitClassModifier6(n : ClassModifier6, o? : any) : void { this.unimplementedVisitor("visitClassModifier6(ClassModifier6, any)"); }

        public  visitFieldModifier0(n : FieldModifier0, o? : any) : void { this.unimplementedVisitor("visitFieldModifier0(FieldModifier0, any)"); }

        public  visitFieldModifier1(n : FieldModifier1, o? : any) : void { this.unimplementedVisitor("visitFieldModifier1(FieldModifier1, any)"); }

        public  visitFieldModifier2(n : FieldModifier2, o? : any) : void { this.unimplementedVisitor("visitFieldModifier2(FieldModifier2, any)"); }

        public  visitFieldModifier3(n : FieldModifier3, o? : any) : void { this.unimplementedVisitor("visitFieldModifier3(FieldModifier3, any)"); }

        public  visitFieldModifier4(n : FieldModifier4, o? : any) : void { this.unimplementedVisitor("visitFieldModifier4(FieldModifier4, any)"); }

        public  visitFieldModifier5(n : FieldModifier5, o? : any) : void { this.unimplementedVisitor("visitFieldModifier5(FieldModifier5, any)"); }

        public  visitFieldModifier6(n : FieldModifier6, o? : any) : void { this.unimplementedVisitor("visitFieldModifier6(FieldModifier6, any)"); }

        public  visitMethodDeclarator0(n : MethodDeclarator0, o? : any) : void { this.unimplementedVisitor("visitMethodDeclarator0(MethodDeclarator0, any)"); }

        public  visitMethodDeclarator1(n : MethodDeclarator1, o? : any) : void { this.unimplementedVisitor("visitMethodDeclarator1(MethodDeclarator1, any)"); }

        public  visitMethodModifier0(n : MethodModifier0, o? : any) : void { this.unimplementedVisitor("visitMethodModifier0(MethodModifier0, any)"); }

        public  visitMethodModifier1(n : MethodModifier1, o? : any) : void { this.unimplementedVisitor("visitMethodModifier1(MethodModifier1, any)"); }

        public  visitMethodModifier2(n : MethodModifier2, o? : any) : void { this.unimplementedVisitor("visitMethodModifier2(MethodModifier2, any)"); }

        public  visitMethodModifier3(n : MethodModifier3, o? : any) : void { this.unimplementedVisitor("visitMethodModifier3(MethodModifier3, any)"); }

        public  visitMethodModifier4(n : MethodModifier4, o? : any) : void { this.unimplementedVisitor("visitMethodModifier4(MethodModifier4, any)"); }

        public  visitMethodModifier5(n : MethodModifier5, o? : any) : void { this.unimplementedVisitor("visitMethodModifier5(MethodModifier5, any)"); }

        public  visitMethodModifier6(n : MethodModifier6, o? : any) : void { this.unimplementedVisitor("visitMethodModifier6(MethodModifier6, any)"); }

        public  visitMethodModifier7(n : MethodModifier7, o? : any) : void { this.unimplementedVisitor("visitMethodModifier7(MethodModifier7, any)"); }

        public  visitMethodModifier8(n : MethodModifier8, o? : any) : void { this.unimplementedVisitor("visitMethodModifier8(MethodModifier8, any)"); }

        public  visitConstructorModifier0(n : ConstructorModifier0, o? : any) : void { this.unimplementedVisitor("visitConstructorModifier0(ConstructorModifier0, any)"); }

        public  visitConstructorModifier1(n : ConstructorModifier1, o? : any) : void { this.unimplementedVisitor("visitConstructorModifier1(ConstructorModifier1, any)"); }

        public  visitConstructorModifier2(n : ConstructorModifier2, o? : any) : void { this.unimplementedVisitor("visitConstructorModifier2(ConstructorModifier2, any)"); }

        public  visitExplicitConstructorInvocation0(n : ExplicitConstructorInvocation0, o? : any) : void { this.unimplementedVisitor("visitExplicitConstructorInvocation0(ExplicitConstructorInvocation0, any)"); }

        public  visitExplicitConstructorInvocation1(n : ExplicitConstructorInvocation1, o? : any) : void { this.unimplementedVisitor("visitExplicitConstructorInvocation1(ExplicitConstructorInvocation1, any)"); }

        public  visitExplicitConstructorInvocation2(n : ExplicitConstructorInvocation2, o? : any) : void { this.unimplementedVisitor("visitExplicitConstructorInvocation2(ExplicitConstructorInvocation2, any)"); }

        public  visitInterfaceModifier0(n : InterfaceModifier0, o? : any) : void { this.unimplementedVisitor("visitInterfaceModifier0(InterfaceModifier0, any)"); }

        public  visitInterfaceModifier1(n : InterfaceModifier1, o? : any) : void { this.unimplementedVisitor("visitInterfaceModifier1(InterfaceModifier1, any)"); }

        public  visitInterfaceModifier2(n : InterfaceModifier2, o? : any) : void { this.unimplementedVisitor("visitInterfaceModifier2(InterfaceModifier2, any)"); }

        public  visitInterfaceModifier3(n : InterfaceModifier3, o? : any) : void { this.unimplementedVisitor("visitInterfaceModifier3(InterfaceModifier3, any)"); }

        public  visitInterfaceModifier4(n : InterfaceModifier4, o? : any) : void { this.unimplementedVisitor("visitInterfaceModifier4(InterfaceModifier4, any)"); }

        public  visitInterfaceModifier5(n : InterfaceModifier5, o? : any) : void { this.unimplementedVisitor("visitInterfaceModifier5(InterfaceModifier5, any)"); }

        public  visitExtendsInterfaces0(n : ExtendsInterfaces0, o? : any) : void { this.unimplementedVisitor("visitExtendsInterfaces0(ExtendsInterfaces0, any)"); }

        public  visitExtendsInterfaces1(n : ExtendsInterfaces1, o? : any) : void { this.unimplementedVisitor("visitExtendsInterfaces1(ExtendsInterfaces1, any)"); }

        public  visitConstantModifier0(n : ConstantModifier0, o? : any) : void { this.unimplementedVisitor("visitConstantModifier0(ConstantModifier0, any)"); }

        public  visitConstantModifier1(n : ConstantModifier1, o? : any) : void { this.unimplementedVisitor("visitConstantModifier1(ConstantModifier1, any)"); }

        public  visitConstantModifier2(n : ConstantModifier2, o? : any) : void { this.unimplementedVisitor("visitConstantModifier2(ConstantModifier2, any)"); }

        public  visitAbstractMethodModifier0(n : AbstractMethodModifier0, o? : any) : void { this.unimplementedVisitor("visitAbstractMethodModifier0(AbstractMethodModifier0, any)"); }

        public  visitAbstractMethodModifier1(n : AbstractMethodModifier1, o? : any) : void { this.unimplementedVisitor("visitAbstractMethodModifier1(AbstractMethodModifier1, any)"); }

        public  visitAnnotationTypeElementDeclaration0(n : AnnotationTypeElementDeclaration0, o? : any) : void { this.unimplementedVisitor("visitAnnotationTypeElementDeclaration0(AnnotationTypeElementDeclaration0, any)"); }

        public  visitAnnotationTypeElementDeclaration1(n : AnnotationTypeElementDeclaration1, o? : any) : void { this.unimplementedVisitor("visitAnnotationTypeElementDeclaration1(AnnotationTypeElementDeclaration1, any)"); }

        public  visitAssertStatement0(n : AssertStatement0, o? : any) : void { this.unimplementedVisitor("visitAssertStatement0(AssertStatement0, any)"); }

        public  visitAssertStatement1(n : AssertStatement1, o? : any) : void { this.unimplementedVisitor("visitAssertStatement1(AssertStatement1, any)"); }

        public  visitSwitchLabel0(n : SwitchLabel0, o? : any) : void { this.unimplementedVisitor("visitSwitchLabel0(SwitchLabel0, any)"); }

        public  visitSwitchLabel1(n : SwitchLabel1, o? : any) : void { this.unimplementedVisitor("visitSwitchLabel1(SwitchLabel1, any)"); }

        public  visitSwitchLabel2(n : SwitchLabel2, o? : any) : void { this.unimplementedVisitor("visitSwitchLabel2(SwitchLabel2, any)"); }

        public  visitTryStatement0(n : TryStatement0, o? : any) : void { this.unimplementedVisitor("visitTryStatement0(TryStatement0, any)"); }

        public  visitTryStatement1(n : TryStatement1, o? : any) : void { this.unimplementedVisitor("visitTryStatement1(TryStatement1, any)"); }

        public  visitPrimaryNoNewArray0(n : PrimaryNoNewArray0, o? : any) : void { this.unimplementedVisitor("visitPrimaryNoNewArray0(PrimaryNoNewArray0, any)"); }

        public  visitPrimaryNoNewArray1(n : PrimaryNoNewArray1, o? : any) : void { this.unimplementedVisitor("visitPrimaryNoNewArray1(PrimaryNoNewArray1, any)"); }

        public  visitPrimaryNoNewArray2(n : PrimaryNoNewArray2, o? : any) : void { this.unimplementedVisitor("visitPrimaryNoNewArray2(PrimaryNoNewArray2, any)"); }

        public  visitPrimaryNoNewArray3(n : PrimaryNoNewArray3, o? : any) : void { this.unimplementedVisitor("visitPrimaryNoNewArray3(PrimaryNoNewArray3, any)"); }

        public  visitPrimaryNoNewArray4(n : PrimaryNoNewArray4, o? : any) : void { this.unimplementedVisitor("visitPrimaryNoNewArray4(PrimaryNoNewArray4, any)"); }

        public  visitLiteral0(n : Literal0, o? : any) : void { this.unimplementedVisitor("visitLiteral0(Literal0, any)"); }

        public  visitLiteral1(n : Literal1, o? : any) : void { this.unimplementedVisitor("visitLiteral1(Literal1, any)"); }

        public  visitLiteral2(n : Literal2, o? : any) : void { this.unimplementedVisitor("visitLiteral2(Literal2, any)"); }

        public  visitLiteral3(n : Literal3, o? : any) : void { this.unimplementedVisitor("visitLiteral3(Literal3, any)"); }

        public  visitLiteral4(n : Literal4, o? : any) : void { this.unimplementedVisitor("visitLiteral4(Literal4, any)"); }

        public  visitLiteral5(n : Literal5, o? : any) : void { this.unimplementedVisitor("visitLiteral5(Literal5, any)"); }

        public  visitLiteral6(n : Literal6, o? : any) : void { this.unimplementedVisitor("visitLiteral6(Literal6, any)"); }

        public  visitBooleanLiteral0(n : BooleanLiteral0, o? : any) : void { this.unimplementedVisitor("visitBooleanLiteral0(BooleanLiteral0, any)"); }

        public  visitBooleanLiteral1(n : BooleanLiteral1, o? : any) : void { this.unimplementedVisitor("visitBooleanLiteral1(BooleanLiteral1, any)"); }

        public  visitClassInstanceCreationExpression0(n : ClassInstanceCreationExpression0, o? : any) : void { this.unimplementedVisitor("visitClassInstanceCreationExpression0(ClassInstanceCreationExpression0, any)"); }

        public  visitClassInstanceCreationExpression1(n : ClassInstanceCreationExpression1, o? : any) : void { this.unimplementedVisitor("visitClassInstanceCreationExpression1(ClassInstanceCreationExpression1, any)"); }

        public  visitArrayCreationExpression0(n : ArrayCreationExpression0, o? : any) : void { this.unimplementedVisitor("visitArrayCreationExpression0(ArrayCreationExpression0, any)"); }

        public  visitArrayCreationExpression1(n : ArrayCreationExpression1, o? : any) : void { this.unimplementedVisitor("visitArrayCreationExpression1(ArrayCreationExpression1, any)"); }

        public  visitArrayCreationExpression2(n : ArrayCreationExpression2, o? : any) : void { this.unimplementedVisitor("visitArrayCreationExpression2(ArrayCreationExpression2, any)"); }

        public  visitArrayCreationExpression3(n : ArrayCreationExpression3, o? : any) : void { this.unimplementedVisitor("visitArrayCreationExpression3(ArrayCreationExpression3, any)"); }

        public  visitDims0(n : Dims0, o? : any) : void { this.unimplementedVisitor("visitDims0(Dims0, any)"); }

        public  visitDims1(n : Dims1, o? : any) : void { this.unimplementedVisitor("visitDims1(Dims1, any)"); }

        public  visitFieldAccess0(n : FieldAccess0, o? : any) : void { this.unimplementedVisitor("visitFieldAccess0(FieldAccess0, any)"); }

        public  visitFieldAccess1(n : FieldAccess1, o? : any) : void { this.unimplementedVisitor("visitFieldAccess1(FieldAccess1, any)"); }

        public  visitFieldAccess2(n : FieldAccess2, o? : any) : void { this.unimplementedVisitor("visitFieldAccess2(FieldAccess2, any)"); }

        public  visitMethodInvocation0(n : MethodInvocation0, o? : any) : void { this.unimplementedVisitor("visitMethodInvocation0(MethodInvocation0, any)"); }

        public  visitMethodInvocation1(n : MethodInvocation1, o? : any) : void { this.unimplementedVisitor("visitMethodInvocation1(MethodInvocation1, any)"); }

        public  visitMethodInvocation2(n : MethodInvocation2, o? : any) : void { this.unimplementedVisitor("visitMethodInvocation2(MethodInvocation2, any)"); }

        public  visitMethodInvocation3(n : MethodInvocation3, o? : any) : void { this.unimplementedVisitor("visitMethodInvocation3(MethodInvocation3, any)"); }

        public  visitMethodInvocation4(n : MethodInvocation4, o? : any) : void { this.unimplementedVisitor("visitMethodInvocation4(MethodInvocation4, any)"); }

        public  visitArrayAccess0(n : ArrayAccess0, o? : any) : void { this.unimplementedVisitor("visitArrayAccess0(ArrayAccess0, any)"); }

        public  visitArrayAccess1(n : ArrayAccess1, o? : any) : void { this.unimplementedVisitor("visitArrayAccess1(ArrayAccess1, any)"); }

        public  visitUnaryExpression0(n : UnaryExpression0, o? : any) : void { this.unimplementedVisitor("visitUnaryExpression0(UnaryExpression0, any)"); }

        public  visitUnaryExpression1(n : UnaryExpression1, o? : any) : void { this.unimplementedVisitor("visitUnaryExpression1(UnaryExpression1, any)"); }

        public  visitUnaryExpressionNotPlusMinus0(n : UnaryExpressionNotPlusMinus0, o? : any) : void { this.unimplementedVisitor("visitUnaryExpressionNotPlusMinus0(UnaryExpressionNotPlusMinus0, any)"); }

        public  visitUnaryExpressionNotPlusMinus1(n : UnaryExpressionNotPlusMinus1, o? : any) : void { this.unimplementedVisitor("visitUnaryExpressionNotPlusMinus1(UnaryExpressionNotPlusMinus1, any)"); }

        public  visitCastExpression0(n : CastExpression0, o? : any) : void { this.unimplementedVisitor("visitCastExpression0(CastExpression0, any)"); }

        public  visitCastExpression1(n : CastExpression1, o? : any) : void { this.unimplementedVisitor("visitCastExpression1(CastExpression1, any)"); }

        public  visitMultiplicativeExpression0(n : MultiplicativeExpression0, o? : any) : void { this.unimplementedVisitor("visitMultiplicativeExpression0(MultiplicativeExpression0, any)"); }

        public  visitMultiplicativeExpression1(n : MultiplicativeExpression1, o? : any) : void { this.unimplementedVisitor("visitMultiplicativeExpression1(MultiplicativeExpression1, any)"); }

        public  visitMultiplicativeExpression2(n : MultiplicativeExpression2, o? : any) : void { this.unimplementedVisitor("visitMultiplicativeExpression2(MultiplicativeExpression2, any)"); }

        public  visitAdditiveExpression0(n : AdditiveExpression0, o? : any) : void { this.unimplementedVisitor("visitAdditiveExpression0(AdditiveExpression0, any)"); }

        public  visitAdditiveExpression1(n : AdditiveExpression1, o? : any) : void { this.unimplementedVisitor("visitAdditiveExpression1(AdditiveExpression1, any)"); }

        public  visitShiftExpression0(n : ShiftExpression0, o? : any) : void { this.unimplementedVisitor("visitShiftExpression0(ShiftExpression0, any)"); }

        public  visitShiftExpression1(n : ShiftExpression1, o? : any) : void { this.unimplementedVisitor("visitShiftExpression1(ShiftExpression1, any)"); }

        public  visitShiftExpression2(n : ShiftExpression2, o? : any) : void { this.unimplementedVisitor("visitShiftExpression2(ShiftExpression2, any)"); }

        public  visitRelationalExpression0(n : RelationalExpression0, o? : any) : void { this.unimplementedVisitor("visitRelationalExpression0(RelationalExpression0, any)"); }

        public  visitRelationalExpression1(n : RelationalExpression1, o? : any) : void { this.unimplementedVisitor("visitRelationalExpression1(RelationalExpression1, any)"); }

        public  visitRelationalExpression2(n : RelationalExpression2, o? : any) : void { this.unimplementedVisitor("visitRelationalExpression2(RelationalExpression2, any)"); }

        public  visitRelationalExpression3(n : RelationalExpression3, o? : any) : void { this.unimplementedVisitor("visitRelationalExpression3(RelationalExpression3, any)"); }

        public  visitRelationalExpression4(n : RelationalExpression4, o? : any) : void { this.unimplementedVisitor("visitRelationalExpression4(RelationalExpression4, any)"); }

        public  visitEqualityExpression0(n : EqualityExpression0, o? : any) : void { this.unimplementedVisitor("visitEqualityExpression0(EqualityExpression0, any)"); }

        public  visitEqualityExpression1(n : EqualityExpression1, o? : any) : void { this.unimplementedVisitor("visitEqualityExpression1(EqualityExpression1, any)"); }

        public  visitAssignmentOperator0(n : AssignmentOperator0, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator0(AssignmentOperator0, any)"); }

        public  visitAssignmentOperator1(n : AssignmentOperator1, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator1(AssignmentOperator1, any)"); }

        public  visitAssignmentOperator2(n : AssignmentOperator2, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator2(AssignmentOperator2, any)"); }

        public  visitAssignmentOperator3(n : AssignmentOperator3, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator3(AssignmentOperator3, any)"); }

        public  visitAssignmentOperator4(n : AssignmentOperator4, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator4(AssignmentOperator4, any)"); }

        public  visitAssignmentOperator5(n : AssignmentOperator5, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator5(AssignmentOperator5, any)"); }

        public  visitAssignmentOperator6(n : AssignmentOperator6, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator6(AssignmentOperator6, any)"); }

        public  visitAssignmentOperator7(n : AssignmentOperator7, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator7(AssignmentOperator7, any)"); }

        public  visitAssignmentOperator8(n : AssignmentOperator8, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator8(AssignmentOperator8, any)"); }

        public  visitAssignmentOperator9(n : AssignmentOperator9, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator9(AssignmentOperator9, any)"); }

        public  visitAssignmentOperator10(n : AssignmentOperator10, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator10(AssignmentOperator10, any)"); }

        public  visitAssignmentOperator11(n : AssignmentOperator11, o? : any) : void { this.unimplementedVisitor("visitAssignmentOperator11(AssignmentOperator11, any)"); }


        public  visit(n : Ast, o? : any) : void
        {
            if (n instanceof AstToken) this.visitAstToken(<AstToken> n, o);
            else if (n instanceof identifier) this.visitidentifier(<identifier> n, o);
            else if (n instanceof PrimitiveType) this.visitPrimitiveType(<PrimitiveType> n, o);
            else if (n instanceof ClassType) this.visitClassType(<ClassType> n, o);
            else if (n instanceof InterfaceType) this.visitInterfaceType(<InterfaceType> n, o);
            else if (n instanceof TypeName) this.visitTypeName(<TypeName> n, o);
            else if (n instanceof ArrayType) this.visitArrayType(<ArrayType> n, o);
            else if (n instanceof TypeParameter) this.visitTypeParameter(<TypeParameter> n, o);
            else if (n instanceof TypeBound) this.visitTypeBound(<TypeBound> n, o);
            else if (n instanceof AdditionalBoundList) this.visitAdditionalBoundList(<AdditionalBoundList> n, o);
            else if (n instanceof AdditionalBound) this.visitAdditionalBound(<AdditionalBound> n, o);
            else if (n instanceof TypeArguments) this.visitTypeArguments(<TypeArguments> n, o);
            else if (n instanceof ActualTypeArgumentList) this.visitActualTypeArgumentList(<ActualTypeArgumentList> n, o);
            else if (n instanceof Wildcard) this.visitWildcard(<Wildcard> n, o);
            else if (n instanceof PackageName) this.visitPackageName(<PackageName> n, o);
            else if (n instanceof ExpressionName) this.visitExpressionName(<ExpressionName> n, o);
            else if (n instanceof MethodName) this.visitMethodName(<MethodName> n, o);
            else if (n instanceof PackageOrTypeName) this.visitPackageOrTypeName(<PackageOrTypeName> n, o);
            else if (n instanceof AmbiguousName) this.visitAmbiguousName(<AmbiguousName> n, o);
            else if (n instanceof CompilationUnit) this.visitCompilationUnit(<CompilationUnit> n, o);
            else if (n instanceof ImportDeclarations) this.visitImportDeclarations(<ImportDeclarations> n, o);
            else if (n instanceof TypeDeclarations) this.visitTypeDeclarations(<TypeDeclarations> n, o);
            else if (n instanceof PackageDeclaration) this.visitPackageDeclaration(<PackageDeclaration> n, o);
            else if (n instanceof SingleTypeImportDeclaration) this.visitSingleTypeImportDeclaration(<SingleTypeImportDeclaration> n, o);
            else if (n instanceof TypeImportOnDemandDeclaration) this.visitTypeImportOnDemandDeclaration(<TypeImportOnDemandDeclaration> n, o);
            else if (n instanceof SingleStaticImportDeclaration) this.visitSingleStaticImportDeclaration(<SingleStaticImportDeclaration> n, o);
            else if (n instanceof StaticImportOnDemandDeclaration) this.visitStaticImportOnDemandDeclaration(<StaticImportOnDemandDeclaration> n, o);
            else if (n instanceof TypeDeclaration) this.visitTypeDeclaration(<TypeDeclaration> n, o);
            else if (n instanceof NormalClassDeclaration) this.visitNormalClassDeclaration(<NormalClassDeclaration> n, o);
            else if (n instanceof ClassModifiers) this.visitClassModifiers(<ClassModifiers> n, o);
            else if (n instanceof TypeParameters) this.visitTypeParameters(<TypeParameters> n, o);
            else if (n instanceof TypeParameterList) this.visitTypeParameterList(<TypeParameterList> n, o);
            else if (n instanceof Super) this.visitSuper(<Super> n, o);
            else if (n instanceof Interfaces) this.visitInterfaces(<Interfaces> n, o);
            else if (n instanceof InterfaceTypeList) this.visitInterfaceTypeList(<InterfaceTypeList> n, o);
            else if (n instanceof ClassBody) this.visitClassBody(<ClassBody> n, o);
            else if (n instanceof ClassBodyDeclarations) this.visitClassBodyDeclarations(<ClassBodyDeclarations> n, o);
            else if (n instanceof ClassMemberDeclaration) this.visitClassMemberDeclaration(<ClassMemberDeclaration> n, o);
            else if (n instanceof FieldDeclaration) this.visitFieldDeclaration(<FieldDeclaration> n, o);
            else if (n instanceof VariableDeclarators) this.visitVariableDeclarators(<VariableDeclarators> n, o);
            else if (n instanceof VariableDeclarator) this.visitVariableDeclarator(<VariableDeclarator> n, o);
            else if (n instanceof VariableDeclaratorId) this.visitVariableDeclaratorId(<VariableDeclaratorId> n, o);
            else if (n instanceof FieldModifiers) this.visitFieldModifiers(<FieldModifiers> n, o);
            else if (n instanceof MethodDeclaration) this.visitMethodDeclaration(<MethodDeclaration> n, o);
            else if (n instanceof MethodHeader) this.visitMethodHeader(<MethodHeader> n, o);
            else if (n instanceof ResultType) this.visitResultType(<ResultType> n, o);
            else if (n instanceof FormalParameterList) this.visitFormalParameterList(<FormalParameterList> n, o);
            else if (n instanceof FormalParameters) this.visitFormalParameters(<FormalParameters> n, o);
            else if (n instanceof FormalParameter) this.visitFormalParameter(<FormalParameter> n, o);
            else if (n instanceof VariableModifiers) this.visitVariableModifiers(<VariableModifiers> n, o);
            else if (n instanceof VariableModifier) this.visitVariableModifier(<VariableModifier> n, o);
            else if (n instanceof LastFormalParameter) this.visitLastFormalParameter(<LastFormalParameter> n, o);
            else if (n instanceof MethodModifiers) this.visitMethodModifiers(<MethodModifiers> n, o);
            else if (n instanceof Throws) this.visitThrows(<Throws> n, o);
            else if (n instanceof ExceptionTypeList) this.visitExceptionTypeList(<ExceptionTypeList> n, o);
            else if (n instanceof MethodBody) this.visitMethodBody(<MethodBody> n, o);
            else if (n instanceof StaticInitializer) this.visitStaticInitializer(<StaticInitializer> n, o);
            else if (n instanceof ConstructorDeclaration) this.visitConstructorDeclaration(<ConstructorDeclaration> n, o);
            else if (n instanceof ConstructorDeclarator) this.visitConstructorDeclarator(<ConstructorDeclarator> n, o);
            else if (n instanceof ConstructorModifiers) this.visitConstructorModifiers(<ConstructorModifiers> n, o);
            else if (n instanceof ConstructorBody) this.visitConstructorBody(<ConstructorBody> n, o);
            else if (n instanceof EnumDeclaration) this.visitEnumDeclaration(<EnumDeclaration> n, o);
            else if (n instanceof EnumBody) this.visitEnumBody(<EnumBody> n, o);
            else if (n instanceof EnumConstants) this.visitEnumConstants(<EnumConstants> n, o);
            else if (n instanceof EnumConstant) this.visitEnumConstant(<EnumConstant> n, o);
            else if (n instanceof Arguments) this.visitArguments(<Arguments> n, o);
            else if (n instanceof EnumBodyDeclarations) this.visitEnumBodyDeclarations(<EnumBodyDeclarations> n, o);
            else if (n instanceof NormalInterfaceDeclaration) this.visitNormalInterfaceDeclaration(<NormalInterfaceDeclaration> n, o);
            else if (n instanceof InterfaceModifiers) this.visitInterfaceModifiers(<InterfaceModifiers> n, o);
            else if (n instanceof InterfaceBody) this.visitInterfaceBody(<InterfaceBody> n, o);
            else if (n instanceof InterfaceMemberDeclarations) this.visitInterfaceMemberDeclarations(<InterfaceMemberDeclarations> n, o);
            else if (n instanceof InterfaceMemberDeclaration) this.visitInterfaceMemberDeclaration(<InterfaceMemberDeclaration> n, o);
            else if (n instanceof ConstantDeclaration) this.visitConstantDeclaration(<ConstantDeclaration> n, o);
            else if (n instanceof ConstantModifiers) this.visitConstantModifiers(<ConstantModifiers> n, o);
            else if (n instanceof AbstractMethodDeclaration) this.visitAbstractMethodDeclaration(<AbstractMethodDeclaration> n, o);
            else if (n instanceof AbstractMethodModifiers) this.visitAbstractMethodModifiers(<AbstractMethodModifiers> n, o);
            else if (n instanceof AnnotationTypeDeclaration) this.visitAnnotationTypeDeclaration(<AnnotationTypeDeclaration> n, o);
            else if (n instanceof AnnotationTypeBody) this.visitAnnotationTypeBody(<AnnotationTypeBody> n, o);
            else if (n instanceof AnnotationTypeElementDeclarations) this.visitAnnotationTypeElementDeclarations(<AnnotationTypeElementDeclarations> n, o);
            else if (n instanceof DefaultValue) this.visitDefaultValue(<DefaultValue> n, o);
            else if (n instanceof Annotations) this.visitAnnotations(<Annotations> n, o);
            else if (n instanceof NormalAnnotation) this.visitNormalAnnotation(<NormalAnnotation> n, o);
            else if (n instanceof ElementValuePairs) this.visitElementValuePairs(<ElementValuePairs> n, o);
            else if (n instanceof ElementValuePair) this.visitElementValuePair(<ElementValuePair> n, o);
            else if (n instanceof ElementValueArrayInitializer) this.visitElementValueArrayInitializer(<ElementValueArrayInitializer> n, o);
            else if (n instanceof ElementValues) this.visitElementValues(<ElementValues> n, o);
            else if (n instanceof MarkerAnnotation) this.visitMarkerAnnotation(<MarkerAnnotation> n, o);
            else if (n instanceof SingleElementAnnotation) this.visitSingleElementAnnotation(<SingleElementAnnotation> n, o);
            else if (n instanceof ArrayInitializer) this.visitArrayInitializer(<ArrayInitializer> n, o);
            else if (n instanceof VariableInitializers) this.visitVariableInitializers(<VariableInitializers> n, o);
            else if (n instanceof Block) this.visitBlock(<Block> n, o);
            else if (n instanceof BlockStatements) this.visitBlockStatements(<BlockStatements> n, o);
            else if (n instanceof LocalVariableDeclarationStatement) this.visitLocalVariableDeclarationStatement(<LocalVariableDeclarationStatement> n, o);
            else if (n instanceof LocalVariableDeclaration) this.visitLocalVariableDeclaration(<LocalVariableDeclaration> n, o);
            else if (n instanceof IfThenStatement) this.visitIfThenStatement(<IfThenStatement> n, o);
            else if (n instanceof IfThenElseStatement) this.visitIfThenElseStatement(<IfThenElseStatement> n, o);
            else if (n instanceof IfThenElseStatementNoShortIf) this.visitIfThenElseStatementNoShortIf(<IfThenElseStatementNoShortIf> n, o);
            else if (n instanceof EmptyStatement) this.visitEmptyStatement(<EmptyStatement> n, o);
            else if (n instanceof LabeledStatement) this.visitLabeledStatement(<LabeledStatement> n, o);
            else if (n instanceof LabeledStatementNoShortIf) this.visitLabeledStatementNoShortIf(<LabeledStatementNoShortIf> n, o);
            else if (n instanceof ExpressionStatement) this.visitExpressionStatement(<ExpressionStatement> n, o);
            else if (n instanceof SwitchStatement) this.visitSwitchStatement(<SwitchStatement> n, o);
            else if (n instanceof SwitchBlock) this.visitSwitchBlock(<SwitchBlock> n, o);
            else if (n instanceof SwitchBlockStatementGroups) this.visitSwitchBlockStatementGroups(<SwitchBlockStatementGroups> n, o);
            else if (n instanceof SwitchBlockStatementGroup) this.visitSwitchBlockStatementGroup(<SwitchBlockStatementGroup> n, o);
            else if (n instanceof SwitchLabels) this.visitSwitchLabels(<SwitchLabels> n, o);
            else if (n instanceof WhileStatement) this.visitWhileStatement(<WhileStatement> n, o);
            else if (n instanceof WhileStatementNoShortIf) this.visitWhileStatementNoShortIf(<WhileStatementNoShortIf> n, o);
            else if (n instanceof DoStatement) this.visitDoStatement(<DoStatement> n, o);
            else if (n instanceof BasicForStatement) this.visitBasicForStatement(<BasicForStatement> n, o);
            else if (n instanceof ForStatementNoShortIf) this.visitForStatementNoShortIf(<ForStatementNoShortIf> n, o);
            else if (n instanceof StatementExpressionList) this.visitStatementExpressionList(<StatementExpressionList> n, o);
            else if (n instanceof EnhancedForStatement) this.visitEnhancedForStatement(<EnhancedForStatement> n, o);
            else if (n instanceof BreakStatement) this.visitBreakStatement(<BreakStatement> n, o);
            else if (n instanceof ContinueStatement) this.visitContinueStatement(<ContinueStatement> n, o);
            else if (n instanceof ReturnStatement) this.visitReturnStatement(<ReturnStatement> n, o);
            else if (n instanceof ThrowStatement) this.visitThrowStatement(<ThrowStatement> n, o);
            else if (n instanceof SynchronizedStatement) this.visitSynchronizedStatement(<SynchronizedStatement> n, o);
            else if (n instanceof Catches) this.visitCatches(<Catches> n, o);
            else if (n instanceof CatchClause) this.visitCatchClause(<CatchClause> n, o);
            else if (n instanceof Finally) this.visitFinally(<Finally> n, o);
            else if (n instanceof ArgumentList) this.visitArgumentList(<ArgumentList> n, o);
            else if (n instanceof DimExprs) this.visitDimExprs(<DimExprs> n, o);
            else if (n instanceof DimExpr) this.visitDimExpr(<DimExpr> n, o);
            else if (n instanceof PostIncrementExpression) this.visitPostIncrementExpression(<PostIncrementExpression> n, o);
            else if (n instanceof PostDecrementExpression) this.visitPostDecrementExpression(<PostDecrementExpression> n, o);
            else if (n instanceof PreIncrementExpression) this.visitPreIncrementExpression(<PreIncrementExpression> n, o);
            else if (n instanceof PreDecrementExpression) this.visitPreDecrementExpression(<PreDecrementExpression> n, o);
            else if (n instanceof AndExpression) this.visitAndExpression(<AndExpression> n, o);
            else if (n instanceof ExclusiveOrExpression) this.visitExclusiveOrExpression(<ExclusiveOrExpression> n, o);
            else if (n instanceof InclusiveOrExpression) this.visitInclusiveOrExpression(<InclusiveOrExpression> n, o);
            else if (n instanceof ConditionalAndExpression) this.visitConditionalAndExpression(<ConditionalAndExpression> n, o);
            else if (n instanceof ConditionalOrExpression) this.visitConditionalOrExpression(<ConditionalOrExpression> n, o);
            else if (n instanceof ConditionalExpression) this.visitConditionalExpression(<ConditionalExpression> n, o);
            else if (n instanceof Assignment) this.visitAssignment(<Assignment> n, o);
            else if (n instanceof Commaopt) this.visitCommaopt(<Commaopt> n, o);
            else if (n instanceof Ellipsisopt) this.visitEllipsisopt(<Ellipsisopt> n, o);
            else if (n instanceof LPGUserAction0) this.visitLPGUserAction0(<LPGUserAction0> n, o);
            else if (n instanceof LPGUserAction1) this.visitLPGUserAction1(<LPGUserAction1> n, o);
            else if (n instanceof LPGUserAction2) this.visitLPGUserAction2(<LPGUserAction2> n, o);
            else if (n instanceof LPGUserAction3) this.visitLPGUserAction3(<LPGUserAction3> n, o);
            else if (n instanceof LPGUserAction4) this.visitLPGUserAction4(<LPGUserAction4> n, o);
            else if (n instanceof IntegralType0) this.visitIntegralType0(<IntegralType0> n, o);
            else if (n instanceof IntegralType1) this.visitIntegralType1(<IntegralType1> n, o);
            else if (n instanceof IntegralType2) this.visitIntegralType2(<IntegralType2> n, o);
            else if (n instanceof IntegralType3) this.visitIntegralType3(<IntegralType3> n, o);
            else if (n instanceof IntegralType4) this.visitIntegralType4(<IntegralType4> n, o);
            else if (n instanceof FloatingPointType0) this.visitFloatingPointType0(<FloatingPointType0> n, o);
            else if (n instanceof FloatingPointType1) this.visitFloatingPointType1(<FloatingPointType1> n, o);
            else if (n instanceof WildcardBounds0) this.visitWildcardBounds0(<WildcardBounds0> n, o);
            else if (n instanceof WildcardBounds1) this.visitWildcardBounds1(<WildcardBounds1> n, o);
            else if (n instanceof ClassModifier0) this.visitClassModifier0(<ClassModifier0> n, o);
            else if (n instanceof ClassModifier1) this.visitClassModifier1(<ClassModifier1> n, o);
            else if (n instanceof ClassModifier2) this.visitClassModifier2(<ClassModifier2> n, o);
            else if (n instanceof ClassModifier3) this.visitClassModifier3(<ClassModifier3> n, o);
            else if (n instanceof ClassModifier4) this.visitClassModifier4(<ClassModifier4> n, o);
            else if (n instanceof ClassModifier5) this.visitClassModifier5(<ClassModifier5> n, o);
            else if (n instanceof ClassModifier6) this.visitClassModifier6(<ClassModifier6> n, o);
            else if (n instanceof FieldModifier0) this.visitFieldModifier0(<FieldModifier0> n, o);
            else if (n instanceof FieldModifier1) this.visitFieldModifier1(<FieldModifier1> n, o);
            else if (n instanceof FieldModifier2) this.visitFieldModifier2(<FieldModifier2> n, o);
            else if (n instanceof FieldModifier3) this.visitFieldModifier3(<FieldModifier3> n, o);
            else if (n instanceof FieldModifier4) this.visitFieldModifier4(<FieldModifier4> n, o);
            else if (n instanceof FieldModifier5) this.visitFieldModifier5(<FieldModifier5> n, o);
            else if (n instanceof FieldModifier6) this.visitFieldModifier6(<FieldModifier6> n, o);
            else if (n instanceof MethodDeclarator0) this.visitMethodDeclarator0(<MethodDeclarator0> n, o);
            else if (n instanceof MethodDeclarator1) this.visitMethodDeclarator1(<MethodDeclarator1> n, o);
            else if (n instanceof MethodModifier0) this.visitMethodModifier0(<MethodModifier0> n, o);
            else if (n instanceof MethodModifier1) this.visitMethodModifier1(<MethodModifier1> n, o);
            else if (n instanceof MethodModifier2) this.visitMethodModifier2(<MethodModifier2> n, o);
            else if (n instanceof MethodModifier3) this.visitMethodModifier3(<MethodModifier3> n, o);
            else if (n instanceof MethodModifier4) this.visitMethodModifier4(<MethodModifier4> n, o);
            else if (n instanceof MethodModifier5) this.visitMethodModifier5(<MethodModifier5> n, o);
            else if (n instanceof MethodModifier6) this.visitMethodModifier6(<MethodModifier6> n, o);
            else if (n instanceof MethodModifier7) this.visitMethodModifier7(<MethodModifier7> n, o);
            else if (n instanceof MethodModifier8) this.visitMethodModifier8(<MethodModifier8> n, o);
            else if (n instanceof ConstructorModifier0) this.visitConstructorModifier0(<ConstructorModifier0> n, o);
            else if (n instanceof ConstructorModifier1) this.visitConstructorModifier1(<ConstructorModifier1> n, o);
            else if (n instanceof ConstructorModifier2) this.visitConstructorModifier2(<ConstructorModifier2> n, o);
            else if (n instanceof ExplicitConstructorInvocation0) this.visitExplicitConstructorInvocation0(<ExplicitConstructorInvocation0> n, o);
            else if (n instanceof ExplicitConstructorInvocation1) this.visitExplicitConstructorInvocation1(<ExplicitConstructorInvocation1> n, o);
            else if (n instanceof ExplicitConstructorInvocation2) this.visitExplicitConstructorInvocation2(<ExplicitConstructorInvocation2> n, o);
            else if (n instanceof InterfaceModifier0) this.visitInterfaceModifier0(<InterfaceModifier0> n, o);
            else if (n instanceof InterfaceModifier1) this.visitInterfaceModifier1(<InterfaceModifier1> n, o);
            else if (n instanceof InterfaceModifier2) this.visitInterfaceModifier2(<InterfaceModifier2> n, o);
            else if (n instanceof InterfaceModifier3) this.visitInterfaceModifier3(<InterfaceModifier3> n, o);
            else if (n instanceof InterfaceModifier4) this.visitInterfaceModifier4(<InterfaceModifier4> n, o);
            else if (n instanceof InterfaceModifier5) this.visitInterfaceModifier5(<InterfaceModifier5> n, o);
            else if (n instanceof ExtendsInterfaces0) this.visitExtendsInterfaces0(<ExtendsInterfaces0> n, o);
            else if (n instanceof ExtendsInterfaces1) this.visitExtendsInterfaces1(<ExtendsInterfaces1> n, o);
            else if (n instanceof ConstantModifier0) this.visitConstantModifier0(<ConstantModifier0> n, o);
            else if (n instanceof ConstantModifier1) this.visitConstantModifier1(<ConstantModifier1> n, o);
            else if (n instanceof ConstantModifier2) this.visitConstantModifier2(<ConstantModifier2> n, o);
            else if (n instanceof AbstractMethodModifier0) this.visitAbstractMethodModifier0(<AbstractMethodModifier0> n, o);
            else if (n instanceof AbstractMethodModifier1) this.visitAbstractMethodModifier1(<AbstractMethodModifier1> n, o);
            else if (n instanceof AnnotationTypeElementDeclaration0) this.visitAnnotationTypeElementDeclaration0(<AnnotationTypeElementDeclaration0> n, o);
            else if (n instanceof AnnotationTypeElementDeclaration1) this.visitAnnotationTypeElementDeclaration1(<AnnotationTypeElementDeclaration1> n, o);
            else if (n instanceof AssertStatement0) this.visitAssertStatement0(<AssertStatement0> n, o);
            else if (n instanceof AssertStatement1) this.visitAssertStatement1(<AssertStatement1> n, o);
            else if (n instanceof SwitchLabel0) this.visitSwitchLabel0(<SwitchLabel0> n, o);
            else if (n instanceof SwitchLabel1) this.visitSwitchLabel1(<SwitchLabel1> n, o);
            else if (n instanceof SwitchLabel2) this.visitSwitchLabel2(<SwitchLabel2> n, o);
            else if (n instanceof TryStatement0) this.visitTryStatement0(<TryStatement0> n, o);
            else if (n instanceof TryStatement1) this.visitTryStatement1(<TryStatement1> n, o);
            else if (n instanceof PrimaryNoNewArray0) this.visitPrimaryNoNewArray0(<PrimaryNoNewArray0> n, o);
            else if (n instanceof PrimaryNoNewArray1) this.visitPrimaryNoNewArray1(<PrimaryNoNewArray1> n, o);
            else if (n instanceof PrimaryNoNewArray2) this.visitPrimaryNoNewArray2(<PrimaryNoNewArray2> n, o);
            else if (n instanceof PrimaryNoNewArray3) this.visitPrimaryNoNewArray3(<PrimaryNoNewArray3> n, o);
            else if (n instanceof PrimaryNoNewArray4) this.visitPrimaryNoNewArray4(<PrimaryNoNewArray4> n, o);
            else if (n instanceof Literal0) this.visitLiteral0(<Literal0> n, o);
            else if (n instanceof Literal1) this.visitLiteral1(<Literal1> n, o);
            else if (n instanceof Literal2) this.visitLiteral2(<Literal2> n, o);
            else if (n instanceof Literal3) this.visitLiteral3(<Literal3> n, o);
            else if (n instanceof Literal4) this.visitLiteral4(<Literal4> n, o);
            else if (n instanceof Literal5) this.visitLiteral5(<Literal5> n, o);
            else if (n instanceof Literal6) this.visitLiteral6(<Literal6> n, o);
            else if (n instanceof BooleanLiteral0) this.visitBooleanLiteral0(<BooleanLiteral0> n, o);
            else if (n instanceof BooleanLiteral1) this.visitBooleanLiteral1(<BooleanLiteral1> n, o);
            else if (n instanceof ClassInstanceCreationExpression0) this.visitClassInstanceCreationExpression0(<ClassInstanceCreationExpression0> n, o);
            else if (n instanceof ClassInstanceCreationExpression1) this.visitClassInstanceCreationExpression1(<ClassInstanceCreationExpression1> n, o);
            else if (n instanceof ArrayCreationExpression0) this.visitArrayCreationExpression0(<ArrayCreationExpression0> n, o);
            else if (n instanceof ArrayCreationExpression1) this.visitArrayCreationExpression1(<ArrayCreationExpression1> n, o);
            else if (n instanceof ArrayCreationExpression2) this.visitArrayCreationExpression2(<ArrayCreationExpression2> n, o);
            else if (n instanceof ArrayCreationExpression3) this.visitArrayCreationExpression3(<ArrayCreationExpression3> n, o);
            else if (n instanceof Dims0) this.visitDims0(<Dims0> n, o);
            else if (n instanceof Dims1) this.visitDims1(<Dims1> n, o);
            else if (n instanceof FieldAccess0) this.visitFieldAccess0(<FieldAccess0> n, o);
            else if (n instanceof FieldAccess1) this.visitFieldAccess1(<FieldAccess1> n, o);
            else if (n instanceof FieldAccess2) this.visitFieldAccess2(<FieldAccess2> n, o);
            else if (n instanceof MethodInvocation0) this.visitMethodInvocation0(<MethodInvocation0> n, o);
            else if (n instanceof MethodInvocation1) this.visitMethodInvocation1(<MethodInvocation1> n, o);
            else if (n instanceof MethodInvocation2) this.visitMethodInvocation2(<MethodInvocation2> n, o);
            else if (n instanceof MethodInvocation3) this.visitMethodInvocation3(<MethodInvocation3> n, o);
            else if (n instanceof MethodInvocation4) this.visitMethodInvocation4(<MethodInvocation4> n, o);
            else if (n instanceof ArrayAccess0) this.visitArrayAccess0(<ArrayAccess0> n, o);
            else if (n instanceof ArrayAccess1) this.visitArrayAccess1(<ArrayAccess1> n, o);
            else if (n instanceof UnaryExpression0) this.visitUnaryExpression0(<UnaryExpression0> n, o);
            else if (n instanceof UnaryExpression1) this.visitUnaryExpression1(<UnaryExpression1> n, o);
            else if (n instanceof UnaryExpressionNotPlusMinus0) this.visitUnaryExpressionNotPlusMinus0(<UnaryExpressionNotPlusMinus0> n, o);
            else if (n instanceof UnaryExpressionNotPlusMinus1) this.visitUnaryExpressionNotPlusMinus1(<UnaryExpressionNotPlusMinus1> n, o);
            else if (n instanceof CastExpression0) this.visitCastExpression0(<CastExpression0> n, o);
            else if (n instanceof CastExpression1) this.visitCastExpression1(<CastExpression1> n, o);
            else if (n instanceof MultiplicativeExpression0) this.visitMultiplicativeExpression0(<MultiplicativeExpression0> n, o);
            else if (n instanceof MultiplicativeExpression1) this.visitMultiplicativeExpression1(<MultiplicativeExpression1> n, o);
            else if (n instanceof MultiplicativeExpression2) this.visitMultiplicativeExpression2(<MultiplicativeExpression2> n, o);
            else if (n instanceof AdditiveExpression0) this.visitAdditiveExpression0(<AdditiveExpression0> n, o);
            else if (n instanceof AdditiveExpression1) this.visitAdditiveExpression1(<AdditiveExpression1> n, o);
            else if (n instanceof ShiftExpression0) this.visitShiftExpression0(<ShiftExpression0> n, o);
            else if (n instanceof ShiftExpression1) this.visitShiftExpression1(<ShiftExpression1> n, o);
            else if (n instanceof ShiftExpression2) this.visitShiftExpression2(<ShiftExpression2> n, o);
            else if (n instanceof RelationalExpression0) this.visitRelationalExpression0(<RelationalExpression0> n, o);
            else if (n instanceof RelationalExpression1) this.visitRelationalExpression1(<RelationalExpression1> n, o);
            else if (n instanceof RelationalExpression2) this.visitRelationalExpression2(<RelationalExpression2> n, o);
            else if (n instanceof RelationalExpression3) this.visitRelationalExpression3(<RelationalExpression3> n, o);
            else if (n instanceof RelationalExpression4) this.visitRelationalExpression4(<RelationalExpression4> n, o);
            else if (n instanceof EqualityExpression0) this.visitEqualityExpression0(<EqualityExpression0> n, o);
            else if (n instanceof EqualityExpression1) this.visitEqualityExpression1(<EqualityExpression1> n, o);
            else if (n instanceof AssignmentOperator0) this.visitAssignmentOperator0(<AssignmentOperator0> n, o);
            else if (n instanceof AssignmentOperator1) this.visitAssignmentOperator1(<AssignmentOperator1> n, o);
            else if (n instanceof AssignmentOperator2) this.visitAssignmentOperator2(<AssignmentOperator2> n, o);
            else if (n instanceof AssignmentOperator3) this.visitAssignmentOperator3(<AssignmentOperator3> n, o);
            else if (n instanceof AssignmentOperator4) this.visitAssignmentOperator4(<AssignmentOperator4> n, o);
            else if (n instanceof AssignmentOperator5) this.visitAssignmentOperator5(<AssignmentOperator5> n, o);
            else if (n instanceof AssignmentOperator6) this.visitAssignmentOperator6(<AssignmentOperator6> n, o);
            else if (n instanceof AssignmentOperator7) this.visitAssignmentOperator7(<AssignmentOperator7> n, o);
            else if (n instanceof AssignmentOperator8) this.visitAssignmentOperator8(<AssignmentOperator8> n, o);
            else if (n instanceof AssignmentOperator9) this.visitAssignmentOperator9(<AssignmentOperator9> n, o);
            else if (n instanceof AssignmentOperator10) this.visitAssignmentOperator10(<AssignmentOperator10> n, o);
            else if (n instanceof AssignmentOperator11) this.visitAssignmentOperator11(<AssignmentOperator11> n, o);
            throw new Error("visit(" + n.toString() + ")");
        }
    }
    export abstract class AbstractResultVisitor implements ResultVisitor, ResultArgumentVisitor
    {
        public abstract  unimplementedVisitor(s : string) : any;

        public visitAstToken(n : AstToken, o? : any) : any{ return  this.unimplementedVisitor("visitAstToken(AstToken, any)"); }

        public visitidentifier(n : identifier, o? : any) : any{ return  this.unimplementedVisitor("visitidentifier(identifier, any)"); }

        public visitPrimitiveType(n : PrimitiveType, o? : any) : any{ return  this.unimplementedVisitor("visitPrimitiveType(PrimitiveType, any)"); }

        public visitClassType(n : ClassType, o? : any) : any{ return  this.unimplementedVisitor("visitClassType(ClassType, any)"); }

        public visitInterfaceType(n : InterfaceType, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceType(InterfaceType, any)"); }

        public visitTypeName(n : TypeName, o? : any) : any{ return  this.unimplementedVisitor("visitTypeName(TypeName, any)"); }

        public visitArrayType(n : ArrayType, o? : any) : any{ return  this.unimplementedVisitor("visitArrayType(ArrayType, any)"); }

        public visitTypeParameter(n : TypeParameter, o? : any) : any{ return  this.unimplementedVisitor("visitTypeParameter(TypeParameter, any)"); }

        public visitTypeBound(n : TypeBound, o? : any) : any{ return  this.unimplementedVisitor("visitTypeBound(TypeBound, any)"); }

        public visitAdditionalBoundList(n : AdditionalBoundList, o? : any) : any{ return  this.unimplementedVisitor("visitAdditionalBoundList(AdditionalBoundList, any)"); }

        public visitAdditionalBound(n : AdditionalBound, o? : any) : any{ return  this.unimplementedVisitor("visitAdditionalBound(AdditionalBound, any)"); }

        public visitTypeArguments(n : TypeArguments, o? : any) : any{ return  this.unimplementedVisitor("visitTypeArguments(TypeArguments, any)"); }

        public visitActualTypeArgumentList(n : ActualTypeArgumentList, o? : any) : any{ return  this.unimplementedVisitor("visitActualTypeArgumentList(ActualTypeArgumentList, any)"); }

        public visitWildcard(n : Wildcard, o? : any) : any{ return  this.unimplementedVisitor("visitWildcard(Wildcard, any)"); }

        public visitPackageName(n : PackageName, o? : any) : any{ return  this.unimplementedVisitor("visitPackageName(PackageName, any)"); }

        public visitExpressionName(n : ExpressionName, o? : any) : any{ return  this.unimplementedVisitor("visitExpressionName(ExpressionName, any)"); }

        public visitMethodName(n : MethodName, o? : any) : any{ return  this.unimplementedVisitor("visitMethodName(MethodName, any)"); }

        public visitPackageOrTypeName(n : PackageOrTypeName, o? : any) : any{ return  this.unimplementedVisitor("visitPackageOrTypeName(PackageOrTypeName, any)"); }

        public visitAmbiguousName(n : AmbiguousName, o? : any) : any{ return  this.unimplementedVisitor("visitAmbiguousName(AmbiguousName, any)"); }

        public visitCompilationUnit(n : CompilationUnit, o? : any) : any{ return  this.unimplementedVisitor("visitCompilationUnit(CompilationUnit, any)"); }

        public visitImportDeclarations(n : ImportDeclarations, o? : any) : any{ return  this.unimplementedVisitor("visitImportDeclarations(ImportDeclarations, any)"); }

        public visitTypeDeclarations(n : TypeDeclarations, o? : any) : any{ return  this.unimplementedVisitor("visitTypeDeclarations(TypeDeclarations, any)"); }

        public visitPackageDeclaration(n : PackageDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitPackageDeclaration(PackageDeclaration, any)"); }

        public visitSingleTypeImportDeclaration(n : SingleTypeImportDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitSingleTypeImportDeclaration(SingleTypeImportDeclaration, any)"); }

        public visitTypeImportOnDemandDeclaration(n : TypeImportOnDemandDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitTypeImportOnDemandDeclaration(TypeImportOnDemandDeclaration, any)"); }

        public visitSingleStaticImportDeclaration(n : SingleStaticImportDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitSingleStaticImportDeclaration(SingleStaticImportDeclaration, any)"); }

        public visitStaticImportOnDemandDeclaration(n : StaticImportOnDemandDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitStaticImportOnDemandDeclaration(StaticImportOnDemandDeclaration, any)"); }

        public visitTypeDeclaration(n : TypeDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitTypeDeclaration(TypeDeclaration, any)"); }

        public visitNormalClassDeclaration(n : NormalClassDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitNormalClassDeclaration(NormalClassDeclaration, any)"); }

        public visitClassModifiers(n : ClassModifiers, o? : any) : any{ return  this.unimplementedVisitor("visitClassModifiers(ClassModifiers, any)"); }

        public visitTypeParameters(n : TypeParameters, o? : any) : any{ return  this.unimplementedVisitor("visitTypeParameters(TypeParameters, any)"); }

        public visitTypeParameterList(n : TypeParameterList, o? : any) : any{ return  this.unimplementedVisitor("visitTypeParameterList(TypeParameterList, any)"); }

        public visitSuper(n : Super, o? : any) : any{ return  this.unimplementedVisitor("visitSuper(Super, any)"); }

        public visitInterfaces(n : Interfaces, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaces(Interfaces, any)"); }

        public visitInterfaceTypeList(n : InterfaceTypeList, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceTypeList(InterfaceTypeList, any)"); }

        public visitClassBody(n : ClassBody, o? : any) : any{ return  this.unimplementedVisitor("visitClassBody(ClassBody, any)"); }

        public visitClassBodyDeclarations(n : ClassBodyDeclarations, o? : any) : any{ return  this.unimplementedVisitor("visitClassBodyDeclarations(ClassBodyDeclarations, any)"); }

        public visitClassMemberDeclaration(n : ClassMemberDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitClassMemberDeclaration(ClassMemberDeclaration, any)"); }

        public visitFieldDeclaration(n : FieldDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitFieldDeclaration(FieldDeclaration, any)"); }

        public visitVariableDeclarators(n : VariableDeclarators, o? : any) : any{ return  this.unimplementedVisitor("visitVariableDeclarators(VariableDeclarators, any)"); }

        public visitVariableDeclarator(n : VariableDeclarator, o? : any) : any{ return  this.unimplementedVisitor("visitVariableDeclarator(VariableDeclarator, any)"); }

        public visitVariableDeclaratorId(n : VariableDeclaratorId, o? : any) : any{ return  this.unimplementedVisitor("visitVariableDeclaratorId(VariableDeclaratorId, any)"); }

        public visitFieldModifiers(n : FieldModifiers, o? : any) : any{ return  this.unimplementedVisitor("visitFieldModifiers(FieldModifiers, any)"); }

        public visitMethodDeclaration(n : MethodDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitMethodDeclaration(MethodDeclaration, any)"); }

        public visitMethodHeader(n : MethodHeader, o? : any) : any{ return  this.unimplementedVisitor("visitMethodHeader(MethodHeader, any)"); }

        public visitResultType(n : ResultType, o? : any) : any{ return  this.unimplementedVisitor("visitResultType(ResultType, any)"); }

        public visitFormalParameterList(n : FormalParameterList, o? : any) : any{ return  this.unimplementedVisitor("visitFormalParameterList(FormalParameterList, any)"); }

        public visitFormalParameters(n : FormalParameters, o? : any) : any{ return  this.unimplementedVisitor("visitFormalParameters(FormalParameters, any)"); }

        public visitFormalParameter(n : FormalParameter, o? : any) : any{ return  this.unimplementedVisitor("visitFormalParameter(FormalParameter, any)"); }

        public visitVariableModifiers(n : VariableModifiers, o? : any) : any{ return  this.unimplementedVisitor("visitVariableModifiers(VariableModifiers, any)"); }

        public visitVariableModifier(n : VariableModifier, o? : any) : any{ return  this.unimplementedVisitor("visitVariableModifier(VariableModifier, any)"); }

        public visitLastFormalParameter(n : LastFormalParameter, o? : any) : any{ return  this.unimplementedVisitor("visitLastFormalParameter(LastFormalParameter, any)"); }

        public visitMethodModifiers(n : MethodModifiers, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifiers(MethodModifiers, any)"); }

        public visitThrows(n : Throws, o? : any) : any{ return  this.unimplementedVisitor("visitThrows(Throws, any)"); }

        public visitExceptionTypeList(n : ExceptionTypeList, o? : any) : any{ return  this.unimplementedVisitor("visitExceptionTypeList(ExceptionTypeList, any)"); }

        public visitMethodBody(n : MethodBody, o? : any) : any{ return  this.unimplementedVisitor("visitMethodBody(MethodBody, any)"); }

        public visitStaticInitializer(n : StaticInitializer, o? : any) : any{ return  this.unimplementedVisitor("visitStaticInitializer(StaticInitializer, any)"); }

        public visitConstructorDeclaration(n : ConstructorDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitConstructorDeclaration(ConstructorDeclaration, any)"); }

        public visitConstructorDeclarator(n : ConstructorDeclarator, o? : any) : any{ return  this.unimplementedVisitor("visitConstructorDeclarator(ConstructorDeclarator, any)"); }

        public visitConstructorModifiers(n : ConstructorModifiers, o? : any) : any{ return  this.unimplementedVisitor("visitConstructorModifiers(ConstructorModifiers, any)"); }

        public visitConstructorBody(n : ConstructorBody, o? : any) : any{ return  this.unimplementedVisitor("visitConstructorBody(ConstructorBody, any)"); }

        public visitEnumDeclaration(n : EnumDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitEnumDeclaration(EnumDeclaration, any)"); }

        public visitEnumBody(n : EnumBody, o? : any) : any{ return  this.unimplementedVisitor("visitEnumBody(EnumBody, any)"); }

        public visitEnumConstants(n : EnumConstants, o? : any) : any{ return  this.unimplementedVisitor("visitEnumConstants(EnumConstants, any)"); }

        public visitEnumConstant(n : EnumConstant, o? : any) : any{ return  this.unimplementedVisitor("visitEnumConstant(EnumConstant, any)"); }

        public visitArguments(n : Arguments, o? : any) : any{ return  this.unimplementedVisitor("visitArguments(Arguments, any)"); }

        public visitEnumBodyDeclarations(n : EnumBodyDeclarations, o? : any) : any{ return  this.unimplementedVisitor("visitEnumBodyDeclarations(EnumBodyDeclarations, any)"); }

        public visitNormalInterfaceDeclaration(n : NormalInterfaceDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitNormalInterfaceDeclaration(NormalInterfaceDeclaration, any)"); }

        public visitInterfaceModifiers(n : InterfaceModifiers, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceModifiers(InterfaceModifiers, any)"); }

        public visitInterfaceBody(n : InterfaceBody, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceBody(InterfaceBody, any)"); }

        public visitInterfaceMemberDeclarations(n : InterfaceMemberDeclarations, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceMemberDeclarations(InterfaceMemberDeclarations, any)"); }

        public visitInterfaceMemberDeclaration(n : InterfaceMemberDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceMemberDeclaration(InterfaceMemberDeclaration, any)"); }

        public visitConstantDeclaration(n : ConstantDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitConstantDeclaration(ConstantDeclaration, any)"); }

        public visitConstantModifiers(n : ConstantModifiers, o? : any) : any{ return  this.unimplementedVisitor("visitConstantModifiers(ConstantModifiers, any)"); }

        public visitAbstractMethodDeclaration(n : AbstractMethodDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitAbstractMethodDeclaration(AbstractMethodDeclaration, any)"); }

        public visitAbstractMethodModifiers(n : AbstractMethodModifiers, o? : any) : any{ return  this.unimplementedVisitor("visitAbstractMethodModifiers(AbstractMethodModifiers, any)"); }

        public visitAnnotationTypeDeclaration(n : AnnotationTypeDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitAnnotationTypeDeclaration(AnnotationTypeDeclaration, any)"); }

        public visitAnnotationTypeBody(n : AnnotationTypeBody, o? : any) : any{ return  this.unimplementedVisitor("visitAnnotationTypeBody(AnnotationTypeBody, any)"); }

        public visitAnnotationTypeElementDeclarations(n : AnnotationTypeElementDeclarations, o? : any) : any{ return  this.unimplementedVisitor("visitAnnotationTypeElementDeclarations(AnnotationTypeElementDeclarations, any)"); }

        public visitDefaultValue(n : DefaultValue, o? : any) : any{ return  this.unimplementedVisitor("visitDefaultValue(DefaultValue, any)"); }

        public visitAnnotations(n : Annotations, o? : any) : any{ return  this.unimplementedVisitor("visitAnnotations(Annotations, any)"); }

        public visitNormalAnnotation(n : NormalAnnotation, o? : any) : any{ return  this.unimplementedVisitor("visitNormalAnnotation(NormalAnnotation, any)"); }

        public visitElementValuePairs(n : ElementValuePairs, o? : any) : any{ return  this.unimplementedVisitor("visitElementValuePairs(ElementValuePairs, any)"); }

        public visitElementValuePair(n : ElementValuePair, o? : any) : any{ return  this.unimplementedVisitor("visitElementValuePair(ElementValuePair, any)"); }

        public visitElementValueArrayInitializer(n : ElementValueArrayInitializer, o? : any) : any{ return  this.unimplementedVisitor("visitElementValueArrayInitializer(ElementValueArrayInitializer, any)"); }

        public visitElementValues(n : ElementValues, o? : any) : any{ return  this.unimplementedVisitor("visitElementValues(ElementValues, any)"); }

        public visitMarkerAnnotation(n : MarkerAnnotation, o? : any) : any{ return  this.unimplementedVisitor("visitMarkerAnnotation(MarkerAnnotation, any)"); }

        public visitSingleElementAnnotation(n : SingleElementAnnotation, o? : any) : any{ return  this.unimplementedVisitor("visitSingleElementAnnotation(SingleElementAnnotation, any)"); }

        public visitArrayInitializer(n : ArrayInitializer, o? : any) : any{ return  this.unimplementedVisitor("visitArrayInitializer(ArrayInitializer, any)"); }

        public visitVariableInitializers(n : VariableInitializers, o? : any) : any{ return  this.unimplementedVisitor("visitVariableInitializers(VariableInitializers, any)"); }

        public visitBlock(n : Block, o? : any) : any{ return  this.unimplementedVisitor("visitBlock(Block, any)"); }

        public visitBlockStatements(n : BlockStatements, o? : any) : any{ return  this.unimplementedVisitor("visitBlockStatements(BlockStatements, any)"); }

        public visitLocalVariableDeclarationStatement(n : LocalVariableDeclarationStatement, o? : any) : any{ return  this.unimplementedVisitor("visitLocalVariableDeclarationStatement(LocalVariableDeclarationStatement, any)"); }

        public visitLocalVariableDeclaration(n : LocalVariableDeclaration, o? : any) : any{ return  this.unimplementedVisitor("visitLocalVariableDeclaration(LocalVariableDeclaration, any)"); }

        public visitIfThenStatement(n : IfThenStatement, o? : any) : any{ return  this.unimplementedVisitor("visitIfThenStatement(IfThenStatement, any)"); }

        public visitIfThenElseStatement(n : IfThenElseStatement, o? : any) : any{ return  this.unimplementedVisitor("visitIfThenElseStatement(IfThenElseStatement, any)"); }

        public visitIfThenElseStatementNoShortIf(n : IfThenElseStatementNoShortIf, o? : any) : any{ return  this.unimplementedVisitor("visitIfThenElseStatementNoShortIf(IfThenElseStatementNoShortIf, any)"); }

        public visitEmptyStatement(n : EmptyStatement, o? : any) : any{ return  this.unimplementedVisitor("visitEmptyStatement(EmptyStatement, any)"); }

        public visitLabeledStatement(n : LabeledStatement, o? : any) : any{ return  this.unimplementedVisitor("visitLabeledStatement(LabeledStatement, any)"); }

        public visitLabeledStatementNoShortIf(n : LabeledStatementNoShortIf, o? : any) : any{ return  this.unimplementedVisitor("visitLabeledStatementNoShortIf(LabeledStatementNoShortIf, any)"); }

        public visitExpressionStatement(n : ExpressionStatement, o? : any) : any{ return  this.unimplementedVisitor("visitExpressionStatement(ExpressionStatement, any)"); }

        public visitSwitchStatement(n : SwitchStatement, o? : any) : any{ return  this.unimplementedVisitor("visitSwitchStatement(SwitchStatement, any)"); }

        public visitSwitchBlock(n : SwitchBlock, o? : any) : any{ return  this.unimplementedVisitor("visitSwitchBlock(SwitchBlock, any)"); }

        public visitSwitchBlockStatementGroups(n : SwitchBlockStatementGroups, o? : any) : any{ return  this.unimplementedVisitor("visitSwitchBlockStatementGroups(SwitchBlockStatementGroups, any)"); }

        public visitSwitchBlockStatementGroup(n : SwitchBlockStatementGroup, o? : any) : any{ return  this.unimplementedVisitor("visitSwitchBlockStatementGroup(SwitchBlockStatementGroup, any)"); }

        public visitSwitchLabels(n : SwitchLabels, o? : any) : any{ return  this.unimplementedVisitor("visitSwitchLabels(SwitchLabels, any)"); }

        public visitWhileStatement(n : WhileStatement, o? : any) : any{ return  this.unimplementedVisitor("visitWhileStatement(WhileStatement, any)"); }

        public visitWhileStatementNoShortIf(n : WhileStatementNoShortIf, o? : any) : any{ return  this.unimplementedVisitor("visitWhileStatementNoShortIf(WhileStatementNoShortIf, any)"); }

        public visitDoStatement(n : DoStatement, o? : any) : any{ return  this.unimplementedVisitor("visitDoStatement(DoStatement, any)"); }

        public visitBasicForStatement(n : BasicForStatement, o? : any) : any{ return  this.unimplementedVisitor("visitBasicForStatement(BasicForStatement, any)"); }

        public visitForStatementNoShortIf(n : ForStatementNoShortIf, o? : any) : any{ return  this.unimplementedVisitor("visitForStatementNoShortIf(ForStatementNoShortIf, any)"); }

        public visitStatementExpressionList(n : StatementExpressionList, o? : any) : any{ return  this.unimplementedVisitor("visitStatementExpressionList(StatementExpressionList, any)"); }

        public visitEnhancedForStatement(n : EnhancedForStatement, o? : any) : any{ return  this.unimplementedVisitor("visitEnhancedForStatement(EnhancedForStatement, any)"); }

        public visitBreakStatement(n : BreakStatement, o? : any) : any{ return  this.unimplementedVisitor("visitBreakStatement(BreakStatement, any)"); }

        public visitContinueStatement(n : ContinueStatement, o? : any) : any{ return  this.unimplementedVisitor("visitContinueStatement(ContinueStatement, any)"); }

        public visitReturnStatement(n : ReturnStatement, o? : any) : any{ return  this.unimplementedVisitor("visitReturnStatement(ReturnStatement, any)"); }

        public visitThrowStatement(n : ThrowStatement, o? : any) : any{ return  this.unimplementedVisitor("visitThrowStatement(ThrowStatement, any)"); }

        public visitSynchronizedStatement(n : SynchronizedStatement, o? : any) : any{ return  this.unimplementedVisitor("visitSynchronizedStatement(SynchronizedStatement, any)"); }

        public visitCatches(n : Catches, o? : any) : any{ return  this.unimplementedVisitor("visitCatches(Catches, any)"); }

        public visitCatchClause(n : CatchClause, o? : any) : any{ return  this.unimplementedVisitor("visitCatchClause(CatchClause, any)"); }

        public visitFinally(n : Finally, o? : any) : any{ return  this.unimplementedVisitor("visitFinally(Finally, any)"); }

        public visitArgumentList(n : ArgumentList, o? : any) : any{ return  this.unimplementedVisitor("visitArgumentList(ArgumentList, any)"); }

        public visitDimExprs(n : DimExprs, o? : any) : any{ return  this.unimplementedVisitor("visitDimExprs(DimExprs, any)"); }

        public visitDimExpr(n : DimExpr, o? : any) : any{ return  this.unimplementedVisitor("visitDimExpr(DimExpr, any)"); }

        public visitPostIncrementExpression(n : PostIncrementExpression, o? : any) : any{ return  this.unimplementedVisitor("visitPostIncrementExpression(PostIncrementExpression, any)"); }

        public visitPostDecrementExpression(n : PostDecrementExpression, o? : any) : any{ return  this.unimplementedVisitor("visitPostDecrementExpression(PostDecrementExpression, any)"); }

        public visitPreIncrementExpression(n : PreIncrementExpression, o? : any) : any{ return  this.unimplementedVisitor("visitPreIncrementExpression(PreIncrementExpression, any)"); }

        public visitPreDecrementExpression(n : PreDecrementExpression, o? : any) : any{ return  this.unimplementedVisitor("visitPreDecrementExpression(PreDecrementExpression, any)"); }

        public visitAndExpression(n : AndExpression, o? : any) : any{ return  this.unimplementedVisitor("visitAndExpression(AndExpression, any)"); }

        public visitExclusiveOrExpression(n : ExclusiveOrExpression, o? : any) : any{ return  this.unimplementedVisitor("visitExclusiveOrExpression(ExclusiveOrExpression, any)"); }

        public visitInclusiveOrExpression(n : InclusiveOrExpression, o? : any) : any{ return  this.unimplementedVisitor("visitInclusiveOrExpression(InclusiveOrExpression, any)"); }

        public visitConditionalAndExpression(n : ConditionalAndExpression, o? : any) : any{ return  this.unimplementedVisitor("visitConditionalAndExpression(ConditionalAndExpression, any)"); }

        public visitConditionalOrExpression(n : ConditionalOrExpression, o? : any) : any{ return  this.unimplementedVisitor("visitConditionalOrExpression(ConditionalOrExpression, any)"); }

        public visitConditionalExpression(n : ConditionalExpression, o? : any) : any{ return  this.unimplementedVisitor("visitConditionalExpression(ConditionalExpression, any)"); }

        public visitAssignment(n : Assignment, o? : any) : any{ return  this.unimplementedVisitor("visitAssignment(Assignment, any)"); }

        public visitCommaopt(n : Commaopt, o? : any) : any{ return  this.unimplementedVisitor("visitCommaopt(Commaopt, any)"); }

        public visitEllipsisopt(n : Ellipsisopt, o? : any) : any{ return  this.unimplementedVisitor("visitEllipsisopt(Ellipsisopt, any)"); }

        public visitLPGUserAction0(n : LPGUserAction0, o? : any) : any{ return  this.unimplementedVisitor("visitLPGUserAction0(LPGUserAction0, any)"); }

        public visitLPGUserAction1(n : LPGUserAction1, o? : any) : any{ return  this.unimplementedVisitor("visitLPGUserAction1(LPGUserAction1, any)"); }

        public visitLPGUserAction2(n : LPGUserAction2, o? : any) : any{ return  this.unimplementedVisitor("visitLPGUserAction2(LPGUserAction2, any)"); }

        public visitLPGUserAction3(n : LPGUserAction3, o? : any) : any{ return  this.unimplementedVisitor("visitLPGUserAction3(LPGUserAction3, any)"); }

        public visitLPGUserAction4(n : LPGUserAction4, o? : any) : any{ return  this.unimplementedVisitor("visitLPGUserAction4(LPGUserAction4, any)"); }

        public visitIntegralType0(n : IntegralType0, o? : any) : any{ return  this.unimplementedVisitor("visitIntegralType0(IntegralType0, any)"); }

        public visitIntegralType1(n : IntegralType1, o? : any) : any{ return  this.unimplementedVisitor("visitIntegralType1(IntegralType1, any)"); }

        public visitIntegralType2(n : IntegralType2, o? : any) : any{ return  this.unimplementedVisitor("visitIntegralType2(IntegralType2, any)"); }

        public visitIntegralType3(n : IntegralType3, o? : any) : any{ return  this.unimplementedVisitor("visitIntegralType3(IntegralType3, any)"); }

        public visitIntegralType4(n : IntegralType4, o? : any) : any{ return  this.unimplementedVisitor("visitIntegralType4(IntegralType4, any)"); }

        public visitFloatingPointType0(n : FloatingPointType0, o? : any) : any{ return  this.unimplementedVisitor("visitFloatingPointType0(FloatingPointType0, any)"); }

        public visitFloatingPointType1(n : FloatingPointType1, o? : any) : any{ return  this.unimplementedVisitor("visitFloatingPointType1(FloatingPointType1, any)"); }

        public visitWildcardBounds0(n : WildcardBounds0, o? : any) : any{ return  this.unimplementedVisitor("visitWildcardBounds0(WildcardBounds0, any)"); }

        public visitWildcardBounds1(n : WildcardBounds1, o? : any) : any{ return  this.unimplementedVisitor("visitWildcardBounds1(WildcardBounds1, any)"); }

        public visitClassModifier0(n : ClassModifier0, o? : any) : any{ return  this.unimplementedVisitor("visitClassModifier0(ClassModifier0, any)"); }

        public visitClassModifier1(n : ClassModifier1, o? : any) : any{ return  this.unimplementedVisitor("visitClassModifier1(ClassModifier1, any)"); }

        public visitClassModifier2(n : ClassModifier2, o? : any) : any{ return  this.unimplementedVisitor("visitClassModifier2(ClassModifier2, any)"); }

        public visitClassModifier3(n : ClassModifier3, o? : any) : any{ return  this.unimplementedVisitor("visitClassModifier3(ClassModifier3, any)"); }

        public visitClassModifier4(n : ClassModifier4, o? : any) : any{ return  this.unimplementedVisitor("visitClassModifier4(ClassModifier4, any)"); }

        public visitClassModifier5(n : ClassModifier5, o? : any) : any{ return  this.unimplementedVisitor("visitClassModifier5(ClassModifier5, any)"); }

        public visitClassModifier6(n : ClassModifier6, o? : any) : any{ return  this.unimplementedVisitor("visitClassModifier6(ClassModifier6, any)"); }

        public visitFieldModifier0(n : FieldModifier0, o? : any) : any{ return  this.unimplementedVisitor("visitFieldModifier0(FieldModifier0, any)"); }

        public visitFieldModifier1(n : FieldModifier1, o? : any) : any{ return  this.unimplementedVisitor("visitFieldModifier1(FieldModifier1, any)"); }

        public visitFieldModifier2(n : FieldModifier2, o? : any) : any{ return  this.unimplementedVisitor("visitFieldModifier2(FieldModifier2, any)"); }

        public visitFieldModifier3(n : FieldModifier3, o? : any) : any{ return  this.unimplementedVisitor("visitFieldModifier3(FieldModifier3, any)"); }

        public visitFieldModifier4(n : FieldModifier4, o? : any) : any{ return  this.unimplementedVisitor("visitFieldModifier4(FieldModifier4, any)"); }

        public visitFieldModifier5(n : FieldModifier5, o? : any) : any{ return  this.unimplementedVisitor("visitFieldModifier5(FieldModifier5, any)"); }

        public visitFieldModifier6(n : FieldModifier6, o? : any) : any{ return  this.unimplementedVisitor("visitFieldModifier6(FieldModifier6, any)"); }

        public visitMethodDeclarator0(n : MethodDeclarator0, o? : any) : any{ return  this.unimplementedVisitor("visitMethodDeclarator0(MethodDeclarator0, any)"); }

        public visitMethodDeclarator1(n : MethodDeclarator1, o? : any) : any{ return  this.unimplementedVisitor("visitMethodDeclarator1(MethodDeclarator1, any)"); }

        public visitMethodModifier0(n : MethodModifier0, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifier0(MethodModifier0, any)"); }

        public visitMethodModifier1(n : MethodModifier1, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifier1(MethodModifier1, any)"); }

        public visitMethodModifier2(n : MethodModifier2, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifier2(MethodModifier2, any)"); }

        public visitMethodModifier3(n : MethodModifier3, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifier3(MethodModifier3, any)"); }

        public visitMethodModifier4(n : MethodModifier4, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifier4(MethodModifier4, any)"); }

        public visitMethodModifier5(n : MethodModifier5, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifier5(MethodModifier5, any)"); }

        public visitMethodModifier6(n : MethodModifier6, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifier6(MethodModifier6, any)"); }

        public visitMethodModifier7(n : MethodModifier7, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifier7(MethodModifier7, any)"); }

        public visitMethodModifier8(n : MethodModifier8, o? : any) : any{ return  this.unimplementedVisitor("visitMethodModifier8(MethodModifier8, any)"); }

        public visitConstructorModifier0(n : ConstructorModifier0, o? : any) : any{ return  this.unimplementedVisitor("visitConstructorModifier0(ConstructorModifier0, any)"); }

        public visitConstructorModifier1(n : ConstructorModifier1, o? : any) : any{ return  this.unimplementedVisitor("visitConstructorModifier1(ConstructorModifier1, any)"); }

        public visitConstructorModifier2(n : ConstructorModifier2, o? : any) : any{ return  this.unimplementedVisitor("visitConstructorModifier2(ConstructorModifier2, any)"); }

        public visitExplicitConstructorInvocation0(n : ExplicitConstructorInvocation0, o? : any) : any{ return  this.unimplementedVisitor("visitExplicitConstructorInvocation0(ExplicitConstructorInvocation0, any)"); }

        public visitExplicitConstructorInvocation1(n : ExplicitConstructorInvocation1, o? : any) : any{ return  this.unimplementedVisitor("visitExplicitConstructorInvocation1(ExplicitConstructorInvocation1, any)"); }

        public visitExplicitConstructorInvocation2(n : ExplicitConstructorInvocation2, o? : any) : any{ return  this.unimplementedVisitor("visitExplicitConstructorInvocation2(ExplicitConstructorInvocation2, any)"); }

        public visitInterfaceModifier0(n : InterfaceModifier0, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceModifier0(InterfaceModifier0, any)"); }

        public visitInterfaceModifier1(n : InterfaceModifier1, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceModifier1(InterfaceModifier1, any)"); }

        public visitInterfaceModifier2(n : InterfaceModifier2, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceModifier2(InterfaceModifier2, any)"); }

        public visitInterfaceModifier3(n : InterfaceModifier3, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceModifier3(InterfaceModifier3, any)"); }

        public visitInterfaceModifier4(n : InterfaceModifier4, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceModifier4(InterfaceModifier4, any)"); }

        public visitInterfaceModifier5(n : InterfaceModifier5, o? : any) : any{ return  this.unimplementedVisitor("visitInterfaceModifier5(InterfaceModifier5, any)"); }

        public visitExtendsInterfaces0(n : ExtendsInterfaces0, o? : any) : any{ return  this.unimplementedVisitor("visitExtendsInterfaces0(ExtendsInterfaces0, any)"); }

        public visitExtendsInterfaces1(n : ExtendsInterfaces1, o? : any) : any{ return  this.unimplementedVisitor("visitExtendsInterfaces1(ExtendsInterfaces1, any)"); }

        public visitConstantModifier0(n : ConstantModifier0, o? : any) : any{ return  this.unimplementedVisitor("visitConstantModifier0(ConstantModifier0, any)"); }

        public visitConstantModifier1(n : ConstantModifier1, o? : any) : any{ return  this.unimplementedVisitor("visitConstantModifier1(ConstantModifier1, any)"); }

        public visitConstantModifier2(n : ConstantModifier2, o? : any) : any{ return  this.unimplementedVisitor("visitConstantModifier2(ConstantModifier2, any)"); }

        public visitAbstractMethodModifier0(n : AbstractMethodModifier0, o? : any) : any{ return  this.unimplementedVisitor("visitAbstractMethodModifier0(AbstractMethodModifier0, any)"); }

        public visitAbstractMethodModifier1(n : AbstractMethodModifier1, o? : any) : any{ return  this.unimplementedVisitor("visitAbstractMethodModifier1(AbstractMethodModifier1, any)"); }

        public visitAnnotationTypeElementDeclaration0(n : AnnotationTypeElementDeclaration0, o? : any) : any{ return  this.unimplementedVisitor("visitAnnotationTypeElementDeclaration0(AnnotationTypeElementDeclaration0, any)"); }

        public visitAnnotationTypeElementDeclaration1(n : AnnotationTypeElementDeclaration1, o? : any) : any{ return  this.unimplementedVisitor("visitAnnotationTypeElementDeclaration1(AnnotationTypeElementDeclaration1, any)"); }

        public visitAssertStatement0(n : AssertStatement0, o? : any) : any{ return  this.unimplementedVisitor("visitAssertStatement0(AssertStatement0, any)"); }

        public visitAssertStatement1(n : AssertStatement1, o? : any) : any{ return  this.unimplementedVisitor("visitAssertStatement1(AssertStatement1, any)"); }

        public visitSwitchLabel0(n : SwitchLabel0, o? : any) : any{ return  this.unimplementedVisitor("visitSwitchLabel0(SwitchLabel0, any)"); }

        public visitSwitchLabel1(n : SwitchLabel1, o? : any) : any{ return  this.unimplementedVisitor("visitSwitchLabel1(SwitchLabel1, any)"); }

        public visitSwitchLabel2(n : SwitchLabel2, o? : any) : any{ return  this.unimplementedVisitor("visitSwitchLabel2(SwitchLabel2, any)"); }

        public visitTryStatement0(n : TryStatement0, o? : any) : any{ return  this.unimplementedVisitor("visitTryStatement0(TryStatement0, any)"); }

        public visitTryStatement1(n : TryStatement1, o? : any) : any{ return  this.unimplementedVisitor("visitTryStatement1(TryStatement1, any)"); }

        public visitPrimaryNoNewArray0(n : PrimaryNoNewArray0, o? : any) : any{ return  this.unimplementedVisitor("visitPrimaryNoNewArray0(PrimaryNoNewArray0, any)"); }

        public visitPrimaryNoNewArray1(n : PrimaryNoNewArray1, o? : any) : any{ return  this.unimplementedVisitor("visitPrimaryNoNewArray1(PrimaryNoNewArray1, any)"); }

        public visitPrimaryNoNewArray2(n : PrimaryNoNewArray2, o? : any) : any{ return  this.unimplementedVisitor("visitPrimaryNoNewArray2(PrimaryNoNewArray2, any)"); }

        public visitPrimaryNoNewArray3(n : PrimaryNoNewArray3, o? : any) : any{ return  this.unimplementedVisitor("visitPrimaryNoNewArray3(PrimaryNoNewArray3, any)"); }

        public visitPrimaryNoNewArray4(n : PrimaryNoNewArray4, o? : any) : any{ return  this.unimplementedVisitor("visitPrimaryNoNewArray4(PrimaryNoNewArray4, any)"); }

        public visitLiteral0(n : Literal0, o? : any) : any{ return  this.unimplementedVisitor("visitLiteral0(Literal0, any)"); }

        public visitLiteral1(n : Literal1, o? : any) : any{ return  this.unimplementedVisitor("visitLiteral1(Literal1, any)"); }

        public visitLiteral2(n : Literal2, o? : any) : any{ return  this.unimplementedVisitor("visitLiteral2(Literal2, any)"); }

        public visitLiteral3(n : Literal3, o? : any) : any{ return  this.unimplementedVisitor("visitLiteral3(Literal3, any)"); }

        public visitLiteral4(n : Literal4, o? : any) : any{ return  this.unimplementedVisitor("visitLiteral4(Literal4, any)"); }

        public visitLiteral5(n : Literal5, o? : any) : any{ return  this.unimplementedVisitor("visitLiteral5(Literal5, any)"); }

        public visitLiteral6(n : Literal6, o? : any) : any{ return  this.unimplementedVisitor("visitLiteral6(Literal6, any)"); }

        public visitBooleanLiteral0(n : BooleanLiteral0, o? : any) : any{ return  this.unimplementedVisitor("visitBooleanLiteral0(BooleanLiteral0, any)"); }

        public visitBooleanLiteral1(n : BooleanLiteral1, o? : any) : any{ return  this.unimplementedVisitor("visitBooleanLiteral1(BooleanLiteral1, any)"); }

        public visitClassInstanceCreationExpression0(n : ClassInstanceCreationExpression0, o? : any) : any{ return  this.unimplementedVisitor("visitClassInstanceCreationExpression0(ClassInstanceCreationExpression0, any)"); }

        public visitClassInstanceCreationExpression1(n : ClassInstanceCreationExpression1, o? : any) : any{ return  this.unimplementedVisitor("visitClassInstanceCreationExpression1(ClassInstanceCreationExpression1, any)"); }

        public visitArrayCreationExpression0(n : ArrayCreationExpression0, o? : any) : any{ return  this.unimplementedVisitor("visitArrayCreationExpression0(ArrayCreationExpression0, any)"); }

        public visitArrayCreationExpression1(n : ArrayCreationExpression1, o? : any) : any{ return  this.unimplementedVisitor("visitArrayCreationExpression1(ArrayCreationExpression1, any)"); }

        public visitArrayCreationExpression2(n : ArrayCreationExpression2, o? : any) : any{ return  this.unimplementedVisitor("visitArrayCreationExpression2(ArrayCreationExpression2, any)"); }

        public visitArrayCreationExpression3(n : ArrayCreationExpression3, o? : any) : any{ return  this.unimplementedVisitor("visitArrayCreationExpression3(ArrayCreationExpression3, any)"); }

        public visitDims0(n : Dims0, o? : any) : any{ return  this.unimplementedVisitor("visitDims0(Dims0, any)"); }

        public visitDims1(n : Dims1, o? : any) : any{ return  this.unimplementedVisitor("visitDims1(Dims1, any)"); }

        public visitFieldAccess0(n : FieldAccess0, o? : any) : any{ return  this.unimplementedVisitor("visitFieldAccess0(FieldAccess0, any)"); }

        public visitFieldAccess1(n : FieldAccess1, o? : any) : any{ return  this.unimplementedVisitor("visitFieldAccess1(FieldAccess1, any)"); }

        public visitFieldAccess2(n : FieldAccess2, o? : any) : any{ return  this.unimplementedVisitor("visitFieldAccess2(FieldAccess2, any)"); }

        public visitMethodInvocation0(n : MethodInvocation0, o? : any) : any{ return  this.unimplementedVisitor("visitMethodInvocation0(MethodInvocation0, any)"); }

        public visitMethodInvocation1(n : MethodInvocation1, o? : any) : any{ return  this.unimplementedVisitor("visitMethodInvocation1(MethodInvocation1, any)"); }

        public visitMethodInvocation2(n : MethodInvocation2, o? : any) : any{ return  this.unimplementedVisitor("visitMethodInvocation2(MethodInvocation2, any)"); }

        public visitMethodInvocation3(n : MethodInvocation3, o? : any) : any{ return  this.unimplementedVisitor("visitMethodInvocation3(MethodInvocation3, any)"); }

        public visitMethodInvocation4(n : MethodInvocation4, o? : any) : any{ return  this.unimplementedVisitor("visitMethodInvocation4(MethodInvocation4, any)"); }

        public visitArrayAccess0(n : ArrayAccess0, o? : any) : any{ return  this.unimplementedVisitor("visitArrayAccess0(ArrayAccess0, any)"); }

        public visitArrayAccess1(n : ArrayAccess1, o? : any) : any{ return  this.unimplementedVisitor("visitArrayAccess1(ArrayAccess1, any)"); }

        public visitUnaryExpression0(n : UnaryExpression0, o? : any) : any{ return  this.unimplementedVisitor("visitUnaryExpression0(UnaryExpression0, any)"); }

        public visitUnaryExpression1(n : UnaryExpression1, o? : any) : any{ return  this.unimplementedVisitor("visitUnaryExpression1(UnaryExpression1, any)"); }

        public visitUnaryExpressionNotPlusMinus0(n : UnaryExpressionNotPlusMinus0, o? : any) : any{ return  this.unimplementedVisitor("visitUnaryExpressionNotPlusMinus0(UnaryExpressionNotPlusMinus0, any)"); }

        public visitUnaryExpressionNotPlusMinus1(n : UnaryExpressionNotPlusMinus1, o? : any) : any{ return  this.unimplementedVisitor("visitUnaryExpressionNotPlusMinus1(UnaryExpressionNotPlusMinus1, any)"); }

        public visitCastExpression0(n : CastExpression0, o? : any) : any{ return  this.unimplementedVisitor("visitCastExpression0(CastExpression0, any)"); }

        public visitCastExpression1(n : CastExpression1, o? : any) : any{ return  this.unimplementedVisitor("visitCastExpression1(CastExpression1, any)"); }

        public visitMultiplicativeExpression0(n : MultiplicativeExpression0, o? : any) : any{ return  this.unimplementedVisitor("visitMultiplicativeExpression0(MultiplicativeExpression0, any)"); }

        public visitMultiplicativeExpression1(n : MultiplicativeExpression1, o? : any) : any{ return  this.unimplementedVisitor("visitMultiplicativeExpression1(MultiplicativeExpression1, any)"); }

        public visitMultiplicativeExpression2(n : MultiplicativeExpression2, o? : any) : any{ return  this.unimplementedVisitor("visitMultiplicativeExpression2(MultiplicativeExpression2, any)"); }

        public visitAdditiveExpression0(n : AdditiveExpression0, o? : any) : any{ return  this.unimplementedVisitor("visitAdditiveExpression0(AdditiveExpression0, any)"); }

        public visitAdditiveExpression1(n : AdditiveExpression1, o? : any) : any{ return  this.unimplementedVisitor("visitAdditiveExpression1(AdditiveExpression1, any)"); }

        public visitShiftExpression0(n : ShiftExpression0, o? : any) : any{ return  this.unimplementedVisitor("visitShiftExpression0(ShiftExpression0, any)"); }

        public visitShiftExpression1(n : ShiftExpression1, o? : any) : any{ return  this.unimplementedVisitor("visitShiftExpression1(ShiftExpression1, any)"); }

        public visitShiftExpression2(n : ShiftExpression2, o? : any) : any{ return  this.unimplementedVisitor("visitShiftExpression2(ShiftExpression2, any)"); }

        public visitRelationalExpression0(n : RelationalExpression0, o? : any) : any{ return  this.unimplementedVisitor("visitRelationalExpression0(RelationalExpression0, any)"); }

        public visitRelationalExpression1(n : RelationalExpression1, o? : any) : any{ return  this.unimplementedVisitor("visitRelationalExpression1(RelationalExpression1, any)"); }

        public visitRelationalExpression2(n : RelationalExpression2, o? : any) : any{ return  this.unimplementedVisitor("visitRelationalExpression2(RelationalExpression2, any)"); }

        public visitRelationalExpression3(n : RelationalExpression3, o? : any) : any{ return  this.unimplementedVisitor("visitRelationalExpression3(RelationalExpression3, any)"); }

        public visitRelationalExpression4(n : RelationalExpression4, o? : any) : any{ return  this.unimplementedVisitor("visitRelationalExpression4(RelationalExpression4, any)"); }

        public visitEqualityExpression0(n : EqualityExpression0, o? : any) : any{ return  this.unimplementedVisitor("visitEqualityExpression0(EqualityExpression0, any)"); }

        public visitEqualityExpression1(n : EqualityExpression1, o? : any) : any{ return  this.unimplementedVisitor("visitEqualityExpression1(EqualityExpression1, any)"); }

        public visitAssignmentOperator0(n : AssignmentOperator0, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator0(AssignmentOperator0, any)"); }

        public visitAssignmentOperator1(n : AssignmentOperator1, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator1(AssignmentOperator1, any)"); }

        public visitAssignmentOperator2(n : AssignmentOperator2, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator2(AssignmentOperator2, any)"); }

        public visitAssignmentOperator3(n : AssignmentOperator3, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator3(AssignmentOperator3, any)"); }

        public visitAssignmentOperator4(n : AssignmentOperator4, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator4(AssignmentOperator4, any)"); }

        public visitAssignmentOperator5(n : AssignmentOperator5, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator5(AssignmentOperator5, any)"); }

        public visitAssignmentOperator6(n : AssignmentOperator6, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator6(AssignmentOperator6, any)"); }

        public visitAssignmentOperator7(n : AssignmentOperator7, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator7(AssignmentOperator7, any)"); }

        public visitAssignmentOperator8(n : AssignmentOperator8, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator8(AssignmentOperator8, any)"); }

        public visitAssignmentOperator9(n : AssignmentOperator9, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator9(AssignmentOperator9, any)"); }

        public visitAssignmentOperator10(n : AssignmentOperator10, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator10(AssignmentOperator10, any)"); }

        public visitAssignmentOperator11(n : AssignmentOperator11, o? : any) : any{ return  this.unimplementedVisitor("visitAssignmentOperator11(AssignmentOperator11, any)"); }


        public visit(n : Ast, o? : any) : any
        {
            if (n instanceof AstToken) return this.visitAstToken(<AstToken> n, o);
            else if (n instanceof identifier) return this.visitidentifier(<identifier> n, o);
            else if (n instanceof PrimitiveType) return this.visitPrimitiveType(<PrimitiveType> n, o);
            else if (n instanceof ClassType) return this.visitClassType(<ClassType> n, o);
            else if (n instanceof InterfaceType) return this.visitInterfaceType(<InterfaceType> n, o);
            else if (n instanceof TypeName) return this.visitTypeName(<TypeName> n, o);
            else if (n instanceof ArrayType) return this.visitArrayType(<ArrayType> n, o);
            else if (n instanceof TypeParameter) return this.visitTypeParameter(<TypeParameter> n, o);
            else if (n instanceof TypeBound) return this.visitTypeBound(<TypeBound> n, o);
            else if (n instanceof AdditionalBoundList) return this.visitAdditionalBoundList(<AdditionalBoundList> n, o);
            else if (n instanceof AdditionalBound) return this.visitAdditionalBound(<AdditionalBound> n, o);
            else if (n instanceof TypeArguments) return this.visitTypeArguments(<TypeArguments> n, o);
            else if (n instanceof ActualTypeArgumentList) return this.visitActualTypeArgumentList(<ActualTypeArgumentList> n, o);
            else if (n instanceof Wildcard) return this.visitWildcard(<Wildcard> n, o);
            else if (n instanceof PackageName) return this.visitPackageName(<PackageName> n, o);
            else if (n instanceof ExpressionName) return this.visitExpressionName(<ExpressionName> n, o);
            else if (n instanceof MethodName) return this.visitMethodName(<MethodName> n, o);
            else if (n instanceof PackageOrTypeName) return this.visitPackageOrTypeName(<PackageOrTypeName> n, o);
            else if (n instanceof AmbiguousName) return this.visitAmbiguousName(<AmbiguousName> n, o);
            else if (n instanceof CompilationUnit) return this.visitCompilationUnit(<CompilationUnit> n, o);
            else if (n instanceof ImportDeclarations) return this.visitImportDeclarations(<ImportDeclarations> n, o);
            else if (n instanceof TypeDeclarations) return this.visitTypeDeclarations(<TypeDeclarations> n, o);
            else if (n instanceof PackageDeclaration) return this.visitPackageDeclaration(<PackageDeclaration> n, o);
            else if (n instanceof SingleTypeImportDeclaration) return this.visitSingleTypeImportDeclaration(<SingleTypeImportDeclaration> n, o);
            else if (n instanceof TypeImportOnDemandDeclaration) return this.visitTypeImportOnDemandDeclaration(<TypeImportOnDemandDeclaration> n, o);
            else if (n instanceof SingleStaticImportDeclaration) return this.visitSingleStaticImportDeclaration(<SingleStaticImportDeclaration> n, o);
            else if (n instanceof StaticImportOnDemandDeclaration) return this.visitStaticImportOnDemandDeclaration(<StaticImportOnDemandDeclaration> n, o);
            else if (n instanceof TypeDeclaration) return this.visitTypeDeclaration(<TypeDeclaration> n, o);
            else if (n instanceof NormalClassDeclaration) return this.visitNormalClassDeclaration(<NormalClassDeclaration> n, o);
            else if (n instanceof ClassModifiers) return this.visitClassModifiers(<ClassModifiers> n, o);
            else if (n instanceof TypeParameters) return this.visitTypeParameters(<TypeParameters> n, o);
            else if (n instanceof TypeParameterList) return this.visitTypeParameterList(<TypeParameterList> n, o);
            else if (n instanceof Super) return this.visitSuper(<Super> n, o);
            else if (n instanceof Interfaces) return this.visitInterfaces(<Interfaces> n, o);
            else if (n instanceof InterfaceTypeList) return this.visitInterfaceTypeList(<InterfaceTypeList> n, o);
            else if (n instanceof ClassBody) return this.visitClassBody(<ClassBody> n, o);
            else if (n instanceof ClassBodyDeclarations) return this.visitClassBodyDeclarations(<ClassBodyDeclarations> n, o);
            else if (n instanceof ClassMemberDeclaration) return this.visitClassMemberDeclaration(<ClassMemberDeclaration> n, o);
            else if (n instanceof FieldDeclaration) return this.visitFieldDeclaration(<FieldDeclaration> n, o);
            else if (n instanceof VariableDeclarators) return this.visitVariableDeclarators(<VariableDeclarators> n, o);
            else if (n instanceof VariableDeclarator) return this.visitVariableDeclarator(<VariableDeclarator> n, o);
            else if (n instanceof VariableDeclaratorId) return this.visitVariableDeclaratorId(<VariableDeclaratorId> n, o);
            else if (n instanceof FieldModifiers) return this.visitFieldModifiers(<FieldModifiers> n, o);
            else if (n instanceof MethodDeclaration) return this.visitMethodDeclaration(<MethodDeclaration> n, o);
            else if (n instanceof MethodHeader) return this.visitMethodHeader(<MethodHeader> n, o);
            else if (n instanceof ResultType) return this.visitResultType(<ResultType> n, o);
            else if (n instanceof FormalParameterList) return this.visitFormalParameterList(<FormalParameterList> n, o);
            else if (n instanceof FormalParameters) return this.visitFormalParameters(<FormalParameters> n, o);
            else if (n instanceof FormalParameter) return this.visitFormalParameter(<FormalParameter> n, o);
            else if (n instanceof VariableModifiers) return this.visitVariableModifiers(<VariableModifiers> n, o);
            else if (n instanceof VariableModifier) return this.visitVariableModifier(<VariableModifier> n, o);
            else if (n instanceof LastFormalParameter) return this.visitLastFormalParameter(<LastFormalParameter> n, o);
            else if (n instanceof MethodModifiers) return this.visitMethodModifiers(<MethodModifiers> n, o);
            else if (n instanceof Throws) return this.visitThrows(<Throws> n, o);
            else if (n instanceof ExceptionTypeList) return this.visitExceptionTypeList(<ExceptionTypeList> n, o);
            else if (n instanceof MethodBody) return this.visitMethodBody(<MethodBody> n, o);
            else if (n instanceof StaticInitializer) return this.visitStaticInitializer(<StaticInitializer> n, o);
            else if (n instanceof ConstructorDeclaration) return this.visitConstructorDeclaration(<ConstructorDeclaration> n, o);
            else if (n instanceof ConstructorDeclarator) return this.visitConstructorDeclarator(<ConstructorDeclarator> n, o);
            else if (n instanceof ConstructorModifiers) return this.visitConstructorModifiers(<ConstructorModifiers> n, o);
            else if (n instanceof ConstructorBody) return this.visitConstructorBody(<ConstructorBody> n, o);
            else if (n instanceof EnumDeclaration) return this.visitEnumDeclaration(<EnumDeclaration> n, o);
            else if (n instanceof EnumBody) return this.visitEnumBody(<EnumBody> n, o);
            else if (n instanceof EnumConstants) return this.visitEnumConstants(<EnumConstants> n, o);
            else if (n instanceof EnumConstant) return this.visitEnumConstant(<EnumConstant> n, o);
            else if (n instanceof Arguments) return this.visitArguments(<Arguments> n, o);
            else if (n instanceof EnumBodyDeclarations) return this.visitEnumBodyDeclarations(<EnumBodyDeclarations> n, o);
            else if (n instanceof NormalInterfaceDeclaration) return this.visitNormalInterfaceDeclaration(<NormalInterfaceDeclaration> n, o);
            else if (n instanceof InterfaceModifiers) return this.visitInterfaceModifiers(<InterfaceModifiers> n, o);
            else if (n instanceof InterfaceBody) return this.visitInterfaceBody(<InterfaceBody> n, o);
            else if (n instanceof InterfaceMemberDeclarations) return this.visitInterfaceMemberDeclarations(<InterfaceMemberDeclarations> n, o);
            else if (n instanceof InterfaceMemberDeclaration) return this.visitInterfaceMemberDeclaration(<InterfaceMemberDeclaration> n, o);
            else if (n instanceof ConstantDeclaration) return this.visitConstantDeclaration(<ConstantDeclaration> n, o);
            else if (n instanceof ConstantModifiers) return this.visitConstantModifiers(<ConstantModifiers> n, o);
            else if (n instanceof AbstractMethodDeclaration) return this.visitAbstractMethodDeclaration(<AbstractMethodDeclaration> n, o);
            else if (n instanceof AbstractMethodModifiers) return this.visitAbstractMethodModifiers(<AbstractMethodModifiers> n, o);
            else if (n instanceof AnnotationTypeDeclaration) return this.visitAnnotationTypeDeclaration(<AnnotationTypeDeclaration> n, o);
            else if (n instanceof AnnotationTypeBody) return this.visitAnnotationTypeBody(<AnnotationTypeBody> n, o);
            else if (n instanceof AnnotationTypeElementDeclarations) return this.visitAnnotationTypeElementDeclarations(<AnnotationTypeElementDeclarations> n, o);
            else if (n instanceof DefaultValue) return this.visitDefaultValue(<DefaultValue> n, o);
            else if (n instanceof Annotations) return this.visitAnnotations(<Annotations> n, o);
            else if (n instanceof NormalAnnotation) return this.visitNormalAnnotation(<NormalAnnotation> n, o);
            else if (n instanceof ElementValuePairs) return this.visitElementValuePairs(<ElementValuePairs> n, o);
            else if (n instanceof ElementValuePair) return this.visitElementValuePair(<ElementValuePair> n, o);
            else if (n instanceof ElementValueArrayInitializer) return this.visitElementValueArrayInitializer(<ElementValueArrayInitializer> n, o);
            else if (n instanceof ElementValues) return this.visitElementValues(<ElementValues> n, o);
            else if (n instanceof MarkerAnnotation) return this.visitMarkerAnnotation(<MarkerAnnotation> n, o);
            else if (n instanceof SingleElementAnnotation) return this.visitSingleElementAnnotation(<SingleElementAnnotation> n, o);
            else if (n instanceof ArrayInitializer) return this.visitArrayInitializer(<ArrayInitializer> n, o);
            else if (n instanceof VariableInitializers) return this.visitVariableInitializers(<VariableInitializers> n, o);
            else if (n instanceof Block) return this.visitBlock(<Block> n, o);
            else if (n instanceof BlockStatements) return this.visitBlockStatements(<BlockStatements> n, o);
            else if (n instanceof LocalVariableDeclarationStatement) return this.visitLocalVariableDeclarationStatement(<LocalVariableDeclarationStatement> n, o);
            else if (n instanceof LocalVariableDeclaration) return this.visitLocalVariableDeclaration(<LocalVariableDeclaration> n, o);
            else if (n instanceof IfThenStatement) return this.visitIfThenStatement(<IfThenStatement> n, o);
            else if (n instanceof IfThenElseStatement) return this.visitIfThenElseStatement(<IfThenElseStatement> n, o);
            else if (n instanceof IfThenElseStatementNoShortIf) return this.visitIfThenElseStatementNoShortIf(<IfThenElseStatementNoShortIf> n, o);
            else if (n instanceof EmptyStatement) return this.visitEmptyStatement(<EmptyStatement> n, o);
            else if (n instanceof LabeledStatement) return this.visitLabeledStatement(<LabeledStatement> n, o);
            else if (n instanceof LabeledStatementNoShortIf) return this.visitLabeledStatementNoShortIf(<LabeledStatementNoShortIf> n, o);
            else if (n instanceof ExpressionStatement) return this.visitExpressionStatement(<ExpressionStatement> n, o);
            else if (n instanceof SwitchStatement) return this.visitSwitchStatement(<SwitchStatement> n, o);
            else if (n instanceof SwitchBlock) return this.visitSwitchBlock(<SwitchBlock> n, o);
            else if (n instanceof SwitchBlockStatementGroups) return this.visitSwitchBlockStatementGroups(<SwitchBlockStatementGroups> n, o);
            else if (n instanceof SwitchBlockStatementGroup) return this.visitSwitchBlockStatementGroup(<SwitchBlockStatementGroup> n, o);
            else if (n instanceof SwitchLabels) return this.visitSwitchLabels(<SwitchLabels> n, o);
            else if (n instanceof WhileStatement) return this.visitWhileStatement(<WhileStatement> n, o);
            else if (n instanceof WhileStatementNoShortIf) return this.visitWhileStatementNoShortIf(<WhileStatementNoShortIf> n, o);
            else if (n instanceof DoStatement) return this.visitDoStatement(<DoStatement> n, o);
            else if (n instanceof BasicForStatement) return this.visitBasicForStatement(<BasicForStatement> n, o);
            else if (n instanceof ForStatementNoShortIf) return this.visitForStatementNoShortIf(<ForStatementNoShortIf> n, o);
            else if (n instanceof StatementExpressionList) return this.visitStatementExpressionList(<StatementExpressionList> n, o);
            else if (n instanceof EnhancedForStatement) return this.visitEnhancedForStatement(<EnhancedForStatement> n, o);
            else if (n instanceof BreakStatement) return this.visitBreakStatement(<BreakStatement> n, o);
            else if (n instanceof ContinueStatement) return this.visitContinueStatement(<ContinueStatement> n, o);
            else if (n instanceof ReturnStatement) return this.visitReturnStatement(<ReturnStatement> n, o);
            else if (n instanceof ThrowStatement) return this.visitThrowStatement(<ThrowStatement> n, o);
            else if (n instanceof SynchronizedStatement) return this.visitSynchronizedStatement(<SynchronizedStatement> n, o);
            else if (n instanceof Catches) return this.visitCatches(<Catches> n, o);
            else if (n instanceof CatchClause) return this.visitCatchClause(<CatchClause> n, o);
            else if (n instanceof Finally) return this.visitFinally(<Finally> n, o);
            else if (n instanceof ArgumentList) return this.visitArgumentList(<ArgumentList> n, o);
            else if (n instanceof DimExprs) return this.visitDimExprs(<DimExprs> n, o);
            else if (n instanceof DimExpr) return this.visitDimExpr(<DimExpr> n, o);
            else if (n instanceof PostIncrementExpression) return this.visitPostIncrementExpression(<PostIncrementExpression> n, o);
            else if (n instanceof PostDecrementExpression) return this.visitPostDecrementExpression(<PostDecrementExpression> n, o);
            else if (n instanceof PreIncrementExpression) return this.visitPreIncrementExpression(<PreIncrementExpression> n, o);
            else if (n instanceof PreDecrementExpression) return this.visitPreDecrementExpression(<PreDecrementExpression> n, o);
            else if (n instanceof AndExpression) return this.visitAndExpression(<AndExpression> n, o);
            else if (n instanceof ExclusiveOrExpression) return this.visitExclusiveOrExpression(<ExclusiveOrExpression> n, o);
            else if (n instanceof InclusiveOrExpression) return this.visitInclusiveOrExpression(<InclusiveOrExpression> n, o);
            else if (n instanceof ConditionalAndExpression) return this.visitConditionalAndExpression(<ConditionalAndExpression> n, o);
            else if (n instanceof ConditionalOrExpression) return this.visitConditionalOrExpression(<ConditionalOrExpression> n, o);
            else if (n instanceof ConditionalExpression) return this.visitConditionalExpression(<ConditionalExpression> n, o);
            else if (n instanceof Assignment) return this.visitAssignment(<Assignment> n, o);
            else if (n instanceof Commaopt) return this.visitCommaopt(<Commaopt> n, o);
            else if (n instanceof Ellipsisopt) return this.visitEllipsisopt(<Ellipsisopt> n, o);
            else if (n instanceof LPGUserAction0) return this.visitLPGUserAction0(<LPGUserAction0> n, o);
            else if (n instanceof LPGUserAction1) return this.visitLPGUserAction1(<LPGUserAction1> n, o);
            else if (n instanceof LPGUserAction2) return this.visitLPGUserAction2(<LPGUserAction2> n, o);
            else if (n instanceof LPGUserAction3) return this.visitLPGUserAction3(<LPGUserAction3> n, o);
            else if (n instanceof LPGUserAction4) return this.visitLPGUserAction4(<LPGUserAction4> n, o);
            else if (n instanceof IntegralType0) return this.visitIntegralType0(<IntegralType0> n, o);
            else if (n instanceof IntegralType1) return this.visitIntegralType1(<IntegralType1> n, o);
            else if (n instanceof IntegralType2) return this.visitIntegralType2(<IntegralType2> n, o);
            else if (n instanceof IntegralType3) return this.visitIntegralType3(<IntegralType3> n, o);
            else if (n instanceof IntegralType4) return this.visitIntegralType4(<IntegralType4> n, o);
            else if (n instanceof FloatingPointType0) return this.visitFloatingPointType0(<FloatingPointType0> n, o);
            else if (n instanceof FloatingPointType1) return this.visitFloatingPointType1(<FloatingPointType1> n, o);
            else if (n instanceof WildcardBounds0) return this.visitWildcardBounds0(<WildcardBounds0> n, o);
            else if (n instanceof WildcardBounds1) return this.visitWildcardBounds1(<WildcardBounds1> n, o);
            else if (n instanceof ClassModifier0) return this.visitClassModifier0(<ClassModifier0> n, o);
            else if (n instanceof ClassModifier1) return this.visitClassModifier1(<ClassModifier1> n, o);
            else if (n instanceof ClassModifier2) return this.visitClassModifier2(<ClassModifier2> n, o);
            else if (n instanceof ClassModifier3) return this.visitClassModifier3(<ClassModifier3> n, o);
            else if (n instanceof ClassModifier4) return this.visitClassModifier4(<ClassModifier4> n, o);
            else if (n instanceof ClassModifier5) return this.visitClassModifier5(<ClassModifier5> n, o);
            else if (n instanceof ClassModifier6) return this.visitClassModifier6(<ClassModifier6> n, o);
            else if (n instanceof FieldModifier0) return this.visitFieldModifier0(<FieldModifier0> n, o);
            else if (n instanceof FieldModifier1) return this.visitFieldModifier1(<FieldModifier1> n, o);
            else if (n instanceof FieldModifier2) return this.visitFieldModifier2(<FieldModifier2> n, o);
            else if (n instanceof FieldModifier3) return this.visitFieldModifier3(<FieldModifier3> n, o);
            else if (n instanceof FieldModifier4) return this.visitFieldModifier4(<FieldModifier4> n, o);
            else if (n instanceof FieldModifier5) return this.visitFieldModifier5(<FieldModifier5> n, o);
            else if (n instanceof FieldModifier6) return this.visitFieldModifier6(<FieldModifier6> n, o);
            else if (n instanceof MethodDeclarator0) return this.visitMethodDeclarator0(<MethodDeclarator0> n, o);
            else if (n instanceof MethodDeclarator1) return this.visitMethodDeclarator1(<MethodDeclarator1> n, o);
            else if (n instanceof MethodModifier0) return this.visitMethodModifier0(<MethodModifier0> n, o);
            else if (n instanceof MethodModifier1) return this.visitMethodModifier1(<MethodModifier1> n, o);
            else if (n instanceof MethodModifier2) return this.visitMethodModifier2(<MethodModifier2> n, o);
            else if (n instanceof MethodModifier3) return this.visitMethodModifier3(<MethodModifier3> n, o);
            else if (n instanceof MethodModifier4) return this.visitMethodModifier4(<MethodModifier4> n, o);
            else if (n instanceof MethodModifier5) return this.visitMethodModifier5(<MethodModifier5> n, o);
            else if (n instanceof MethodModifier6) return this.visitMethodModifier6(<MethodModifier6> n, o);
            else if (n instanceof MethodModifier7) return this.visitMethodModifier7(<MethodModifier7> n, o);
            else if (n instanceof MethodModifier8) return this.visitMethodModifier8(<MethodModifier8> n, o);
            else if (n instanceof ConstructorModifier0) return this.visitConstructorModifier0(<ConstructorModifier0> n, o);
            else if (n instanceof ConstructorModifier1) return this.visitConstructorModifier1(<ConstructorModifier1> n, o);
            else if (n instanceof ConstructorModifier2) return this.visitConstructorModifier2(<ConstructorModifier2> n, o);
            else if (n instanceof ExplicitConstructorInvocation0) return this.visitExplicitConstructorInvocation0(<ExplicitConstructorInvocation0> n, o);
            else if (n instanceof ExplicitConstructorInvocation1) return this.visitExplicitConstructorInvocation1(<ExplicitConstructorInvocation1> n, o);
            else if (n instanceof ExplicitConstructorInvocation2) return this.visitExplicitConstructorInvocation2(<ExplicitConstructorInvocation2> n, o);
            else if (n instanceof InterfaceModifier0) return this.visitInterfaceModifier0(<InterfaceModifier0> n, o);
            else if (n instanceof InterfaceModifier1) return this.visitInterfaceModifier1(<InterfaceModifier1> n, o);
            else if (n instanceof InterfaceModifier2) return this.visitInterfaceModifier2(<InterfaceModifier2> n, o);
            else if (n instanceof InterfaceModifier3) return this.visitInterfaceModifier3(<InterfaceModifier3> n, o);
            else if (n instanceof InterfaceModifier4) return this.visitInterfaceModifier4(<InterfaceModifier4> n, o);
            else if (n instanceof InterfaceModifier5) return this.visitInterfaceModifier5(<InterfaceModifier5> n, o);
            else if (n instanceof ExtendsInterfaces0) return this.visitExtendsInterfaces0(<ExtendsInterfaces0> n, o);
            else if (n instanceof ExtendsInterfaces1) return this.visitExtendsInterfaces1(<ExtendsInterfaces1> n, o);
            else if (n instanceof ConstantModifier0) return this.visitConstantModifier0(<ConstantModifier0> n, o);
            else if (n instanceof ConstantModifier1) return this.visitConstantModifier1(<ConstantModifier1> n, o);
            else if (n instanceof ConstantModifier2) return this.visitConstantModifier2(<ConstantModifier2> n, o);
            else if (n instanceof AbstractMethodModifier0) return this.visitAbstractMethodModifier0(<AbstractMethodModifier0> n, o);
            else if (n instanceof AbstractMethodModifier1) return this.visitAbstractMethodModifier1(<AbstractMethodModifier1> n, o);
            else if (n instanceof AnnotationTypeElementDeclaration0) return this.visitAnnotationTypeElementDeclaration0(<AnnotationTypeElementDeclaration0> n, o);
            else if (n instanceof AnnotationTypeElementDeclaration1) return this.visitAnnotationTypeElementDeclaration1(<AnnotationTypeElementDeclaration1> n, o);
            else if (n instanceof AssertStatement0) return this.visitAssertStatement0(<AssertStatement0> n, o);
            else if (n instanceof AssertStatement1) return this.visitAssertStatement1(<AssertStatement1> n, o);
            else if (n instanceof SwitchLabel0) return this.visitSwitchLabel0(<SwitchLabel0> n, o);
            else if (n instanceof SwitchLabel1) return this.visitSwitchLabel1(<SwitchLabel1> n, o);
            else if (n instanceof SwitchLabel2) return this.visitSwitchLabel2(<SwitchLabel2> n, o);
            else if (n instanceof TryStatement0) return this.visitTryStatement0(<TryStatement0> n, o);
            else if (n instanceof TryStatement1) return this.visitTryStatement1(<TryStatement1> n, o);
            else if (n instanceof PrimaryNoNewArray0) return this.visitPrimaryNoNewArray0(<PrimaryNoNewArray0> n, o);
            else if (n instanceof PrimaryNoNewArray1) return this.visitPrimaryNoNewArray1(<PrimaryNoNewArray1> n, o);
            else if (n instanceof PrimaryNoNewArray2) return this.visitPrimaryNoNewArray2(<PrimaryNoNewArray2> n, o);
            else if (n instanceof PrimaryNoNewArray3) return this.visitPrimaryNoNewArray3(<PrimaryNoNewArray3> n, o);
            else if (n instanceof PrimaryNoNewArray4) return this.visitPrimaryNoNewArray4(<PrimaryNoNewArray4> n, o);
            else if (n instanceof Literal0) return this.visitLiteral0(<Literal0> n, o);
            else if (n instanceof Literal1) return this.visitLiteral1(<Literal1> n, o);
            else if (n instanceof Literal2) return this.visitLiteral2(<Literal2> n, o);
            else if (n instanceof Literal3) return this.visitLiteral3(<Literal3> n, o);
            else if (n instanceof Literal4) return this.visitLiteral4(<Literal4> n, o);
            else if (n instanceof Literal5) return this.visitLiteral5(<Literal5> n, o);
            else if (n instanceof Literal6) return this.visitLiteral6(<Literal6> n, o);
            else if (n instanceof BooleanLiteral0) return this.visitBooleanLiteral0(<BooleanLiteral0> n, o);
            else if (n instanceof BooleanLiteral1) return this.visitBooleanLiteral1(<BooleanLiteral1> n, o);
            else if (n instanceof ClassInstanceCreationExpression0) return this.visitClassInstanceCreationExpression0(<ClassInstanceCreationExpression0> n, o);
            else if (n instanceof ClassInstanceCreationExpression1) return this.visitClassInstanceCreationExpression1(<ClassInstanceCreationExpression1> n, o);
            else if (n instanceof ArrayCreationExpression0) return this.visitArrayCreationExpression0(<ArrayCreationExpression0> n, o);
            else if (n instanceof ArrayCreationExpression1) return this.visitArrayCreationExpression1(<ArrayCreationExpression1> n, o);
            else if (n instanceof ArrayCreationExpression2) return this.visitArrayCreationExpression2(<ArrayCreationExpression2> n, o);
            else if (n instanceof ArrayCreationExpression3) return this.visitArrayCreationExpression3(<ArrayCreationExpression3> n, o);
            else if (n instanceof Dims0) return this.visitDims0(<Dims0> n, o);
            else if (n instanceof Dims1) return this.visitDims1(<Dims1> n, o);
            else if (n instanceof FieldAccess0) return this.visitFieldAccess0(<FieldAccess0> n, o);
            else if (n instanceof FieldAccess1) return this.visitFieldAccess1(<FieldAccess1> n, o);
            else if (n instanceof FieldAccess2) return this.visitFieldAccess2(<FieldAccess2> n, o);
            else if (n instanceof MethodInvocation0) return this.visitMethodInvocation0(<MethodInvocation0> n, o);
            else if (n instanceof MethodInvocation1) return this.visitMethodInvocation1(<MethodInvocation1> n, o);
            else if (n instanceof MethodInvocation2) return this.visitMethodInvocation2(<MethodInvocation2> n, o);
            else if (n instanceof MethodInvocation3) return this.visitMethodInvocation3(<MethodInvocation3> n, o);
            else if (n instanceof MethodInvocation4) return this.visitMethodInvocation4(<MethodInvocation4> n, o);
            else if (n instanceof ArrayAccess0) return this.visitArrayAccess0(<ArrayAccess0> n, o);
            else if (n instanceof ArrayAccess1) return this.visitArrayAccess1(<ArrayAccess1> n, o);
            else if (n instanceof UnaryExpression0) return this.visitUnaryExpression0(<UnaryExpression0> n, o);
            else if (n instanceof UnaryExpression1) return this.visitUnaryExpression1(<UnaryExpression1> n, o);
            else if (n instanceof UnaryExpressionNotPlusMinus0) return this.visitUnaryExpressionNotPlusMinus0(<UnaryExpressionNotPlusMinus0> n, o);
            else if (n instanceof UnaryExpressionNotPlusMinus1) return this.visitUnaryExpressionNotPlusMinus1(<UnaryExpressionNotPlusMinus1> n, o);
            else if (n instanceof CastExpression0) return this.visitCastExpression0(<CastExpression0> n, o);
            else if (n instanceof CastExpression1) return this.visitCastExpression1(<CastExpression1> n, o);
            else if (n instanceof MultiplicativeExpression0) return this.visitMultiplicativeExpression0(<MultiplicativeExpression0> n, o);
            else if (n instanceof MultiplicativeExpression1) return this.visitMultiplicativeExpression1(<MultiplicativeExpression1> n, o);
            else if (n instanceof MultiplicativeExpression2) return this.visitMultiplicativeExpression2(<MultiplicativeExpression2> n, o);
            else if (n instanceof AdditiveExpression0) return this.visitAdditiveExpression0(<AdditiveExpression0> n, o);
            else if (n instanceof AdditiveExpression1) return this.visitAdditiveExpression1(<AdditiveExpression1> n, o);
            else if (n instanceof ShiftExpression0) return this.visitShiftExpression0(<ShiftExpression0> n, o);
            else if (n instanceof ShiftExpression1) return this.visitShiftExpression1(<ShiftExpression1> n, o);
            else if (n instanceof ShiftExpression2) return this.visitShiftExpression2(<ShiftExpression2> n, o);
            else if (n instanceof RelationalExpression0) return this.visitRelationalExpression0(<RelationalExpression0> n, o);
            else if (n instanceof RelationalExpression1) return this.visitRelationalExpression1(<RelationalExpression1> n, o);
            else if (n instanceof RelationalExpression2) return this.visitRelationalExpression2(<RelationalExpression2> n, o);
            else if (n instanceof RelationalExpression3) return this.visitRelationalExpression3(<RelationalExpression3> n, o);
            else if (n instanceof RelationalExpression4) return this.visitRelationalExpression4(<RelationalExpression4> n, o);
            else if (n instanceof EqualityExpression0) return this.visitEqualityExpression0(<EqualityExpression0> n, o);
            else if (n instanceof EqualityExpression1) return this.visitEqualityExpression1(<EqualityExpression1> n, o);
            else if (n instanceof AssignmentOperator0) return this.visitAssignmentOperator0(<AssignmentOperator0> n, o);
            else if (n instanceof AssignmentOperator1) return this.visitAssignmentOperator1(<AssignmentOperator1> n, o);
            else if (n instanceof AssignmentOperator2) return this.visitAssignmentOperator2(<AssignmentOperator2> n, o);
            else if (n instanceof AssignmentOperator3) return this.visitAssignmentOperator3(<AssignmentOperator3> n, o);
            else if (n instanceof AssignmentOperator4) return this.visitAssignmentOperator4(<AssignmentOperator4> n, o);
            else if (n instanceof AssignmentOperator5) return this.visitAssignmentOperator5(<AssignmentOperator5> n, o);
            else if (n instanceof AssignmentOperator6) return this.visitAssignmentOperator6(<AssignmentOperator6> n, o);
            else if (n instanceof AssignmentOperator7) return this.visitAssignmentOperator7(<AssignmentOperator7> n, o);
            else if (n instanceof AssignmentOperator8) return this.visitAssignmentOperator8(<AssignmentOperator8> n, o);
            else if (n instanceof AssignmentOperator9) return this.visitAssignmentOperator9(<AssignmentOperator9> n, o);
            else if (n instanceof AssignmentOperator10) return this.visitAssignmentOperator10(<AssignmentOperator10> n, o);
            else if (n instanceof AssignmentOperator11) return this.visitAssignmentOperator11(<AssignmentOperator11> n, o);
            throw new Error("visit(" + n.toString() + ")");
        }
    }

